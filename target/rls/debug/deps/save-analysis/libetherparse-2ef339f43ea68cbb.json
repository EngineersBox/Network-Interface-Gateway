{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0","program":"/Users/jackkilrain/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","etherparse","--edition=2018","/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=2ef339f43ea68cbb","-C","extra-filename=-2ef339f43ea68cbb","--out-dir","/Users/jackkilrain/Desktop/Projects/Rust/network_interface_echo/target/rls/debug/deps","-L","dependency=/Users/jackkilrain/Desktop/Projects/Rust/network_interface_echo/target/rls/debug/deps","--extern","byteorder=/Users/jackkilrain/Desktop/Projects/Rust/network_interface_echo/target/rls/debug/deps/libbyteorder-e28b1c5ee674673e.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/jackkilrain/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/jackkilrain/Desktop/Projects/Rust/network_interface_echo/target/rls/debug/deps/libetherparse-2ef339f43ea68cbb.rmeta"},"prelude":{"crate_id":{"name":"etherparse","disambiguator":[17646803724740214100,6634752596031464218]},"crate_root":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src","external_crates":[{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9021465345373980394,3124973195650668090]}},{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9602256960182177626,6090626646909615487]}},{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7262137911650218293,7653052996173785719]}},{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[779572931692069488,12103900165225902944]}},{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[14824622025657768391,11084704428800266340]}},{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[13927858221183108308,2936751290383562167]}},{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5887051544123270319,11267639612245428731]}},{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17538919964300869834,13280875134487798303]}},{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[3857365019506907746,1978006889988524963]}},{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6420578954683938766,12386751207156539571]}},{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[12077145375566927939,15528323503669178]}},{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[15870750671565619089,8732159814179211948]}},{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4047794608019940794,5355446413855566983]}},{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[6496543397262938517,7778595101833052780]}},{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4847089225717416183,18113406167765430021]}},{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","num":16,"id":{"name":"byteorder","disambiguator":[16184131573132253180,11554708749335165794]}}],"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":0,"byte_end":23594,"line_start":1,"line_end":525,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":11385,"byte_end":11386,"line_start":206,"line_end":206,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"EtherType, Ethernet2HeaderSlice, Ethernet2Header","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":11423,"byte_end":11424,"line_start":207,"line_end":207,"column_start":36,"column_end":37},"alias_span":null,"name":"*","value":"SingleVlanHeaderSlice, DoubleVlanHeader, SingleVlanHeader, VlanHeader, DoubleVlanHeaderSlice","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":11470,"byte_end":11471,"line_start":210,"line_end":210,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"IpHeader, IpTrafficClass","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":11504,"byte_end":11505,"line_start":211,"line_end":211,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"Ipv4Header, Ipv4HeaderSlice","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":11538,"byte_end":11539,"line_start":212,"line_end":212,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"Ipv6HeaderSlice, Ipv6Header, Ipv6ExtensionHeaderSlice, IPV6_MAX_NUM_HEADER_EXTENSIONS","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":11588,"byte_end":11589,"line_start":215,"line_end":215,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"TcpHeaderSlice, TcpOptionReadError, TcpOptionWriteError, TcpHeader, TcpOptionElement","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":11622,"byte_end":11623,"line_start":216,"line_end":216,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"UdpHeader, UdpHeaderSlice","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1607},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":11651,"byte_end":11666,"line_start":217,"line_end":217,"column_start":27,"column_end":42},"alias_span":null,"name":"TransportHeader","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":11720,"byte_end":11721,"line_start":220,"line_end":220,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":11775,"byte_end":11776,"line_start":223,"line_end":223,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":11830,"byte_end":11831,"line_start":226,"line_end":226,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"InternetSlice, TransportSlice, VlanSlice, SlicedPacket, LinkSlice","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":0,"byte_end":23594,"line_start":1,"line_end":525,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":672},{"krate":0,"index":1898},{"krate":0,"index":1928},{"krate":0,"index":674},{"krate":0,"index":677},{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":1930},{"krate":0,"index":1940},{"krate":0,"index":684},{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":690},{"krate":0,"index":693},{"krate":0,"index":1942},{"krate":0,"index":1979},{"krate":0,"index":1975},{"krate":0,"index":1976},{"krate":0,"index":1972},{"krate":0,"index":1973},{"krate":0,"index":1970},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":1981},{"krate":0,"index":2004},{"krate":0,"index":2001},{"krate":0,"index":2002},{"krate":0,"index":1998},{"krate":0,"index":1999},{"krate":0,"index":1996},{"krate":0,"index":700},{"krate":0,"index":703},{"krate":0,"index":705},{"krate":0,"index":707},{"krate":0,"index":711},{"krate":0,"index":713}],"decl_id":null,"docs":" A zero allocation library for parsing & writing a bunch of packet based protocols (EthernetII, IPv4, IPv6, UDP, TCP ...).\n \n Currently supported are:\n * Ethernet II\n * IEEE 802.1Q VLAN Tagging Header\n * IPv4\n * IPv6 (missing extension headers, but supporting skipping them)\n * UDP\n * TCP\n \n # Usage\n \n First, add the following to your `Cargo.toml`:\n \n ```toml\n [dependencies]\n etherparse = \"0.9.0\"\n ```\n \n Next, add this to your crate root:\n \n ```\n extern crate etherparse;\n ```\n \n # What is etherparse?\n Etherparse is intended to provide the basic network parsing functions that allow for easy analysis, transformation or generation of recorded network data.\n \n Some key points are:\n \n * It is completly written in Rust and thoroughly tested.\n * Special attention has been paid to not use allocations or syscalls.\n * The package is still in development and can & will still change. \n * The current focus of development is on the most popular protocols in the internet & transport layer.","sig":null,"attributes":[{"value":"/ A zero allocation library for parsing & writing a bunch of packet based protocols (EthernetII, IPv4, IPv6, UDP, TCP ...).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":0,"byte_end":125,"line_start":1,"line_end":1,"column_start":1,"column_end":126}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":126,"byte_end":130,"line_start":2,"line_end":2,"column_start":1,"column_end":5}},{"value":"/ Currently supported are:","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":131,"byte_end":159,"line_start":3,"line_end":3,"column_start":1,"column_end":29}},{"value":"/ * Ethernet II","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":160,"byte_end":177,"line_start":4,"line_end":4,"column_start":1,"column_end":18}},{"value":"/ * IEEE 802.1Q VLAN Tagging Header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":178,"byte_end":215,"line_start":5,"line_end":5,"column_start":1,"column_end":38}},{"value":"/ * IPv4","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":216,"byte_end":226,"line_start":6,"line_end":6,"column_start":1,"column_end":11}},{"value":"/ * IPv6 (missing extension headers, but supporting skipping them)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":227,"byte_end":295,"line_start":7,"line_end":7,"column_start":1,"column_end":69}},{"value":"/ * UDP","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":296,"byte_end":305,"line_start":8,"line_end":8,"column_start":1,"column_end":10}},{"value":"/ * TCP","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":306,"byte_end":315,"line_start":9,"line_end":9,"column_start":1,"column_end":10}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":316,"byte_end":320,"line_start":10,"line_end":10,"column_start":1,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":321,"byte_end":332,"line_start":11,"line_end":11,"column_start":1,"column_end":12}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":333,"byte_end":337,"line_start":12,"line_end":12,"column_start":1,"column_end":5}},{"value":"/ First, add the following to your `Cargo.toml`:","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":338,"byte_end":388,"line_start":13,"line_end":13,"column_start":1,"column_end":51}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":389,"byte_end":393,"line_start":14,"line_end":14,"column_start":1,"column_end":5}},{"value":"/ ```toml","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":394,"byte_end":405,"line_start":15,"line_end":15,"column_start":1,"column_end":12}},{"value":"/ [dependencies]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":406,"byte_end":424,"line_start":16,"line_end":16,"column_start":1,"column_end":19}},{"value":"/ etherparse = \"0.9.0\"","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":425,"byte_end":449,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":450,"byte_end":457,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":458,"byte_end":462,"line_start":19,"line_end":19,"column_start":1,"column_end":5}},{"value":"/ Next, add this to your crate root:","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":463,"byte_end":501,"line_start":20,"line_end":20,"column_start":1,"column_end":39}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":502,"byte_end":506,"line_start":21,"line_end":21,"column_start":1,"column_end":5}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":507,"byte_end":514,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ extern crate etherparse;","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":515,"byte_end":543,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":544,"byte_end":551,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":552,"byte_end":556,"line_start":25,"line_end":25,"column_start":1,"column_end":5}},{"value":"/ # What is etherparse?","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":557,"byte_end":582,"line_start":26,"line_end":26,"column_start":1,"column_end":26}},{"value":"/ Etherparse is intended to provide the basic network parsing functions that allow for easy analysis, transformation or generation of recorded network data.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":583,"byte_end":741,"line_start":27,"line_end":27,"column_start":1,"column_end":159}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":742,"byte_end":746,"line_start":28,"line_end":28,"column_start":1,"column_end":5}},{"value":"/ Some key points are:","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":747,"byte_end":771,"line_start":29,"line_end":29,"column_start":1,"column_end":25}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":772,"byte_end":776,"line_start":30,"line_end":30,"column_start":1,"column_end":5}},{"value":"/ * It is completly written in Rust and thoroughly tested.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":777,"byte_end":837,"line_start":31,"line_end":31,"column_start":1,"column_end":61}},{"value":"/ * Special attention has been paid to not use allocations or syscalls.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":838,"byte_end":911,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ * The package is still in development and can & will still change. ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":912,"byte_end":983,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/ * The current focus of development is on the most popular protocols in the internet & transport layer.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":984,"byte_end":1090,"line_start":34,"line_end":34,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":1091,"byte_end":1094,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ # How to parse network packages?","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":1095,"byte_end":1131,"line_start":36,"line_end":36,"column_start":1,"column_end":37}},{"value":"/ Etherparse gives you two options for parsing network packages automatically:","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":1132,"byte_end":1212,"line_start":37,"line_end":37,"column_start":1,"column_end":81}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":1213,"byte_end":1217,"line_start":38,"line_end":38,"column_start":1,"column_end":5}},{"value":"/ ## Slicing the packet","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":1218,"byte_end":1243,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/ Here the different components in a packet are seperated without parsing all their fields. For each header a slice is generated that allows access to the fields of a header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":1244,"byte_end":1420,"line_start":40,"line_end":40,"column_start":1,"column_end":177}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":1421,"byte_end":1428,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/ # use etherparse::{SlicedPacket, PacketBuilder};","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":1429,"byte_end":1481,"line_start":42,"line_end":42,"column_start":1,"column_end":53}},{"value":"/ # let builder = PacketBuilder::","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":1482,"byte_end":1517,"line_start":43,"line_end":43,"column_start":1,"column_end":36}},{"value":"/ #    ethernet2([1,2,3,4,5,6],     //source mac","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":1518,"byte_end":1568,"line_start":44,"line_end":44,"column_start":1,"column_end":51}},{"value":"/ #               [7,8,9,10,11,12]) //destionation mac","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":1569,"byte_end":1625,"line_start":45,"line_end":45,"column_start":1,"column_end":57}},{"value":"/ #    .ipv4([192,168,1,1], //source ip","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":1626,"byte_end":1667,"line_start":46,"line_end":46,"column_start":1,"column_end":42}},{"value":"/ #          [192,168,1,2], //desitionation ip","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":1668,"byte_end":1716,"line_start":47,"line_end":47,"column_start":1,"column_end":49}},{"value":"/ #          20)            //time to life","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":1717,"byte_end":1761,"line_start":48,"line_end":48,"column_start":1,"column_end":45}},{"value":"/ #    .udp(21,    //source port ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":1762,"byte_end":1797,"line_start":49,"line_end":49,"column_start":1,"column_end":36}},{"value":"/ #         1234); //desitnation port","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":1798,"byte_end":1837,"line_start":50,"line_end":50,"column_start":1,"column_end":40}},{"value":"/ #    //payload of the udp packet","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":1838,"byte_end":1874,"line_start":51,"line_end":51,"column_start":1,"column_end":37}},{"value":"/ #    let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":1875,"byte_end":1916,"line_start":52,"line_end":52,"column_start":1,"column_end":42}},{"value":"/ #    //get some memory to store the serialized data","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":1917,"byte_end":1972,"line_start":53,"line_end":53,"column_start":1,"column_end":56}},{"value":"/ #    let mut packet = Vec::<u8>::with_capacity(","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":1973,"byte_end":2024,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/ #                            builder.size(payload.len()));","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":2025,"byte_end":2087,"line_start":55,"line_end":55,"column_start":1,"column_end":63}},{"value":"/ #    builder.write(&mut packet, &payload).unwrap();","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":2088,"byte_end":2143,"line_start":56,"line_end":56,"column_start":1,"column_end":56}},{"value":"/ match SlicedPacket::from_ethernet(&packet) {","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":2144,"byte_end":2192,"line_start":57,"line_end":57,"column_start":1,"column_end":49}},{"value":"/     Err(value) => println!(\"Err {:?}\", value),","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":2193,"byte_end":2243,"line_start":58,"line_end":58,"column_start":1,"column_end":51}},{"value":"/     Ok(value) => {","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":2244,"byte_end":2266,"line_start":59,"line_end":59,"column_start":1,"column_end":23}},{"value":"/         println!(\"link: {:?}\", value.link);","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":2267,"byte_end":2314,"line_start":60,"line_end":60,"column_start":1,"column_end":48}},{"value":"/         println!(\"vlan: {:?}\", value.vlan);","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":2315,"byte_end":2362,"line_start":61,"line_end":61,"column_start":1,"column_end":48}},{"value":"/         println!(\"ip: {:?}\", value.ip);","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":2363,"byte_end":2406,"line_start":62,"line_end":62,"column_start":1,"column_end":44}},{"value":"/         println!(\"transport: {:?}\", value.transport);","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":2407,"byte_end":2464,"line_start":63,"line_end":63,"column_start":1,"column_end":58}},{"value":"/     }","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":2465,"byte_end":2474,"line_start":64,"line_end":64,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":2475,"byte_end":2480,"line_start":65,"line_end":65,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":2481,"byte_end":2488,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/ This is the faster option if your code is not interested in all fields of all the headers. It is a good choice if you just want filter or find packages based on a subset of the headers and/or their fields.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":2489,"byte_end":2698,"line_start":67,"line_end":67,"column_start":1,"column_end":210}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":2699,"byte_end":2703,"line_start":68,"line_end":68,"column_start":1,"column_end":5}},{"value":"/ Depending from which point downward you want to slice a package check out the functions:","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":2704,"byte_end":2796,"line_start":69,"line_end":69,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":2797,"byte_end":2800,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ * [`SlicedPacket.from_ethernet`](struct.SlicedPacket.html#method.from_ethernet) for parsing from an Ethernet II header downwards","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":2801,"byte_end":2933,"line_start":71,"line_end":71,"column_start":1,"column_end":133}},{"value":"/ * [`SlicedPacket.from_ip`](struct.SlicedPacket.html#method.from_ip) for parsing from an IPv4 or IPv6 downwards","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":2934,"byte_end":3048,"line_start":72,"line_end":72,"column_start":1,"column_end":115}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":3049,"byte_end":3052,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ ## Deserializing all headers into structs","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":3053,"byte_end":3098,"line_start":74,"line_end":74,"column_start":1,"column_end":46}},{"value":"/ This option deserializes all known headers and transferes their contents to header structs.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":3099,"byte_end":3194,"line_start":75,"line_end":75,"column_start":1,"column_end":96}},{"value":"/ ```rust","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":3195,"byte_end":3206,"line_start":76,"line_end":76,"column_start":1,"column_end":12}},{"value":"/ # use etherparse::{PacketHeaders, PacketBuilder};","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":3207,"byte_end":3260,"line_start":77,"line_end":77,"column_start":1,"column_end":54}},{"value":"/ # let builder = PacketBuilder::","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":3261,"byte_end":3296,"line_start":78,"line_end":78,"column_start":1,"column_end":36}},{"value":"/ #    ethernet2([1,2,3,4,5,6],     //source mac","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":3297,"byte_end":3347,"line_start":79,"line_end":79,"column_start":1,"column_end":51}},{"value":"/ #               [7,8,9,10,11,12]) //destionation mac","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":3348,"byte_end":3404,"line_start":80,"line_end":80,"column_start":1,"column_end":57}},{"value":"/ #    .ipv4([192,168,1,1], //source ip","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":3405,"byte_end":3446,"line_start":81,"line_end":81,"column_start":1,"column_end":42}},{"value":"/ #          [192,168,1,2], //desitionation ip","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":3447,"byte_end":3495,"line_start":82,"line_end":82,"column_start":1,"column_end":49}},{"value":"/ #          20)            //time to life","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":3496,"byte_end":3540,"line_start":83,"line_end":83,"column_start":1,"column_end":45}},{"value":"/ #    .udp(21,    //source port ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":3541,"byte_end":3576,"line_start":84,"line_end":84,"column_start":1,"column_end":36}},{"value":"/ #         1234); //desitnation port","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":3577,"byte_end":3616,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/ #    //payload of the udp packet","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":3617,"byte_end":3653,"line_start":86,"line_end":86,"column_start":1,"column_end":37}},{"value":"/ #    let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":3654,"byte_end":3695,"line_start":87,"line_end":87,"column_start":1,"column_end":42}},{"value":"/ #    //get some memory to store the serialized data","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":3696,"byte_end":3751,"line_start":88,"line_end":88,"column_start":1,"column_end":56}},{"value":"/ #    let mut packet = Vec::<u8>::with_capacity(","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":3752,"byte_end":3803,"line_start":89,"line_end":89,"column_start":1,"column_end":52}},{"value":"/ #                            builder.size(payload.len()));","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":3804,"byte_end":3866,"line_start":90,"line_end":90,"column_start":1,"column_end":63}},{"value":"/ #    builder.write(&mut packet, &payload).unwrap();","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":3867,"byte_end":3922,"line_start":91,"line_end":91,"column_start":1,"column_end":56}},{"value":"/ match PacketHeaders::from_ethernet_slice(&packet) {","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":3923,"byte_end":3978,"line_start":92,"line_end":92,"column_start":1,"column_end":56}},{"value":"/     Err(value) => println!(\"Err {:?}\", value),","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":3979,"byte_end":4029,"line_start":93,"line_end":93,"column_start":1,"column_end":51}},{"value":"/     Ok(value) => {","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":4030,"byte_end":4052,"line_start":94,"line_end":94,"column_start":1,"column_end":23}},{"value":"/         println!(\"link: {:?}\", value.link);","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":4053,"byte_end":4100,"line_start":95,"line_end":95,"column_start":1,"column_end":48}},{"value":"/         println!(\"vlan: {:?}\", value.vlan);","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":4101,"byte_end":4148,"line_start":96,"line_end":96,"column_start":1,"column_end":48}},{"value":"/         println!(\"ip: {:?}\", value.ip);","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":4149,"byte_end":4192,"line_start":97,"line_end":97,"column_start":1,"column_end":44}},{"value":"/         println!(\"transport: {:?}\", value.transport);","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":4193,"byte_end":4250,"line_start":98,"line_end":98,"column_start":1,"column_end":58}},{"value":"/     }","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":4251,"byte_end":4260,"line_start":99,"line_end":99,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":4261,"byte_end":4266,"line_start":100,"line_end":100,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":4267,"byte_end":4274,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/ This option is slower then slicing when only few fields are accessed. But it can be the faster option or useful if you are interested in most fields anyways or if you want to re-serialize the headers with modified values.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":4275,"byte_end":4500,"line_start":102,"line_end":102,"column_start":1,"column_end":226}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":4501,"byte_end":4505,"line_start":103,"line_end":103,"column_start":1,"column_end":5}},{"value":"/ Depending from which point downward you want to unpack a package check out the functions","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":4506,"byte_end":4598,"line_start":104,"line_end":104,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":4599,"byte_end":4602,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ * [`PacketHeaders.from_ethernet_slice`](struct.PacketHeaders.html#method.from_ethernet_slice) for parsing from an Ethernet II header downwards","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":4603,"byte_end":4749,"line_start":106,"line_end":106,"column_start":1,"column_end":147}},{"value":"/ * [`PacketHeaders.from_ip_slice`](struct.PacketHeaders.html#method.from_ip_slice) for parsing from an IPv4 or IPv6 downwards","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":4750,"byte_end":4878,"line_start":107,"line_end":107,"column_start":1,"column_end":129}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":4879,"byte_end":4882,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ ## Manually slicing & parsing packets","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":4883,"byte_end":4924,"line_start":109,"line_end":109,"column_start":1,"column_end":42}},{"value":"/ It is also possible to manually slice & parse a packet. For each header type there is are metods that create a slice or struct from a memory slice. ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":4925,"byte_end":5077,"line_start":110,"line_end":110,"column_start":1,"column_end":153}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":5078,"byte_end":5082,"line_start":111,"line_end":111,"column_start":1,"column_end":5}},{"value":"/ Have a look at the documentation for the <NAME>Slice.from_slice methods, if you want to create your own slices:","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":5083,"byte_end":5198,"line_start":112,"line_end":112,"column_start":1,"column_end":116}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":5199,"byte_end":5203,"line_start":113,"line_end":113,"column_start":1,"column_end":5}},{"value":"/ * [`Ethernet2HeaderSlice.from_slice`](struct.Ethernet2HeaderSlice.html#method.from_slice)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":5204,"byte_end":5297,"line_start":114,"line_end":114,"column_start":1,"column_end":94}},{"value":"/ * [`SingleVlanHeaderSlice.from_slice`](struct.SingleVlanHeaderSlice.html#method.from_slice)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":5298,"byte_end":5393,"line_start":115,"line_end":115,"column_start":1,"column_end":96}},{"value":"/ * [`DoubleVlanHeaderSlice.from_slice`](struct.DoubleVlanHeaderSlice.html#method.from_slice)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":5394,"byte_end":5489,"line_start":116,"line_end":116,"column_start":1,"column_end":96}},{"value":"/ * [`Ipv4HeaderSlice.from_slice`](struct.Ipv4HeaderSlice.html#method.from_slice)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":5490,"byte_end":5573,"line_start":117,"line_end":117,"column_start":1,"column_end":84}},{"value":"/ * [`Ipv6HeaderSlice.from_slice`](struct.Ipv6HeaderSlice.html#method.from_slice)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":5574,"byte_end":5657,"line_start":118,"line_end":118,"column_start":1,"column_end":84}},{"value":"/ * [`Ipv6ExtensionHeaderSlice.from_slice`](struct.Ipv6ExtensionHeaderSlice.html)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":5658,"byte_end":5741,"line_start":119,"line_end":119,"column_start":1,"column_end":84}},{"value":"/ * [`UdpHeaderSlice.from_slice`](struct.UdpHeaderSlice.html#method.from_slice)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":5742,"byte_end":5823,"line_start":120,"line_end":120,"column_start":1,"column_end":82}},{"value":"/ * [`TcpHeaderSlice.from_slice`](struct.TcpHeaderSlice.html#method.from_slice)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":5824,"byte_end":5905,"line_start":121,"line_end":121,"column_start":1,"column_end":82}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":5906,"byte_end":5910,"line_start":122,"line_end":122,"column_start":1,"column_end":5}},{"value":"/ And for deserialization into the corresponding header structs have a look at:","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":5911,"byte_end":5992,"line_start":123,"line_end":123,"column_start":1,"column_end":82}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":5993,"byte_end":5997,"line_start":124,"line_end":124,"column_start":1,"column_end":5}},{"value":"/ * [`Ethernet2Header.read`](struct.Ethernet2Header.html#method.read) & [`Ethernet2Header.read_from_slice`](struct.Ethernet2Header.html#method.read_from_slice)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":5998,"byte_end":6159,"line_start":125,"line_end":125,"column_start":1,"column_end":162}},{"value":"/ * [`SingleVlanHeader.read`](struct.SingleVlanHeader.html#method.read) & [`SingleVlanHeader.read_from_slice`](struct.SingleVlanHeader.html#method.read_from_slice)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":6160,"byte_end":6325,"line_start":126,"line_end":126,"column_start":1,"column_end":166}},{"value":"/ * [`DoubleVlanHeader.read`](struct.DoubleVlanHeader.html#method.read) & [`DoubleVlanHeader.read_from_slice`](struct.DoubleVlanHeader.html#method.read_from_slice)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":6326,"byte_end":6491,"line_start":127,"line_end":127,"column_start":1,"column_end":166}},{"value":"/ * [`IpHeader.read`](enum.IpHeader.html#method.read) & [`IpHeader.read_from_slice`](enum.IpHeader.html#method.read_from_slice)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":6492,"byte_end":6621,"line_start":128,"line_end":128,"column_start":1,"column_end":130}},{"value":"/ * [`Ipv4Header.read`](struct.Ipv4Header.html#method.read) & [`Ipv4Header.read_from_slice`](struct.Ipv4Header.html#method.read_from_slice)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":6622,"byte_end":6763,"line_start":129,"line_end":129,"column_start":1,"column_end":142}},{"value":"/ * [`Ipv6Header.read`](struct.Ipv6Header.html#method.read) & [`Ipv6Header.read_from_slice`](struct.Ipv6Header.html#method.read_from_slice)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":6764,"byte_end":6905,"line_start":130,"line_end":130,"column_start":1,"column_end":142}},{"value":"/ * [`UdpHeader.read`](struct.UdpHeader.html#method.read) & [`UdpHeader.read_from_slice`](struct.UdpHeader.html#method.read_from_slice)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":6906,"byte_end":7043,"line_start":131,"line_end":131,"column_start":1,"column_end":138}},{"value":"/ * [`TcpHeader.read`](struct.TcpHeader.html#method.read) & [`TcpHeader.read_from_slice`](struct.TcpHeader.html#method.read_from_slice)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":7044,"byte_end":7181,"line_start":132,"line_end":132,"column_start":1,"column_end":138}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":7182,"byte_end":7186,"line_start":133,"line_end":133,"column_start":1,"column_end":5}},{"value":"/ # How to generate fake packet data?","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":7187,"byte_end":7226,"line_start":134,"line_end":134,"column_start":1,"column_end":40}},{"value":"/ ## Packet Builder","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":7227,"byte_end":7248,"line_start":135,"line_end":135,"column_start":1,"column_end":22}},{"value":"/ The PacketBuilder struct provides a high level interface for quickly creating network packets. The PacketBuilder will automatically set fields which can be deduced from the content and compositions of the packet itself (e.g. checksums, lengths, ethertype, ip protocol number).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":7249,"byte_end":7529,"line_start":136,"line_end":136,"column_start":1,"column_end":281}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":7530,"byte_end":7534,"line_start":137,"line_end":137,"column_start":1,"column_end":5}},{"value":"/ [Example:](https://github.com/JulianSchmid/etherparse/blob/0.8.0/examples/write_udp.rs)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":7535,"byte_end":7626,"line_start":138,"line_end":138,"column_start":1,"column_end":92}},{"value":"/ ```rust","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":7627,"byte_end":7638,"line_start":139,"line_end":139,"column_start":1,"column_end":12}},{"value":"/ use etherparse::PacketBuilder;","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":7639,"byte_end":7673,"line_start":140,"line_end":140,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":7674,"byte_end":7677,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":7678,"byte_end":7711,"line_start":142,"line_end":142,"column_start":1,"column_end":34}},{"value":"/     ethernet2([1,2,3,4,5,6],     //source mac","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":7712,"byte_end":7761,"line_start":143,"line_end":143,"column_start":1,"column_end":50}},{"value":"/                [7,8,9,10,11,12]) //destination mac","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":7762,"byte_end":7816,"line_start":144,"line_end":144,"column_start":1,"column_end":55}},{"value":"/     .ipv4([192,168,1,1], //source ip","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":7817,"byte_end":7857,"line_start":145,"line_end":145,"column_start":1,"column_end":41}},{"value":"/           [192,168,1,2], //desitination ip","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":7858,"byte_end":7904,"line_start":146,"line_end":146,"column_start":1,"column_end":47}},{"value":"/           20)            //time to life","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":7905,"byte_end":7948,"line_start":147,"line_end":147,"column_start":1,"column_end":44}},{"value":"/     .udp(21,    //source port ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":7949,"byte_end":7983,"line_start":148,"line_end":148,"column_start":1,"column_end":35}},{"value":"/          1234); //desitnation port","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":7984,"byte_end":8022,"line_start":149,"line_end":149,"column_start":1,"column_end":39}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":8023,"byte_end":8027,"line_start":150,"line_end":150,"column_start":1,"column_end":5}},{"value":"/ //payload of the udp packet","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":8028,"byte_end":8059,"line_start":151,"line_end":151,"column_start":1,"column_end":32}},{"value":"/ let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":8060,"byte_end":8096,"line_start":152,"line_end":152,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":8097,"byte_end":8100,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ //get some memory to store the result","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":8101,"byte_end":8142,"line_start":154,"line_end":154,"column_start":1,"column_end":42}},{"value":"/ let mut result = Vec::<u8>::with_capacity(builder.size(payload.len()));","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":8143,"byte_end":8218,"line_start":155,"line_end":155,"column_start":1,"column_end":76}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":8219,"byte_end":8223,"line_start":156,"line_end":156,"column_start":1,"column_end":5}},{"value":"/ //serialize","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":8224,"byte_end":8239,"line_start":157,"line_end":157,"column_start":1,"column_end":16}},{"value":"/ //this will automatically set all length fields, checksums and identifiers (ethertype & protocol)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":8240,"byte_end":8341,"line_start":158,"line_end":158,"column_start":1,"column_end":102}},{"value":"/ //before writing the packet out to \"result\"","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":8342,"byte_end":8389,"line_start":159,"line_end":159,"column_start":1,"column_end":48}},{"value":"/ builder.write(&mut result, &payload).unwrap();","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":8390,"byte_end":8440,"line_start":160,"line_end":160,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":8441,"byte_end":8448,"line_start":161,"line_end":161,"column_start":1,"column_end":8}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":8449,"byte_end":8453,"line_start":162,"line_end":162,"column_start":1,"column_end":5}},{"value":"/ There is also an [example for TCP packets](https://github.com/JulianSchmid/etherparse/blob/0.8.0/examples/write_tcp.rs) available.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":8454,"byte_end":8588,"line_start":163,"line_end":163,"column_start":1,"column_end":135}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":8589,"byte_end":8593,"line_start":164,"line_end":164,"column_start":1,"column_end":5}},{"value":"/ Check out the [PacketBuilder documentation](struct.PacketBuilder.html) for more informations.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":8594,"byte_end":8691,"line_start":165,"line_end":165,"column_start":1,"column_end":98}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":8692,"byte_end":8696,"line_start":166,"line_end":166,"column_start":1,"column_end":5}},{"value":"/ ## Manually serialising each header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":8697,"byte_end":8736,"line_start":167,"line_end":167,"column_start":1,"column_end":40}},{"value":"/ Alternativly it is possible to manually build a packet ([example](https://github.com/JulianSchmid/etherparse/blob/0.8.0/examples/write_ipv4_udp.rs)). Generally each struct representing a header has a \"write\" method that allows it to be serialized. These write methods sometimes automatically calculate checksums and fill them in. In case this is unwanted behavior (e.g. if you want to generate a packet with an invalid checksum), it is also possible to call a \"write_raw\" method that will simply serialize the data without doing checksum calculations.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":8737,"byte_end":9292,"line_start":168,"line_end":168,"column_start":1,"column_end":556}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":9293,"byte_end":9297,"line_start":169,"line_end":169,"column_start":1,"column_end":5}},{"value":"/ Read the documentations of the different methods for a more details:","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":9298,"byte_end":9370,"line_start":170,"line_end":170,"column_start":1,"column_end":73}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":9371,"byte_end":9375,"line_start":171,"line_end":171,"column_start":1,"column_end":5}},{"value":"/ * [`Ethernet2Header.write`](struct.Ethernet2Header.html#method.write)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":9376,"byte_end":9449,"line_start":172,"line_end":172,"column_start":1,"column_end":74}},{"value":"/ * [`SingleVlanHeader.write`](struct.SingleVlanHeader.html#method.write)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":9450,"byte_end":9525,"line_start":173,"line_end":173,"column_start":1,"column_end":76}},{"value":"/ * [`DoubleVlanHeader.write`](struct.DoubleVlanHeader.html#method.write)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":9526,"byte_end":9601,"line_start":174,"line_end":174,"column_start":1,"column_end":76}},{"value":"/ * [`Ipv4Header.write`](struct.Ipv4Header.html#method.write)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":9602,"byte_end":9665,"line_start":175,"line_end":175,"column_start":1,"column_end":64}},{"value":"/ * [`Ipv4Header.write_raw`](struct.Ipv4Header.html#method.write_raw)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":9666,"byte_end":9737,"line_start":176,"line_end":176,"column_start":1,"column_end":72}},{"value":"/ * [`Ipv6Header.write`](struct.Ipv6Header.html#method.write)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":9738,"byte_end":9801,"line_start":177,"line_end":177,"column_start":1,"column_end":64}},{"value":"/ * [`UdpHeader.write`](struct.UdpHeader.html#method.write)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":9802,"byte_end":9863,"line_start":178,"line_end":178,"column_start":1,"column_end":62}},{"value":"/ * [`TcpHeader.write`](struct.TcpHeader.html#method.write)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":9864,"byte_end":9925,"line_start":179,"line_end":179,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":9926,"byte_end":9929,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ # Roadmap","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":9930,"byte_end":9943,"line_start":181,"line_end":181,"column_start":1,"column_end":14}},{"value":"/ * Documentation","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":9944,"byte_end":9963,"line_start":182,"line_end":182,"column_start":1,"column_end":20}},{"value":"/   * Packet Builder","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":9964,"byte_end":9986,"line_start":183,"line_end":183,"column_start":1,"column_end":23}},{"value":"/ * MutPacketSlice -> modifaction of fields in slices directly?","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":9987,"byte_end":10052,"line_start":184,"line_end":184,"column_start":1,"column_end":66}},{"value":"/ * Reserializing SlicedPacket & MutSlicedPacket with corrected checksums & id's","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":10053,"byte_end":10135,"line_start":185,"line_end":185,"column_start":1,"column_end":83}},{"value":"/ * Slicing & reading packet from different layers then ethernet onward (e.g. ip, vlan...)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":10136,"byte_end":10228,"line_start":186,"line_end":186,"column_start":1,"column_end":93}},{"value":"/ * IEEE 802.3","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":10229,"byte_end":10245,"line_start":187,"line_end":187,"column_start":1,"column_end":17}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":10246,"byte_end":10250,"line_start":188,"line_end":188,"column_start":1,"column_end":5}},{"value":"/ # References","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":10251,"byte_end":10267,"line_start":189,"line_end":189,"column_start":1,"column_end":17}},{"value":"/ * Darpa Internet Program Protocol Specification [RFC 791](https://tools.ietf.org/html/rfc791)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":10268,"byte_end":10365,"line_start":190,"line_end":190,"column_start":1,"column_end":98}},{"value":"/ * Internet Protocol, Version 6 (IPv6) Specification [RFC 8200](https://tools.ietf.org/html/rfc8200)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":10366,"byte_end":10469,"line_start":191,"line_end":191,"column_start":1,"column_end":104}},{"value":"/ * [IANA Protocol Numbers](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":10470,"byte_end":10573,"line_start":192,"line_end":192,"column_start":1,"column_end":104}},{"value":"/ * [Internet Protocol Version 6 (IPv6) Parameters](https://www.iana.org/assignments/ipv6-parameters/ipv6-parameters.xhtml)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":10574,"byte_end":10699,"line_start":193,"line_end":193,"column_start":1,"column_end":126}},{"value":"/ * [Wikipedia IEEE_802.1Q](https://en.wikipedia.org/w/index.php?title=IEEE_802.1Q&oldid=820983900)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":10700,"byte_end":10801,"line_start":194,"line_end":194,"column_start":1,"column_end":102}},{"value":"/ * User Datagram Protocol (UDP) [RFC 768](https://tools.ietf.org/html/rfc768)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":10802,"byte_end":10882,"line_start":195,"line_end":195,"column_start":1,"column_end":81}},{"value":"/ * Transmission Control Protocol [RFC 793](https://tools.ietf.org/html/rfc793)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":10883,"byte_end":10964,"line_start":196,"line_end":196,"column_start":1,"column_end":82}},{"value":"/ * TCP Extensions for High Performance [RFC 7323](https://tools.ietf.org/html/rfc7323)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":10965,"byte_end":11054,"line_start":197,"line_end":197,"column_start":1,"column_end":90}},{"value":"/ * The Addition of Explicit Congestion Notification (ECN) to IP [RFC 3168](https://tools.ietf.org/html/rfc3168)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":11055,"byte_end":11169,"line_start":198,"line_end":198,"column_start":1,"column_end":115}},{"value":"/ * Robust Explicit Congestion Notification (ECN) Signaling with Nonces [RFC 3540](https://tools.ietf.org/html/rfc3540)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":11170,"byte_end":11291,"line_start":199,"line_end":199,"column_start":1,"column_end":122}}]},{"kind":"TupleVariant","id":{"krate":0,"index":717},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":23869,"byte_end":23873,"line_start":11,"line_end":11,"column_start":5,"column_end":9},"name":"Ipv4","qualname":"::link::ethernet::EtherType::Ipv4","value":"EtherType::Ipv4","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":720},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":23888,"byte_end":23892,"line_start":12,"line_end":12,"column_start":5,"column_end":9},"name":"Ipv6","qualname":"::link::ethernet::EtherType::Ipv6","value":"EtherType::Ipv6","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":723},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":23907,"byte_end":23910,"line_start":13,"line_end":13,"column_start":5,"column_end":8},"name":"Arp","qualname":"::link::ethernet::EtherType::Arp","value":"EtherType::Arp","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":726},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":23925,"byte_end":23934,"line_start":14,"line_end":14,"column_start":5,"column_end":14},"name":"WakeOnLan","qualname":"::link::ethernet::EtherType::WakeOnLan","value":"EtherType::WakeOnLan","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":729},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":23949,"byte_end":23964,"line_start":15,"line_end":15,"column_start":5,"column_end":20},"name":"VlanTaggedFrame","qualname":"::link::ethernet::EtherType::VlanTaggedFrame","value":"EtherType::VlanTaggedFrame","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":732},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":23979,"byte_end":23995,"line_start":16,"line_end":16,"column_start":5,"column_end":21},"name":"ProviderBridging","qualname":"::link::ethernet::EtherType::ProviderBridging","value":"EtherType::ProviderBridging","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":735},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":24010,"byte_end":24031,"line_start":17,"line_end":17,"column_start":5,"column_end":26},"name":"VlanDoubleTaggedFrame","qualname":"::link::ethernet::EtherType::VlanDoubleTaggedFrame","value":"EtherType::VlanDoubleTaggedFrame","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":716},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":23853,"byte_end":23862,"line_start":10,"line_end":10,"column_start":10,"column_end":19},"name":"EtherType","qualname":"::link::ethernet::EtherType","value":"pub enum EtherType {\n    Ipv4 = ,\n    Ipv6 = ,\n    Arp = ,\n    WakeOnLan = ,\n    VlanTaggedFrame = ,\n    ProviderBridging = ,\n    VlanDoubleTaggedFrame = ,\n}","parent":null,"children":[{"krate":0,"index":717},{"krate":0,"index":720},{"krate":0,"index":723},{"krate":0,"index":726},{"krate":0,"index":729},{"krate":0,"index":732},{"krate":0,"index":735}],"decl_id":null,"docs":"Ether type enum present in ethernet II header.\n","sig":null,"attributes":[{"value":"/Ether type enum present in ethernet II header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":23755,"byte_end":23804,"line_start":8,"line_end":8,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":24186,"byte_end":24194,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"from_u16","qualname":"<EtherType>::from_u16","value":"pub fn from_u16(u16) -> Option<EtherType>","parent":null,"children":[],"decl_id":null,"docs":"Tries to convert a raw ether type value to the enum. Returns None if the value does not exist in the enum.\n","sig":null,"attributes":[{"value":"/Tries to convert a raw ether type value to the enum. Returns None if the value does not exist in the enum.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":24065,"byte_end":24174,"line_start":21,"line_end":21,"column_start":5,"column_end":114}}]},{"kind":"Struct","id":{"krate":0,"index":748},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":24689,"byte_end":24704,"line_start":39,"line_end":39,"column_start":12,"column_end":27},"name":"Ethernet2Header","qualname":"::link::ethernet::Ethernet2Header","value":"Ethernet2Header { source, destination, ether_type }","parent":null,"children":[{"krate":0,"index":749},{"krate":0,"index":751},{"krate":0,"index":753}],"decl_id":null,"docs":"Ethernet II header.\n","sig":null,"attributes":[{"value":"/Ethernet II header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":24607,"byte_end":24629,"line_start":37,"line_end":37,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":749},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":24715,"byte_end":24721,"line_start":40,"line_end":40,"column_start":9,"column_end":15},"name":"source","qualname":"::link::ethernet::Ethernet2Header::source","value":"[u8; 6]","parent":{"krate":0,"index":748},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":751},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":24739,"byte_end":24750,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"name":"destination","qualname":"::link::ethernet::Ethernet2Header::destination","value":"[u8; 6]","parent":{"krate":0,"index":748},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":753},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":24768,"byte_end":24778,"line_start":42,"line_end":42,"column_start":9,"column_end":19},"name":"ether_type","qualname":"::link::ethernet::Ethernet2Header::ether_type","value":"u16","parent":{"krate":0,"index":748},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":25048,"byte_end":25063,"line_start":53,"line_end":53,"column_start":12,"column_end":27},"name":"read_from_slice","qualname":"<Ethernet2Header>::read_from_slice","value":"pub fn read_from_slice(&[u8]) -> Result<(Ethernet2Header, &[u8]), ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Read an Ethernet2Header from a slice and return the header & unused parts of the slice.\n","sig":null,"attributes":[{"value":"/Read an Ethernet2Header from a slice and return the header & unused parts of the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":24946,"byte_end":25036,"line_start":52,"line_end":52,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":25373,"byte_end":25377,"line_start":61,"line_end":61,"column_start":12,"column_end":16},"name":"read","qualname":"<Ethernet2Header>::read","value":"pub fn read<T: io::Read + io::Seek + Sized>(&mut T)\n-> Result<Ethernet2Header, io::Error>","parent":null,"children":[],"decl_id":null,"docs":"Reads an Ethernet-II header from the current position of the read argument.\n","sig":null,"attributes":[{"value":"/Reads an Ethernet-II header from the current position of the read argument.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":25283,"byte_end":25361,"line_start":60,"line_end":60,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":25970,"byte_end":25984,"line_start":76,"line_end":76,"column_start":12,"column_end":26},"name":"write_to_slice","qualname":"<Ethernet2Header>::write_to_slice","value":"pub fn write_to_slice<'a>(&Self, &'a mut [u8])\n-> Result<&'a mut [u8], WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Serialize the header to a given slice. Returns the unused part of the slice.\n","sig":null,"attributes":[{"value":"/Serialize the header to a given slice. Returns the unused part of the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":25879,"byte_end":25958,"line_start":75,"line_end":75,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":26482,"byte_end":26487,"line_start":88,"line_end":88,"column_start":12,"column_end":17},"name":"write","qualname":"<Ethernet2Header>::write","value":"pub fn write<T: io::Write + Sized>(&Self, &mut T) -> Result<(), io::Error>","parent":null,"children":[],"decl_id":null,"docs":"Writes a given Ethernet-II header to the current position of the write argument.\n","sig":null,"attributes":[{"value":"/Writes a given Ethernet-II header to the current position of the write argument.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":26387,"byte_end":26470,"line_start":87,"line_end":87,"column_start":5,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":769},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":27163,"byte_end":27183,"line_start":104,"line_end":104,"column_start":12,"column_end":32},"name":"Ethernet2HeaderSlice","qualname":"::link::ethernet::Ethernet2HeaderSlice","value":"Ethernet2HeaderSlice {  }","parent":null,"children":[{"krate":0,"index":771}],"decl_id":null,"docs":"A slice containing an ethernet 2 header of a network package.\n","sig":null,"attributes":[{"value":"/A slice containing an ethernet 2 header of a network package.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":27048,"byte_end":27112,"line_start":102,"line_end":102,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":27313,"byte_end":27323,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Ethernet2HeaderSlice>::from_slice","value":"pub fn from_slice(&'a [u8]) -> Result<Ethernet2HeaderSlice, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Creates a ethernet slice from an other slice.\n","sig":null,"attributes":[{"value":"/Creates a ethernet slice from an other slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":27253,"byte_end":27301,"line_start":109,"line_end":109,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":27781,"byte_end":27786,"line_start":125,"line_end":125,"column_start":12,"column_end":17},"name":"slice","qualname":"<Ethernet2HeaderSlice>::slice","value":"pub fn slice(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns the slice containing the ethernet 2 header\n","sig":null,"attributes":[{"value":"/Returns the slice containing the ethernet 2 header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":27702,"byte_end":27755,"line_start":123,"line_end":123,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":27760,"byte_end":27769,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":27885,"byte_end":27896,"line_start":130,"line_end":130,"column_start":12,"column_end":23},"name":"destination","qualname":"<Ethernet2HeaderSlice>::destination","value":"pub fn destination(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Read the destination mac address\n","sig":null,"attributes":[{"value":"/Read the destination mac address","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":27838,"byte_end":27873,"line_start":129,"line_end":129,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":27996,"byte_end":28002,"line_start":135,"line_end":135,"column_start":12,"column_end":18},"name":"source","qualname":"<Ethernet2HeaderSlice>::source","value":"pub fn source(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Read the source mac address\n","sig":null,"attributes":[{"value":"/Read the source mac address","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":27954,"byte_end":27984,"line_start":134,"line_end":134,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":28147,"byte_end":28157,"line_start":140,"line_end":140,"column_start":12,"column_end":22},"name":"ether_type","qualname":"<Ethernet2HeaderSlice>::ether_type","value":"pub fn ether_type(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Read the ether_type field of the header (in system native byte order).\n","sig":null,"attributes":[{"value":"/Read the ether_type field of the header (in system native byte order).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":28062,"byte_end":28135,"line_start":139,"line_end":139,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":28314,"byte_end":28323,"line_start":145,"line_end":145,"column_start":12,"column_end":21},"name":"to_header","qualname":"<Ethernet2HeaderSlice>::to_header","value":"pub fn to_header(&Self) -> Ethernet2Header","parent":null,"children":[],"decl_id":null,"docs":"Decode all the fields and copy the results to a Ipv4Header struct\n","sig":null,"attributes":[{"value":"/Decode all the fields and copy the results to a Ipv4Header struct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":28234,"byte_end":28302,"line_start":144,"line_end":144,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":790},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":29108,"byte_end":29114,"line_start":12,"line_end":12,"column_start":5,"column_end":11},"name":"Single","qualname":"::link::vlan_tagging::VlanHeader::Single","value":"VlanHeader::Single(SingleVlanHeader)","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":"IEEE 802.1Q VLAN Tagging Header\n","sig":null,"attributes":[{"value":"/IEEE 802.1Q VLAN Tagging Header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":29069,"byte_end":29103,"line_start":11,"line_end":11,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":793},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":29184,"byte_end":29190,"line_start":14,"line_end":14,"column_start":5,"column_end":11},"name":"Double","qualname":"::link::vlan_tagging::VlanHeader::Double","value":"VlanHeader::Double(DoubleVlanHeader)","parent":{"krate":0,"index":789},"children":[],"decl_id":null,"docs":"IEEE 802.1Q double VLAN Tagging Header\n","sig":null,"attributes":[{"value":"/IEEE 802.1Q double VLAN Tagging Header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":29138,"byte_end":29179,"line_start":13,"line_end":13,"column_start":5,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":789},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":29052,"byte_end":29062,"line_start":10,"line_end":10,"column_start":10,"column_end":20},"name":"VlanHeader","qualname":"::link::vlan_tagging::VlanHeader","value":"pub enum VlanHeader {\n\n    ///IEEE 802.1Q VLAN Tagging Header\n    Single(SingleVlanHeader),\n\n    ///IEEE 802.1Q double VLAN Tagging Header\n    Double(DoubleVlanHeader),\n}","parent":null,"children":[{"krate":0,"index":790},{"krate":0,"index":793}],"decl_id":null,"docs":"IEEE 802.1Q VLAN Tagging Header (can be single or double tagged).\n","sig":null,"attributes":[{"value":"/IEEE 802.1Q VLAN Tagging Header (can be single or double tagged).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":28935,"byte_end":29003,"line_start":8,"line_end":8,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":807},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":29306,"byte_end":29322,"line_start":19,"line_end":19,"column_start":12,"column_end":28},"name":"SingleVlanHeader","qualname":"::link::vlan_tagging::SingleVlanHeader","value":"SingleVlanHeader { priority_code_point, drop_eligible_indicator, vlan_identifier, ether_type }","parent":null,"children":[{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":811}],"decl_id":null,"docs":"IEEE 802.1Q VLAN Tagging Header\n","sig":null,"attributes":[{"value":"/IEEE 802.1Q VLAN Tagging Header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":29212,"byte_end":29246,"line_start":17,"line_end":17,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":808},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":29442,"byte_end":29461,"line_start":21,"line_end":21,"column_start":9,"column_end":28},"name":"priority_code_point","qualname":"::link::vlan_tagging::SingleVlanHeader::priority_code_point","value":"u8","parent":{"krate":0,"index":807},"children":[],"decl_id":null,"docs":"A 3 bit number which refers to the IEEE 802.1p class of service and maps to the frame priority level.\n","sig":null,"attributes":[{"value":"/A 3 bit number which refers to the IEEE 802.1p class of service and maps to the frame priority level.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":29329,"byte_end":29433,"line_start":20,"line_end":20,"column_start":5,"column_end":109}}]},{"kind":"Field","id":{"krate":0,"index":809},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":29555,"byte_end":29578,"line_start":23,"line_end":23,"column_start":9,"column_end":32},"name":"drop_eligible_indicator","qualname":"::link::vlan_tagging::SingleVlanHeader::drop_eligible_indicator","value":"bool","parent":{"krate":0,"index":807},"children":[],"decl_id":null,"docs":"Indicate that the frame may be dropped under the presence of congestion.\n","sig":null,"attributes":[{"value":"/Indicate that the frame may be dropped under the presence of congestion.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":29471,"byte_end":29546,"line_start":22,"line_end":22,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":810},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":29627,"byte_end":29642,"line_start":25,"line_end":25,"column_start":9,"column_end":24},"name":"vlan_identifier","qualname":"::link::vlan_tagging::SingleVlanHeader::vlan_identifier","value":"u16","parent":{"krate":0,"index":807},"children":[],"decl_id":null,"docs":"12 bits vland identifier.\n","sig":null,"attributes":[{"value":"/12 bits vland identifier.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":29590,"byte_end":29618,"line_start":24,"line_end":24,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":811},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":29795,"byte_end":29805,"line_start":27,"line_end":27,"column_start":9,"column_end":19},"name":"ether_type","qualname":"::link::vlan_tagging::SingleVlanHeader::ether_type","value":"u16","parent":{"krate":0,"index":807},"children":[],"decl_id":null,"docs":"\"Tag protocol identifier\": Type id of content after this header. Refer to the \"EtherType\" for a list of possible supported values.\n","sig":null,"attributes":[{"value":"/\"Tag protocol identifier\": Type id of content after this header. Refer to the \"EtherType\" for a list of possible supported values.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":29653,"byte_end":29786,"line_start":26,"line_end":26,"column_start":5,"column_end":138}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":30078,"byte_end":30093,"line_start":38,"line_end":38,"column_start":12,"column_end":27},"name":"read_from_slice","qualname":"<SingleVlanHeader>::read_from_slice","value":"pub fn read_from_slice(&[u8]) -> Result<(SingleVlanHeader, &[u8]), ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Read an SingleVlanHeader from a slice and return the header & unused parts of the slice.\n","sig":null,"attributes":[{"value":"/Read an SingleVlanHeader from a slice and return the header & unused parts of the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":29975,"byte_end":30066,"line_start":37,"line_end":37,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":30371,"byte_end":30375,"line_start":46,"line_end":46,"column_start":12,"column_end":16},"name":"read","qualname":"<SingleVlanHeader>::read","value":"pub fn read<T: io::Read + io::Seek + Sized>(&mut T)\n-> Result<SingleVlanHeader, io::Error>","parent":null,"children":[],"decl_id":null,"docs":"Read a IEEE 802.1Q VLAN tagging header\n","sig":null,"attributes":[{"value":"/Read a IEEE 802.1Q VLAN tagging header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":30318,"byte_end":30359,"line_start":45,"line_end":45,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":31189,"byte_end":31194,"line_start":66,"line_end":66,"column_start":12,"column_end":17},"name":"write","qualname":"<SingleVlanHeader>::write","value":"pub fn write<T: io::Write + Sized>(&Self, &mut T) -> Result<(), WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Write the IEEE 802.1Q VLAN tagging header\n","sig":null,"attributes":[{"value":"/Write the IEEE 802.1Q VLAN tagging header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":31133,"byte_end":31177,"line_start":65,"line_end":65,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":825},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":31976,"byte_end":31992,"line_start":87,"line_end":87,"column_start":12,"column_end":28},"name":"DoubleVlanHeader","qualname":"::link::vlan_tagging::DoubleVlanHeader","value":"DoubleVlanHeader { outer, inner }","parent":null,"children":[{"krate":0,"index":826},{"krate":0,"index":827}],"decl_id":null,"docs":"IEEE 802.1Q double VLAN Tagging Header\n","sig":null,"attributes":[{"value":"/IEEE 802.1Q double VLAN Tagging Header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":31884,"byte_end":31925,"line_start":85,"line_end":85,"column_start":1,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":826},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":32040,"byte_end":32045,"line_start":89,"line_end":89,"column_start":9,"column_end":14},"name":"outer","qualname":"::link::vlan_tagging::DoubleVlanHeader::outer","value":"link::vlan_tagging::SingleVlanHeader","parent":{"krate":0,"index":825},"children":[],"decl_id":null,"docs":"The outer vlan tagging header\n","sig":null,"attributes":[{"value":"/The outer vlan tagging header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":31999,"byte_end":32031,"line_start":88,"line_end":88,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":827},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":32110,"byte_end":32115,"line_start":91,"line_end":91,"column_start":9,"column_end":14},"name":"inner","qualname":"::link::vlan_tagging::DoubleVlanHeader::inner","value":"link::vlan_tagging::SingleVlanHeader","parent":{"krate":0,"index":825},"children":[],"decl_id":null,"docs":"The inner vlan tagging header\n","sig":null,"attributes":[{"value":"/The inner vlan tagging header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":32069,"byte_end":32101,"line_start":90,"line_end":90,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":32399,"byte_end":32414,"line_start":101,"line_end":101,"column_start":12,"column_end":27},"name":"read_from_slice","qualname":"<DoubleVlanHeader>::read_from_slice","value":"pub fn read_from_slice(&[u8]) -> Result<(DoubleVlanHeader, &[u8]), ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Read an DoubleVlanHeader from a slice and return the header & unused parts of the slice.\n","sig":null,"attributes":[{"value":"/Read an DoubleVlanHeader from a slice and return the header & unused parts of the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":32296,"byte_end":32387,"line_start":100,"line_end":100,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":32704,"byte_end":32708,"line_start":109,"line_end":109,"column_start":12,"column_end":16},"name":"read","qualname":"<DoubleVlanHeader>::read","value":"pub fn read<T: io::Read + io::Seek + Sized>(&mut T)\n-> Result<DoubleVlanHeader, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Read a double tagging header from the given source\n","sig":null,"attributes":[{"value":"/Read a double tagging header from the given source","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":32639,"byte_end":32692,"line_start":108,"line_end":108,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":33639,"byte_end":33644,"line_start":134,"line_end":134,"column_start":12,"column_end":17},"name":"write","qualname":"<DoubleVlanHeader>::write","value":"pub fn write<T: io::Write + Sized>(&Self, &mut T) -> Result<(), WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Write the double IEEE 802.1Q VLAN tagging header\n","sig":null,"attributes":[{"value":"/Write the double IEEE 802.1Q VLAN tagging header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":33576,"byte_end":33627,"line_start":133,"line_end":133,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":839},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":33910,"byte_end":33931,"line_start":142,"line_end":142,"column_start":12,"column_end":33},"name":"SingleVlanHeaderSlice","qualname":"::link::vlan_tagging::SingleVlanHeaderSlice","value":"SingleVlanHeaderSlice {  }","parent":null,"children":[{"krate":0,"index":841}],"decl_id":null,"docs":"A slice containing a single vlan header of a network package.\n","sig":null,"attributes":[{"value":"/A slice containing a single vlan header of a network package.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":33795,"byte_end":33859,"line_start":140,"line_end":140,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":34058,"byte_end":34068,"line_start":148,"line_end":148,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<SingleVlanHeaderSlice>::from_slice","value":"pub fn from_slice(&'a [u8]) -> Result<SingleVlanHeaderSlice, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Creates a vlan header slice from a slice.\n","sig":null,"attributes":[{"value":"/Creates a vlan header slice from a slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":34002,"byte_end":34046,"line_start":147,"line_end":147,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":34568,"byte_end":34573,"line_start":163,"line_end":163,"column_start":12,"column_end":17},"name":"slice","qualname":"<SingleVlanHeaderSlice>::slice","value":"pub fn slice(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns the slice containing the single vlan header\n","sig":null,"attributes":[{"value":"/Returns the slice containing the single vlan header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":34488,"byte_end":34542,"line_start":161,"line_end":161,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":34547,"byte_end":34556,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":34802,"byte_end":34821,"line_start":168,"line_end":168,"column_start":12,"column_end":31},"name":"priority_code_point","qualname":"<SingleVlanHeaderSlice>::priority_code_point","value":"pub fn priority_code_point(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"priority_code_point\" field from the slice. This is a 3 bit number which refers to the IEEE 802.1p class of service and maps to the frame priority level.\n","sig":null,"attributes":[{"value":"/Read the \"priority_code_point\" field from the slice. This is a 3 bit number which refers to the IEEE 802.1p class of service and maps to the frame priority level.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":34625,"byte_end":34790,"line_start":167,"line_end":167,"column_start":5,"column_end":170}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":35019,"byte_end":35042,"line_start":173,"line_end":173,"column_start":12,"column_end":35},"name":"drop_eligible_indicator","qualname":"<SingleVlanHeaderSlice>::drop_eligible_indicator","value":"pub fn drop_eligible_indicator(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Read the \"drop_eligible_indicator\" flag from the slice. Indicates that the frame may be dropped under the presence of congestion.\n","sig":null,"attributes":[{"value":"/Read the \"drop_eligible_indicator\" flag from the slice. Indicates that the frame may be dropped under the presence of congestion.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":34875,"byte_end":35007,"line_start":172,"line_end":172,"column_start":5,"column_end":137}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":35180,"byte_end":35195,"line_start":178,"line_end":178,"column_start":12,"column_end":27},"name":"vlan_identifier","qualname":"<SingleVlanHeaderSlice>::vlan_identifier","value":"pub fn vlan_identifier(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Reads the 12 bits \"vland identifier\" field from the slice.\n","sig":null,"attributes":[{"value":"/Reads the 12 bits \"vland identifier\" field from the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":35107,"byte_end":35168,"line_start":177,"line_end":177,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":35456,"byte_end":35466,"line_start":184,"line_end":184,"column_start":12,"column_end":22},"name":"ether_type","qualname":"<SingleVlanHeaderSlice>::ether_type","value":"pub fn ether_type(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Read the \"Tag protocol identifier\" field from the slice. Refer to the \"EtherType\" for a list of possible supported values.\n","sig":null,"attributes":[{"value":"/Read the \"Tag protocol identifier\" field from the slice. Refer to the \"EtherType\" for a list of possible supported values.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":35319,"byte_end":35444,"line_start":183,"line_end":183,"column_start":5,"column_end":130}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":35627,"byte_end":35636,"line_start":189,"line_end":189,"column_start":12,"column_end":21},"name":"to_header","qualname":"<SingleVlanHeaderSlice>::to_header","value":"pub fn to_header(&Self) -> SingleVlanHeader","parent":null,"children":[],"decl_id":null,"docs":"Decode all the fields and copy the results to a SingleVlanHeader struct\n","sig":null,"attributes":[{"value":"/Decode all the fields and copy the results to a SingleVlanHeader struct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":35541,"byte_end":35615,"line_start":188,"line_end":188,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":859},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":36054,"byte_end":36075,"line_start":201,"line_end":201,"column_start":12,"column_end":33},"name":"DoubleVlanHeaderSlice","qualname":"::link::vlan_tagging::DoubleVlanHeaderSlice","value":"DoubleVlanHeaderSlice {  }","parent":null,"children":[{"krate":0,"index":861}],"decl_id":null,"docs":"A slice containing an double vlan header of a network package.\n","sig":null,"attributes":[{"value":"/A slice containing an double vlan header of a network package.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":35938,"byte_end":36003,"line_start":199,"line_end":199,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":36204,"byte_end":36214,"line_start":207,"line_end":207,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<DoubleVlanHeaderSlice>::from_slice","value":"pub fn from_slice(&'a [u8]) -> Result<DoubleVlanHeaderSlice, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Creates a double header slice from a slice.\n","sig":null,"attributes":[{"value":"/Creates a double header slice from a slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":36146,"byte_end":36192,"line_start":206,"line_end":206,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":37316,"byte_end":37321,"line_start":238,"line_end":238,"column_start":12,"column_end":17},"name":"slice","qualname":"<DoubleVlanHeaderSlice>::slice","value":"pub fn slice(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns the slice containing the double vlan header\n","sig":null,"attributes":[{"value":"/Returns the slice containing the double vlan header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":37236,"byte_end":37290,"line_start":236,"line_end":236,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":37295,"byte_end":37304,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":37430,"byte_end":37435,"line_start":243,"line_end":243,"column_start":12,"column_end":17},"name":"outer","qualname":"<DoubleVlanHeaderSlice>::outer","value":"pub fn outer(&Self) -> SingleVlanHeaderSlice","parent":null,"children":[],"decl_id":null,"docs":"Returns a slice with the outer vlan header\n","sig":null,"attributes":[{"value":"/Returns a slice with the outer vlan header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":37373,"byte_end":37418,"line_start":242,"line_end":242,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":37659,"byte_end":37664,"line_start":250,"line_end":250,"column_start":12,"column_end":17},"name":"inner","qualname":"<DoubleVlanHeaderSlice>::inner","value":"pub fn inner(&Self) -> SingleVlanHeaderSlice","parent":null,"children":[],"decl_id":null,"docs":"Returns a slice with the inner vlan header.\n","sig":null,"attributes":[{"value":"/Returns a slice with the inner vlan header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":37601,"byte_end":37647,"line_start":249,"line_end":249,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":37951,"byte_end":37960,"line_start":257,"line_end":257,"column_start":12,"column_end":21},"name":"to_header","qualname":"<DoubleVlanHeaderSlice>::to_header","value":"pub fn to_header(&Self) -> DoubleVlanHeader","parent":null,"children":[],"decl_id":null,"docs":"Decode all the fields and copy the results to a DoubleVlanHeader struct\n","sig":null,"attributes":[{"value":"/Decode all the fields and copy the results to a DoubleVlanHeader struct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":37865,"byte_end":37939,"line_start":256,"line_end":256,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":880},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":38352,"byte_end":38360,"line_start":9,"line_end":9,"column_start":5,"column_end":13},"name":"Version4","qualname":"::internet::ip::IpHeader::Version4","value":"IpHeader::Version4(Ipv4Header)","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":883},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":38378,"byte_end":38386,"line_start":10,"line_end":10,"column_start":5,"column_end":13},"name":"Version6","qualname":"::internet::ip::IpHeader::Version6","value":"IpHeader::Version6(Ipv6Header)","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":879},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":38337,"byte_end":38345,"line_start":8,"line_end":8,"column_start":10,"column_end":18},"name":"IpHeader","qualname":"::internet::ip::IpHeader","value":"pub enum IpHeader { Version4(Ipv4Header), Version6(Ipv6Header), }","parent":null,"children":[{"krate":0,"index":880},{"krate":0,"index":883}],"decl_id":null,"docs":"Internet protocol headers version 4 & 6\n","sig":null,"attributes":[{"value":"/Internet protocol headers version 4 & 6","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":38246,"byte_end":38288,"line_start":6,"line_end":6,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":38518,"byte_end":38533,"line_start":15,"line_end":15,"column_start":12,"column_end":27},"name":"read_from_slice","qualname":"<IpHeader>::read_from_slice","value":"pub fn read_from_slice(&[u8]) -> Result<(IpHeader, &[u8]), ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Read an IpvHeader from a slice and return the header & unused parts of the slice.\n","sig":null,"attributes":[{"value":"/Read an IpvHeader from a slice and return the header & unused parts of the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":38422,"byte_end":38506,"line_start":14,"line_end":14,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":39264,"byte_end":39268,"line_start":35,"line_end":35,"column_start":12,"column_end":16},"name":"read","qualname":"<IpHeader>::read","value":"pub fn read<T: io::Read + io::Seek + Sized>(&mut T)\n-> Result<IpHeader, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Reads an IP (v4 or v6) header from the current position.\n","sig":null,"attributes":[{"value":"/Reads an IP (v4 or v6) header from the current position.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":39193,"byte_end":39252,"line_start":34,"line_end":34,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":39768,"byte_end":39773,"line_start":44,"line_end":44,"column_start":12,"column_end":17},"name":"write","qualname":"<IpHeader>::write","value":"pub fn write<T: io::Write + Sized>(&Self, &mut T) -> Result<(), WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Writes an IP (v4 or v6) header to the current position\n","sig":null,"attributes":[{"value":"/Writes an IP (v4 or v6) header to the current position","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":39699,"byte_end":39756,"line_start":43,"line_end":43,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":898},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40235,"byte_end":40253,"line_start":57,"line_end":57,"column_start":5,"column_end":23},"name":"IPv6HeaderHopByHop","qualname":"::internet::ip::IpTrafficClass::IPv6HeaderHopByHop","value":"IpTrafficClass::IPv6HeaderHopByHop","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"IPv6 Hop-by-Hop Option [RFC8200]\n","sig":null,"attributes":[{"value":"/IPv6 Hop-by-Hop Option [RFC8200]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40195,"byte_end":40230,"line_start":56,"line_end":56,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":901},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40304,"byte_end":40308,"line_start":59,"line_end":59,"column_start":5,"column_end":9},"name":"Icmp","qualname":"::internet::ip::IpTrafficClass::Icmp","value":"IpTrafficClass::Icmp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Internet Control Message [RFC792]\n","sig":null,"attributes":[{"value":"/Internet Control Message [RFC792]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40263,"byte_end":40299,"line_start":58,"line_end":58,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":904},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40361,"byte_end":40365,"line_start":61,"line_end":61,"column_start":5,"column_end":9},"name":"Igmp","qualname":"::internet::ip::IpTrafficClass::Igmp","value":"IpTrafficClass::Igmp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Internet Group Management [RFC1112]\n","sig":null,"attributes":[{"value":"/Internet Group Management [RFC1112]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40318,"byte_end":40356,"line_start":60,"line_end":60,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":907},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40410,"byte_end":40413,"line_start":63,"line_end":63,"column_start":5,"column_end":8},"name":"Ggp","qualname":"::internet::ip::IpTrafficClass::Ggp","value":"IpTrafficClass::Ggp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Gateway-to-Gateway [RFC823]\n","sig":null,"attributes":[{"value":"/Gateway-to-Gateway [RFC823]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40375,"byte_end":40405,"line_start":62,"line_end":62,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":910},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40459,"byte_end":40463,"line_start":65,"line_end":65,"column_start":5,"column_end":9},"name":"IPv4","qualname":"::internet::ip::IpTrafficClass::IPv4","value":"IpTrafficClass::IPv4","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"IPv4 encapsulation [RFC2003]\n","sig":null,"attributes":[{"value":"/IPv4 encapsulation [RFC2003]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40423,"byte_end":40454,"line_start":64,"line_end":64,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":913},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40506,"byte_end":40512,"line_start":67,"line_end":67,"column_start":5,"column_end":11},"name":"Stream","qualname":"::internet::ip::IpTrafficClass::Stream","value":"IpTrafficClass::Stream","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Stream [RFC1190][RFC1819]\n","sig":null,"attributes":[{"value":"/Stream [RFC1190][RFC1819]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40473,"byte_end":40501,"line_start":66,"line_end":66,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":916},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40559,"byte_end":40562,"line_start":69,"line_end":69,"column_start":5,"column_end":8},"name":"Tcp","qualname":"::internet::ip::IpTrafficClass::Tcp","value":"IpTrafficClass::Tcp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Transmission Control [RFC793]\n","sig":null,"attributes":[{"value":"/Transmission Control [RFC793]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40522,"byte_end":40554,"line_start":68,"line_end":68,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":919},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40600,"byte_end":40603,"line_start":71,"line_end":71,"column_start":5,"column_end":8},"name":"Cbt","qualname":"::internet::ip::IpTrafficClass::Cbt","value":"IpTrafficClass::Cbt","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"CBT [Tony_Ballardie]\n","sig":null,"attributes":[{"value":"/CBT [Tony_Ballardie]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40572,"byte_end":40595,"line_start":70,"line_end":70,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":922},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40668,"byte_end":40671,"line_start":73,"line_end":73,"column_start":5,"column_end":8},"name":"Egp","qualname":"::internet::ip::IpTrafficClass::Egp","value":"IpTrafficClass::Egp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Exterior Gateway Protocol [RFC888][David_Mills]\n","sig":null,"attributes":[{"value":"/Exterior Gateway Protocol [RFC888][David_Mills]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40613,"byte_end":40663,"line_start":72,"line_end":72,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":925},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40786,"byte_end":40789,"line_start":75,"line_end":75,"column_start":5,"column_end":8},"name":"Igp","qualname":"::internet::ip::IpTrafficClass::Igp","value":"IpTrafficClass::Igp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"any private interior gateway (used by Cisco for their IGRP) [Internet_Assigned_Numbers_Authority]\n","sig":null,"attributes":[{"value":"/any private interior gateway (used by Cisco for their IGRP) [Internet_Assigned_Numbers_Authority]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40681,"byte_end":40781,"line_start":74,"line_end":74,"column_start":5,"column_end":105}}]},{"kind":"TupleVariant","id":{"krate":0,"index":928},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40841,"byte_end":40850,"line_start":77,"line_end":77,"column_start":5,"column_end":14},"name":"BbnRccMon","qualname":"::internet::ip::IpTrafficClass::BbnRccMon","value":"IpTrafficClass::BbnRccMon","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"BBN RCC Monitoring [Steve_Chipman]\n","sig":null,"attributes":[{"value":"/BBN RCC Monitoring [Steve_Chipman]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40799,"byte_end":40836,"line_start":76,"line_end":76,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":931},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40914,"byte_end":40919,"line_start":79,"line_end":79,"column_start":5,"column_end":10},"name":"NvpII","qualname":"::internet::ip::IpTrafficClass::NvpII","value":"IpTrafficClass::NvpII","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Network Voice Protocol [RFC741][Steve_Casner]\n","sig":null,"attributes":[{"value":"/Network Voice Protocol [RFC741][Steve_Casner]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40861,"byte_end":40909,"line_start":78,"line_end":78,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":934},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40941,"byte_end":40944,"line_start":81,"line_end":81,"column_start":5,"column_end":8},"name":"Pup","qualname":"::internet::ip::IpTrafficClass::Pup","value":"IpTrafficClass::Pup","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"PUP\n","sig":null,"attributes":[{"value":"/PUP","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40930,"byte_end":40936,"line_start":80,"line_end":80,"column_start":5,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":937},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41002,"byte_end":41007,"line_start":83,"line_end":83,"column_start":5,"column_end":10},"name":"Argus","qualname":"::internet::ip::IpTrafficClass::Argus","value":"IpTrafficClass::Argus","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"ARGUS (deprecated) [Robert_W_Scheifler]\n","sig":null,"attributes":[{"value":"/ARGUS (deprecated) [Robert_W_Scheifler]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40955,"byte_end":40997,"line_start":82,"line_end":82,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":940},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41051,"byte_end":41056,"line_start":85,"line_end":85,"column_start":5,"column_end":10},"name":"Emcon","qualname":"::internet::ip::IpTrafficClass::Emcon","value":"IpTrafficClass::Emcon","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"EMCON [<mystery contact>]\n","sig":null,"attributes":[{"value":"/EMCON [<mystery contact>]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41018,"byte_end":41046,"line_start":84,"line_end":84,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":943},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41193,"byte_end":41197,"line_start":87,"line_end":87,"column_start":5,"column_end":9},"name":"Xnet","qualname":"::internet::ip::IpTrafficClass::Xnet","value":"IpTrafficClass::Xnet","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Cross Net Debugger [Haverty, J., \"XNET Formats for Internet Protocol Version 4\", IEN 158, October 1980.][Jack_Haverty]\n","sig":null,"attributes":[{"value":"/Cross Net Debugger [Haverty, J., \"XNET Formats for Internet Protocol Version 4\", IEN 158, October 1980.][Jack_Haverty]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41067,"byte_end":41188,"line_start":86,"line_end":86,"column_start":5,"column_end":126}}]},{"kind":"TupleVariant","id":{"krate":0,"index":946},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41238,"byte_end":41243,"line_start":89,"line_end":89,"column_start":5,"column_end":10},"name":"Chaos","qualname":"::internet::ip::IpTrafficClass::Chaos","value":"IpTrafficClass::Chaos","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Chaos [J_Noel_Chiappa]\n","sig":null,"attributes":[{"value":"/Chaos [J_Noel_Chiappa]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41208,"byte_end":41233,"line_start":88,"line_end":88,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":949},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41296,"byte_end":41299,"line_start":91,"line_end":91,"column_start":5,"column_end":8},"name":"Udp","qualname":"::internet::ip::IpTrafficClass::Udp","value":"IpTrafficClass::Udp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"User Datagram [RFC768][Jon_Postel]\n","sig":null,"attributes":[{"value":"/User Datagram [RFC768][Jon_Postel]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41254,"byte_end":41291,"line_start":90,"line_end":90,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":952},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41448,"byte_end":41451,"line_start":93,"line_end":93,"column_start":5,"column_end":8},"name":"Mux","qualname":"::internet::ip::IpTrafficClass::Mux","value":"IpTrafficClass::Mux","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Multiplexing [Cohen, D. and J. Postel, \"Multiplexing Protocol\", IEN 90, USC/Information Sciences Institute, May 1979.][Jon_Postel]\n","sig":null,"attributes":[{"value":"/Multiplexing [Cohen, D. and J. Postel, \"Multiplexing Protocol\", IEN 90, USC/Information Sciences Institute, May 1979.][Jon_Postel]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41310,"byte_end":41443,"line_start":92,"line_end":92,"column_start":5,"column_end":138}}]},{"kind":"TupleVariant","id":{"krate":0,"index":955},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41510,"byte_end":41517,"line_start":95,"line_end":95,"column_start":5,"column_end":12},"name":"DcnMeas","qualname":"::internet::ip::IpTrafficClass::DcnMeas","value":"IpTrafficClass::DcnMeas","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"DCN Measurement Subsystems [David_Mills]\n","sig":null,"attributes":[{"value":"/DCN Measurement Subsystems [David_Mills]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41462,"byte_end":41505,"line_start":94,"line_end":94,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":958},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41572,"byte_end":41575,"line_start":97,"line_end":97,"column_start":5,"column_end":8},"name":"Hmp","qualname":"::internet::ip::IpTrafficClass::Hmp","value":"IpTrafficClass::Hmp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Host Monitoring [RFC869][Bob_Hinden]\n","sig":null,"attributes":[{"value":"/Host Monitoring [RFC869][Bob_Hinden]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41528,"byte_end":41567,"line_start":96,"line_end":96,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":961},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41632,"byte_end":41635,"line_start":99,"line_end":99,"column_start":5,"column_end":8},"name":"Prm","qualname":"::internet::ip::IpTrafficClass::Prm","value":"IpTrafficClass::Prm","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Packet Radio Measurement [Zaw_Sing_Su]\n","sig":null,"attributes":[{"value":"/Packet Radio Measurement [Zaw_Sing_Su]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41586,"byte_end":41627,"line_start":98,"line_end":98,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":964},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41666,"byte_end":41672,"line_start":101,"line_end":101,"column_start":5,"column_end":11},"name":"XnsIdp","qualname":"::internet::ip::IpTrafficClass::XnsIdp","value":"IpTrafficClass::XnsIdp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"XEROX NS IDP\n","sig":null,"attributes":[{"value":"/XEROX NS IDP","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41646,"byte_end":41661,"line_start":100,"line_end":100,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":967},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41712,"byte_end":41718,"line_start":103,"line_end":103,"column_start":5,"column_end":11},"name":"Trunk1","qualname":"::internet::ip::IpTrafficClass::Trunk1","value":"IpTrafficClass::Trunk1","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Trunk-1 [Barry_Boehm]\n","sig":null,"attributes":[{"value":"/Trunk-1 [Barry_Boehm]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41683,"byte_end":41707,"line_start":102,"line_end":102,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":970},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41758,"byte_end":41764,"line_start":105,"line_end":105,"column_start":5,"column_end":11},"name":"Trunk2","qualname":"::internet::ip::IpTrafficClass::Trunk2","value":"IpTrafficClass::Trunk2","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Trunk-2 [Barry_Boehm]\n","sig":null,"attributes":[{"value":"/Trunk-2 [Barry_Boehm]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41729,"byte_end":41753,"line_start":104,"line_end":104,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":973},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41803,"byte_end":41808,"line_start":107,"line_end":107,"column_start":5,"column_end":10},"name":"Leaf1","qualname":"::internet::ip::IpTrafficClass::Leaf1","value":"IpTrafficClass::Leaf1","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Leaf-1 [Barry_Boehm]\n","sig":null,"attributes":[{"value":"/Leaf-1 [Barry_Boehm]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41775,"byte_end":41798,"line_start":106,"line_end":106,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":976},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41847,"byte_end":41852,"line_start":109,"line_end":109,"column_start":5,"column_end":10},"name":"Leaf2","qualname":"::internet::ip::IpTrafficClass::Leaf2","value":"IpTrafficClass::Leaf2","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Leaf-2 [Barry_Boehm]\n","sig":null,"attributes":[{"value":"/Leaf-2 [Barry_Boehm]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41819,"byte_end":41842,"line_start":108,"line_end":108,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":979},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41914,"byte_end":41917,"line_start":111,"line_end":111,"column_start":5,"column_end":8},"name":"Rdp","qualname":"::internet::ip::IpTrafficClass::Rdp","value":"IpTrafficClass::Rdp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Reliable Data Protocol [RFC908][Bob_Hinden]\n","sig":null,"attributes":[{"value":"/Reliable Data Protocol [RFC908][Bob_Hinden]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41863,"byte_end":41909,"line_start":110,"line_end":110,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":982},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41988,"byte_end":41992,"line_start":113,"line_end":113,"column_start":5,"column_end":9},"name":"Irtp","qualname":"::internet::ip::IpTrafficClass::Irtp","value":"IpTrafficClass::Irtp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Internet Reliable Transaction [RFC938][Trudy_Miller]\n","sig":null,"attributes":[{"value":"/Internet Reliable Transaction [RFC938][Trudy_Miller]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":41928,"byte_end":41983,"line_start":112,"line_end":112,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":985},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42069,"byte_end":42075,"line_start":115,"line_end":115,"column_start":5,"column_end":11},"name":"IsoTp4","qualname":"::internet::ip::IpTrafficClass::IsoTp4","value":"IpTrafficClass::IsoTp4","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"ISO Transport Protocol Class 4 [RFC905][<mystery contact>]\n","sig":null,"attributes":[{"value":"/ISO Transport Protocol Class 4 [RFC905][<mystery contact>]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42003,"byte_end":42064,"line_start":114,"line_end":114,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":988},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42143,"byte_end":42149,"line_start":117,"line_end":117,"column_start":5,"column_end":11},"name":"NetBlt","qualname":"::internet::ip::IpTrafficClass::NetBlt","value":"IpTrafficClass::NetBlt","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Bulk Data Transfer Protocol [RFC969][David_Clark]\n","sig":null,"attributes":[{"value":"/Bulk Data Transfer Protocol [RFC969][David_Clark]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42086,"byte_end":42138,"line_start":116,"line_end":116,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":991},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42358,"byte_end":42364,"line_start":119,"line_end":119,"column_start":5,"column_end":11},"name":"MfeNsp","qualname":"::internet::ip::IpTrafficClass::MfeNsp","value":"IpTrafficClass::MfeNsp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"MFE Network Services Protocol [Shuttleworth, B., \"A Documentary of MFENet, a National Computer Network\", UCRL-52317, Lawrence Livermore Labs, Livermore, California, June 1977.][Barry_Howard]\n","sig":null,"attributes":[{"value":"/MFE Network Services Protocol [Shuttleworth, B., \"A Documentary of MFENet, a National Computer Network\", UCRL-52317, Lawrence Livermore Labs, Livermore, California, June 1977.][Barry_Howard]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42160,"byte_end":42353,"line_start":118,"line_end":118,"column_start":5,"column_end":198}}]},{"kind":"TupleVariant","id":{"krate":0,"index":994},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42428,"byte_end":42436,"line_start":121,"line_end":121,"column_start":5,"column_end":13},"name":"MeritInp","qualname":"::internet::ip::IpTrafficClass::MeritInp","value":"IpTrafficClass::MeritInp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"MERIT Internodal Protocol [Hans_Werner_Braun]\n","sig":null,"attributes":[{"value":"/MERIT Internodal Protocol [Hans_Werner_Braun]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42375,"byte_end":42423,"line_start":120,"line_end":120,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":997},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42501,"byte_end":42505,"line_start":123,"line_end":123,"column_start":5,"column_end":9},"name":"Dccp","qualname":"::internet::ip::IpTrafficClass::Dccp","value":"IpTrafficClass::Dccp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Datagram Congestion Control Protocol [RFC4340]\n","sig":null,"attributes":[{"value":"/Datagram Congestion Control Protocol [RFC4340]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42447,"byte_end":42496,"line_start":122,"line_end":122,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1000},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42573,"byte_end":42598,"line_start":125,"line_end":125,"column_start":5,"column_end":30},"name":"ThirdPartyConnectProtocol","qualname":"::internet::ip::IpTrafficClass::ThirdPartyConnectProtocol","value":"IpTrafficClass::ThirdPartyConnectProtocol","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Third Party Connect Protocol [Stuart_A_Friedberg]\n","sig":null,"attributes":[{"value":"/Third Party Connect Protocol [Stuart_A_Friedberg]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42516,"byte_end":42568,"line_start":124,"line_end":124,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1003},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42673,"byte_end":42677,"line_start":127,"line_end":127,"column_start":5,"column_end":9},"name":"Idpr","qualname":"::internet::ip::IpTrafficClass::Idpr","value":"IpTrafficClass::Idpr","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Inter-Domain Policy Routing Protocol [Martha_Steenstrup]\n","sig":null,"attributes":[{"value":"/Inter-Domain Policy Routing Protocol [Martha_Steenstrup]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42609,"byte_end":42668,"line_start":126,"line_end":126,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1006},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42714,"byte_end":42717,"line_start":129,"line_end":129,"column_start":5,"column_end":8},"name":"Xtp","qualname":"::internet::ip::IpTrafficClass::Xtp","value":"IpTrafficClass::Xtp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"XTP [Greg_Chesson]\n","sig":null,"attributes":[{"value":"/XTP [Greg_Chesson]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42688,"byte_end":42709,"line_start":128,"line_end":128,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1009},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42777,"byte_end":42780,"line_start":131,"line_end":131,"column_start":5,"column_end":8},"name":"Ddp","qualname":"::internet::ip::IpTrafficClass::Ddp","value":"IpTrafficClass::Ddp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Datagram Delivery Protocol [Wesley_Craig]\n","sig":null,"attributes":[{"value":"/Datagram Delivery Protocol [Wesley_Craig]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42728,"byte_end":42772,"line_start":130,"line_end":130,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1012},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42855,"byte_end":42863,"line_start":133,"line_end":133,"column_start":5,"column_end":13},"name":"IdprCmtp","qualname":"::internet::ip::IpTrafficClass::IdprCmtp","value":"IpTrafficClass::IdprCmtp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"IDPR Control Message Transport Proto [Martha_Steenstrup]\n","sig":null,"attributes":[{"value":"/IDPR Control Message Transport Proto [Martha_Steenstrup]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42791,"byte_end":42850,"line_start":132,"line_end":132,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1015},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42921,"byte_end":42931,"line_start":135,"line_end":135,"column_start":5,"column_end":15},"name":"TpPlusPlus","qualname":"::internet::ip::IpTrafficClass::TpPlusPlus","value":"IpTrafficClass::TpPlusPlus","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"TP++ Transport Protocol [Dirk_Fromhein]\n","sig":null,"attributes":[{"value":"/TP++ Transport Protocol [Dirk_Fromhein]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42874,"byte_end":42916,"line_start":134,"line_end":134,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1018},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42987,"byte_end":42989,"line_start":137,"line_end":137,"column_start":5,"column_end":7},"name":"Il","qualname":"::internet::ip::IpTrafficClass::Il","value":"IpTrafficClass::Il","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"IL Transport Protocol [Dave_Presotto]\n","sig":null,"attributes":[{"value":"/IL Transport Protocol [Dave_Presotto]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":42942,"byte_end":42982,"line_start":136,"line_end":136,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1021},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43036,"byte_end":43040,"line_start":139,"line_end":139,"column_start":5,"column_end":9},"name":"Ipv6","qualname":"::internet::ip::IpTrafficClass::Ipv6","value":"IpTrafficClass::Ipv6","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"IPv6 encapsulation [RFC2473]\n","sig":null,"attributes":[{"value":"/IPv6 encapsulation [RFC2473]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43000,"byte_end":43031,"line_start":138,"line_end":138,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1024},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43106,"byte_end":43110,"line_start":141,"line_end":141,"column_start":5,"column_end":9},"name":"Sdrp","qualname":"::internet::ip::IpTrafficClass::Sdrp","value":"IpTrafficClass::Sdrp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Source Demand Routing Protocol [Deborah_Estrin]\n","sig":null,"attributes":[{"value":"/Source Demand Routing Protocol [Deborah_Estrin]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43051,"byte_end":43101,"line_start":140,"line_end":140,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1027},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43168,"byte_end":43183,"line_start":143,"line_end":143,"column_start":5,"column_end":20},"name":"IPv6RouteHeader","qualname":"::internet::ip::IpTrafficClass::IPv6RouteHeader","value":"IpTrafficClass::IPv6RouteHeader","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Routing Header for IPv6 [Steve_Deering]\n","sig":null,"attributes":[{"value":"/Routing Header for IPv6 [Steve_Deering]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43121,"byte_end":43163,"line_start":142,"line_end":142,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1030},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43242,"byte_end":43265,"line_start":145,"line_end":145,"column_start":5,"column_end":28},"name":"IPv6FragmentationHeader","qualname":"::internet::ip::IpTrafficClass::IPv6FragmentationHeader","value":"IpTrafficClass::IPv6FragmentationHeader","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Fragment Header for IPv6 [Steve_Deering]\n","sig":null,"attributes":[{"value":"/Fragment Header for IPv6 [Steve_Deering]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43194,"byte_end":43237,"line_start":144,"line_end":144,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1033},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43325,"byte_end":43329,"line_start":147,"line_end":147,"column_start":5,"column_end":9},"name":"Idrp","qualname":"::internet::ip::IpTrafficClass::Idrp","value":"IpTrafficClass::Idrp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Inter-Domain Routing Protocol [Sue_Hares]\n","sig":null,"attributes":[{"value":"/Inter-Domain Routing Protocol [Sue_Hares]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43276,"byte_end":43320,"line_start":146,"line_end":146,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1036},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43399,"byte_end":43403,"line_start":149,"line_end":149,"column_start":5,"column_end":9},"name":"Rsvp","qualname":"::internet::ip::IpTrafficClass::Rsvp","value":"IpTrafficClass::Rsvp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Reservation Protocol [RFC2205][RFC3209][Bob_Braden]\n","sig":null,"attributes":[{"value":"/Reservation Protocol [RFC2205][RFC3209][Bob_Braden]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43340,"byte_end":43394,"line_start":148,"line_end":148,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1039},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43470,"byte_end":43473,"line_start":151,"line_end":151,"column_start":5,"column_end":8},"name":"Gre","qualname":"::internet::ip::IpTrafficClass::Gre","value":"IpTrafficClass::Gre","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Generic Routing Encapsulation [RFC2784][Tony_Li]\n","sig":null,"attributes":[{"value":"/Generic Routing Encapsulation [RFC2784][Tony_Li]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43414,"byte_end":43465,"line_start":150,"line_end":150,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1042},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43533,"byte_end":43536,"line_start":153,"line_end":153,"column_start":5,"column_end":8},"name":"Dsr","qualname":"::internet::ip::IpTrafficClass::Dsr","value":"IpTrafficClass::Dsr","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Dynamic Source Routing Protocol [RFC4728]\n","sig":null,"attributes":[{"value":"/Dynamic Source Routing Protocol [RFC4728]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43484,"byte_end":43528,"line_start":152,"line_end":152,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1045},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43573,"byte_end":43576,"line_start":155,"line_end":155,"column_start":5,"column_end":8},"name":"Bna","qualname":"::internet::ip::IpTrafficClass::Bna","value":"IpTrafficClass::Bna","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"BNA [Gary Salamon]\n","sig":null,"attributes":[{"value":"/BNA [Gary Salamon]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43547,"byte_end":43568,"line_start":154,"line_end":154,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1048},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43627,"byte_end":43651,"line_start":157,"line_end":157,"column_start":5,"column_end":29},"name":"IPv6EncapSecurityPayload","qualname":"::internet::ip::IpTrafficClass::IPv6EncapSecurityPayload","value":"IpTrafficClass::IPv6EncapSecurityPayload","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Encap Security Payload [RFC4303]\n","sig":null,"attributes":[{"value":"/Encap Security Payload [RFC4303]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43587,"byte_end":43622,"line_start":156,"line_end":156,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1051},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43701,"byte_end":43725,"line_start":159,"line_end":159,"column_start":5,"column_end":29},"name":"IPv6AuthenticationHeader","qualname":"::internet::ip::IpTrafficClass::IPv6AuthenticationHeader","value":"IpTrafficClass::IPv6AuthenticationHeader","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Authentication Header [RFC4302]\n","sig":null,"attributes":[{"value":"/Authentication Header [RFC4302]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43662,"byte_end":43696,"line_start":158,"line_end":158,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1054},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43796,"byte_end":43801,"line_start":161,"line_end":161,"column_start":5,"column_end":10},"name":"Inlsp","qualname":"::internet::ip::IpTrafficClass::Inlsp","value":"IpTrafficClass::Inlsp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Integrated Net Layer Security  TUBA [K_Robert_Glenn]\n","sig":null,"attributes":[{"value":"/Integrated Net Layer Security  TUBA [K_Robert_Glenn]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43736,"byte_end":43791,"line_start":160,"line_end":160,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1057},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43868,"byte_end":43873,"line_start":163,"line_end":163,"column_start":5,"column_end":10},"name":"Swipe","qualname":"::internet::ip::IpTrafficClass::Swipe","value":"IpTrafficClass::Swipe","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"IP with Encryption (deprecated) [John_Ioannidis]\n","sig":null,"attributes":[{"value":"/IP with Encryption (deprecated) [John_Ioannidis]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43812,"byte_end":43863,"line_start":162,"line_end":162,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1060},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43934,"byte_end":43938,"line_start":165,"line_end":165,"column_start":5,"column_end":9},"name":"Narp","qualname":"::internet::ip::IpTrafficClass::Narp","value":"IpTrafficClass::Narp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"NBMA Address Resolution Protocol [RFC1735]\n","sig":null,"attributes":[{"value":"/NBMA Address Resolution Protocol [RFC1735]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43884,"byte_end":43929,"line_start":164,"line_end":164,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1063},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43986,"byte_end":43992,"line_start":167,"line_end":167,"column_start":5,"column_end":11},"name":"Mobile","qualname":"::internet::ip::IpTrafficClass::Mobile","value":"IpTrafficClass::Mobile","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"IP Mobility [Charlie_Perkins]\n","sig":null,"attributes":[{"value":"/IP Mobility [Charlie_Perkins]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":43949,"byte_end":43981,"line_start":166,"line_end":166,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1066},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44092,"byte_end":44096,"line_start":169,"line_end":169,"column_start":5,"column_end":9},"name":"Tlsp","qualname":"::internet::ip::IpTrafficClass::Tlsp","value":"IpTrafficClass::Tlsp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Transport Layer Security Protocol using Kryptonet key management [Christer_Oberg]\n","sig":null,"attributes":[{"value":"/Transport Layer Security Protocol using Kryptonet key management [Christer_Oberg]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44003,"byte_end":44087,"line_start":168,"line_end":168,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1069},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44133,"byte_end":44137,"line_start":171,"line_end":171,"column_start":5,"column_end":9},"name":"Skip","qualname":"::internet::ip::IpTrafficClass::Skip","value":"IpTrafficClass::Skip","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"SKIP [Tom_Markson]\n","sig":null,"attributes":[{"value":"/SKIP [Tom_Markson]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44107,"byte_end":44128,"line_start":170,"line_end":170,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1072},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44179,"byte_end":44187,"line_start":173,"line_end":173,"column_start":5,"column_end":13},"name":"IPv6Icmp","qualname":"::internet::ip::IpTrafficClass::IPv6Icmp","value":"IpTrafficClass::IPv6Icmp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"ICMP for IPv6 [RFC8200]\n","sig":null,"attributes":[{"value":"/ICMP for IPv6 [RFC8200]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44148,"byte_end":44174,"line_start":172,"line_end":172,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1075},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44239,"byte_end":44255,"line_start":175,"line_end":175,"column_start":5,"column_end":21},"name":"IPv6NoNextHeader","qualname":"::internet::ip::IpTrafficClass::IPv6NoNextHeader","value":"IpTrafficClass::IPv6NoNextHeader","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"No Next Header for IPv6 [RFC8200]\n","sig":null,"attributes":[{"value":"/No Next Header for IPv6 [RFC8200]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44198,"byte_end":44234,"line_start":174,"line_end":174,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1078},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44312,"byte_end":44334,"line_start":177,"line_end":177,"column_start":5,"column_end":27},"name":"IPv6DestinationOptions","qualname":"::internet::ip::IpTrafficClass::IPv6DestinationOptions","value":"IpTrafficClass::IPv6DestinationOptions","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Destination Options for IPv6 [RFC8200]\n","sig":null,"attributes":[{"value":"/Destination Options for IPv6 [RFC8200]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44266,"byte_end":44307,"line_start":176,"line_end":176,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1081},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44417,"byte_end":44440,"line_start":179,"line_end":179,"column_start":5,"column_end":28},"name":"AnyHostInternalProtocol","qualname":"::internet::ip::IpTrafficClass::AnyHostInternalProtocol","value":"IpTrafficClass::AnyHostInternalProtocol","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"any host internal protocol [Internet_Assigned_Numbers_Authority]\n","sig":null,"attributes":[{"value":"/any host internal protocol [Internet_Assigned_Numbers_Authority]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44345,"byte_end":44412,"line_start":178,"line_end":178,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1084},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44559,"byte_end":44563,"line_start":181,"line_end":181,"column_start":5,"column_end":9},"name":"Cftp","qualname":"::internet::ip::IpTrafficClass::Cftp","value":"IpTrafficClass::Cftp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"CFTP [Forsdick, H., \"CFTP\", Network Message, Bolt Beranek and Newman, January 1982.][Harry_Forsdick]\n","sig":null,"attributes":[{"value":"/CFTP [Forsdick, H., \"CFTP\", Network Message, Bolt Beranek and Newman, January 1982.][Harry_Forsdick]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44451,"byte_end":44554,"line_start":180,"line_end":180,"column_start":5,"column_end":108}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1087},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44637,"byte_end":44652,"line_start":183,"line_end":183,"column_start":5,"column_end":20},"name":"AnyLocalNetwork","qualname":"::internet::ip::IpTrafficClass::AnyLocalNetwork","value":"IpTrafficClass::AnyLocalNetwork","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"any local network [Internet_Assigned_Numbers_Authority]\n","sig":null,"attributes":[{"value":"/any local network [Internet_Assigned_Numbers_Authority]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44574,"byte_end":44632,"line_start":182,"line_end":182,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1090},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44716,"byte_end":44724,"line_start":185,"line_end":185,"column_start":5,"column_end":13},"name":"SatExpak","qualname":"::internet::ip::IpTrafficClass::SatExpak","value":"IpTrafficClass::SatExpak","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"SATNET and Backroom EXPAK [Steven_Blumenthal]\n","sig":null,"attributes":[{"value":"/SATNET and Backroom EXPAK [Steven_Blumenthal]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44663,"byte_end":44711,"line_start":184,"line_end":184,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1093},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44763,"byte_end":44771,"line_start":187,"line_end":187,"column_start":5,"column_end":13},"name":"Krytolan","qualname":"::internet::ip::IpTrafficClass::Krytolan","value":"IpTrafficClass::Krytolan","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Kryptolan [Paul Liu]\n","sig":null,"attributes":[{"value":"/Kryptolan [Paul Liu]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44735,"byte_end":44758,"line_start":186,"line_end":186,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1096},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44842,"byte_end":44845,"line_start":189,"line_end":189,"column_start":5,"column_end":8},"name":"Rvd","qualname":"::internet::ip::IpTrafficClass::Rvd","value":"IpTrafficClass::Rvd","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"MIT Remote Virtual Disk Protocol [Michael_Greenwald]\n","sig":null,"attributes":[{"value":"/MIT Remote Virtual Disk Protocol [Michael_Greenwald]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44782,"byte_end":44837,"line_start":188,"line_end":188,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1099},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44913,"byte_end":44917,"line_start":191,"line_end":191,"column_start":5,"column_end":9},"name":"Ippc","qualname":"::internet::ip::IpTrafficClass::Ippc","value":"IpTrafficClass::Ippc","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Internet Pluribus Packet Core [Steven_Blumenthal]\n","sig":null,"attributes":[{"value":"/Internet Pluribus Packet Core [Steven_Blumenthal]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44856,"byte_end":44908,"line_start":190,"line_end":190,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1102},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45001,"byte_end":45025,"line_start":193,"line_end":193,"column_start":5,"column_end":29},"name":"AnyDistributedFileSystem","qualname":"::internet::ip::IpTrafficClass::AnyDistributedFileSystem","value":"IpTrafficClass::AnyDistributedFileSystem","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"any distributed file system [Internet_Assigned_Numbers_Authority]\n","sig":null,"attributes":[{"value":"/any distributed file system [Internet_Assigned_Numbers_Authority]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":44928,"byte_end":44996,"line_start":192,"line_end":192,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1105},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45081,"byte_end":45087,"line_start":195,"line_end":195,"column_start":5,"column_end":11},"name":"SatMon","qualname":"::internet::ip::IpTrafficClass::SatMon","value":"IpTrafficClass::SatMon","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"SATNET Monitoring [Steven_Blumenthal]\n","sig":null,"attributes":[{"value":"/SATNET Monitoring [Steven_Blumenthal]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45036,"byte_end":45076,"line_start":194,"line_end":194,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1108},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45133,"byte_end":45137,"line_start":197,"line_end":197,"column_start":5,"column_end":9},"name":"Visa","qualname":"::internet::ip::IpTrafficClass::Visa","value":"IpTrafficClass::Visa","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"VISA Protocol [Gene_Tsudik]\n","sig":null,"attributes":[{"value":"/VISA Protocol [Gene_Tsudik]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45098,"byte_end":45128,"line_start":196,"line_end":196,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1111},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45204,"byte_end":45208,"line_start":199,"line_end":199,"column_start":5,"column_end":9},"name":"Ipcv","qualname":"::internet::ip::IpTrafficClass::Ipcv","value":"IpTrafficClass::Ipcv","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Internet Packet Core Utility [Steven_Blumenthal]\n","sig":null,"attributes":[{"value":"/Internet Packet Core Utility [Steven_Blumenthal]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45148,"byte_end":45199,"line_start":198,"line_end":198,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1114},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45280,"byte_end":45284,"line_start":201,"line_end":201,"column_start":5,"column_end":9},"name":"Cpnx","qualname":"::internet::ip::IpTrafficClass::Cpnx","value":"IpTrafficClass::Cpnx","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Computer Protocol Network Executive [David Mittnacht]\n","sig":null,"attributes":[{"value":"/Computer Protocol Network Executive [David Mittnacht]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45219,"byte_end":45275,"line_start":200,"line_end":200,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1117},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45349,"byte_end":45353,"line_start":203,"line_end":203,"column_start":5,"column_end":9},"name":"Cphb","qualname":"::internet::ip::IpTrafficClass::Cphb","value":"IpTrafficClass::Cphb","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Computer Protocol Heart Beat [David Mittnacht]\n","sig":null,"attributes":[{"value":"/Computer Protocol Heart Beat [David Mittnacht]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45295,"byte_end":45344,"line_start":202,"line_end":202,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1120},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45407,"byte_end":45410,"line_start":205,"line_end":205,"column_start":5,"column_end":8},"name":"Wsn","qualname":"::internet::ip::IpTrafficClass::Wsn","value":"IpTrafficClass::Wsn","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Wang Span Network [Victor Dafoulas]\n","sig":null,"attributes":[{"value":"/Wang Span Network [Victor Dafoulas]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45364,"byte_end":45402,"line_start":204,"line_end":204,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1123},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45465,"byte_end":45468,"line_start":207,"line_end":207,"column_start":5,"column_end":8},"name":"Pvp","qualname":"::internet::ip::IpTrafficClass::Pvp","value":"IpTrafficClass::Pvp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Packet Video Protocol [Steve_Casner]\n","sig":null,"attributes":[{"value":"/Packet Video Protocol [Steve_Casner]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45421,"byte_end":45460,"line_start":206,"line_end":206,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1126},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45533,"byte_end":45541,"line_start":209,"line_end":209,"column_start":5,"column_end":13},"name":"BrSatMon","qualname":"::internet::ip::IpTrafficClass::BrSatMon","value":"IpTrafficClass::BrSatMon","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Backroom SATNET Monitoring [Steven_Blumenthal]\n","sig":null,"attributes":[{"value":"/Backroom SATNET Monitoring [Steven_Blumenthal]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45479,"byte_end":45528,"line_start":208,"line_end":208,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1129},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45602,"byte_end":45607,"line_start":211,"line_end":211,"column_start":5,"column_end":10},"name":"SunNd","qualname":"::internet::ip::IpTrafficClass::SunNd","value":"IpTrafficClass::SunNd","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"SUN ND PROTOCOL-Temporary [William_Melohn]\n","sig":null,"attributes":[{"value":"/SUN ND PROTOCOL-Temporary [William_Melohn]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45552,"byte_end":45597,"line_start":210,"line_end":210,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1132},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45665,"byte_end":45670,"line_start":213,"line_end":213,"column_start":5,"column_end":10},"name":"WbMon","qualname":"::internet::ip::IpTrafficClass::WbMon","value":"IpTrafficClass::WbMon","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"WIDEBAND Monitoring [Steven_Blumenthal]\n","sig":null,"attributes":[{"value":"/WIDEBAND Monitoring [Steven_Blumenthal]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45618,"byte_end":45660,"line_start":212,"line_end":212,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1135},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45723,"byte_end":45730,"line_start":215,"line_end":215,"column_start":5,"column_end":12},"name":"WbExpak","qualname":"::internet::ip::IpTrafficClass::WbExpak","value":"IpTrafficClass::WbExpak","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"WIDEBAND EXPAK [Steven_Blumenthal]\n","sig":null,"attributes":[{"value":"/WIDEBAND EXPAK [Steven_Blumenthal]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45681,"byte_end":45718,"line_start":214,"line_end":214,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1138},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45788,"byte_end":45793,"line_start":217,"line_end":217,"column_start":5,"column_end":10},"name":"IsoIp","qualname":"::internet::ip::IpTrafficClass::IsoIp","value":"IpTrafficClass::IsoIp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"ISO Internet Protocol [Marshall_T_Rose]\n","sig":null,"attributes":[{"value":"/ISO Internet Protocol [Marshall_T_Rose]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45741,"byte_end":45783,"line_start":216,"line_end":216,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1141},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45832,"byte_end":45836,"line_start":219,"line_end":219,"column_start":5,"column_end":9},"name":"Vmtp","qualname":"::internet::ip::IpTrafficClass::Vmtp","value":"IpTrafficClass::Vmtp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"VMTP [Dave_Cheriton]\n","sig":null,"attributes":[{"value":"/VMTP [Dave_Cheriton]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45804,"byte_end":45827,"line_start":218,"line_end":218,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1144},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45882,"byte_end":45892,"line_start":221,"line_end":221,"column_start":5,"column_end":15},"name":"SecureVmtp","qualname":"::internet::ip::IpTrafficClass::SecureVmtp","value":"IpTrafficClass::SecureVmtp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"SECURE-VMTP [Dave_Cheriton]\n","sig":null,"attributes":[{"value":"/SECURE-VMTP [Dave_Cheriton]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45847,"byte_end":45877,"line_start":220,"line_end":220,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1147},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45929,"byte_end":45934,"line_start":223,"line_end":223,"column_start":5,"column_end":10},"name":"Vines","qualname":"::internet::ip::IpTrafficClass::Vines","value":"IpTrafficClass::Vines","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"VINES [Brian Horn]\n","sig":null,"attributes":[{"value":"/VINES [Brian Horn]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45903,"byte_end":45924,"line_start":222,"line_end":222,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1150},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46034,"byte_end":46043,"line_start":225,"line_end":225,"column_start":5,"column_end":14},"name":"TtpOrIptm","qualname":"::internet::ip::IpTrafficClass::TtpOrIptm","value":"IpTrafficClass::TtpOrIptm","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Transaction Transport Protocol or Internet Protocol Traffic Manager [Jim_Stevens]\n","sig":null,"attributes":[{"value":"/Transaction Transport Protocol or Internet Protocol Traffic Manager [Jim_Stevens]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":45945,"byte_end":46029,"line_start":224,"line_end":224,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1153},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46092,"byte_end":46101,"line_start":227,"line_end":227,"column_start":5,"column_end":14},"name":"NsfnetIgp","qualname":"::internet::ip::IpTrafficClass::NsfnetIgp","value":"IpTrafficClass::NsfnetIgp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"NSFNET-IGP [Hans_Werner_Braun]\n","sig":null,"attributes":[{"value":"/NSFNET-IGP [Hans_Werner_Braun]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46054,"byte_end":46087,"line_start":226,"line_end":226,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1156},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46292,"byte_end":46295,"line_start":229,"line_end":229,"column_start":5,"column_end":8},"name":"Dgp","qualname":"::internet::ip::IpTrafficClass::Dgp","value":"IpTrafficClass::Dgp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Dissimilar Gateway Protocol [M/A-COM Government Systems, \"Dissimilar Gateway Protocol Specification, Draft Version\", Contract no. CS901145, November 16, 1987.][Mike_Little]\n","sig":null,"attributes":[{"value":"/Dissimilar Gateway Protocol [M/A-COM Government Systems, \"Dissimilar Gateway Protocol Specification, Draft Version\", Contract no. CS901145, November 16, 1987.][Mike_Little]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46112,"byte_end":46287,"line_start":228,"line_end":228,"column_start":5,"column_end":180}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1159},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46338,"byte_end":46341,"line_start":231,"line_end":231,"column_start":5,"column_end":8},"name":"Tcf","qualname":"::internet::ip::IpTrafficClass::Tcf","value":"IpTrafficClass::Tcf","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"TCF [Guillermo_A_Loyola]\n","sig":null,"attributes":[{"value":"/TCF [Guillermo_A_Loyola]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46306,"byte_end":46333,"line_start":230,"line_end":230,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1162},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46375,"byte_end":46380,"line_start":233,"line_end":233,"column_start":5,"column_end":10},"name":"Eigrp","qualname":"::internet::ip::IpTrafficClass::Eigrp","value":"IpTrafficClass::Eigrp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"EIGRP [RFC7868]\n","sig":null,"attributes":[{"value":"/EIGRP [RFC7868]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46352,"byte_end":46370,"line_start":232,"line_end":232,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1165},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46444,"byte_end":46451,"line_start":235,"line_end":235,"column_start":5,"column_end":12},"name":"Ospfigp","qualname":"::internet::ip::IpTrafficClass::Ospfigp","value":"IpTrafficClass::Ospfigp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"OSPFIGP [RFC1583][RFC2328][RFC5340][John_Moy]\n","sig":null,"attributes":[{"value":"/OSPFIGP [RFC1583][RFC2328][RFC5340][John_Moy]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46391,"byte_end":46439,"line_start":234,"line_end":234,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1168},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46663,"byte_end":46672,"line_start":237,"line_end":237,"column_start":5,"column_end":14},"name":"SpriteRpc","qualname":"::internet::ip::IpTrafficClass::SpriteRpc","value":"IpTrafficClass::SpriteRpc","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Sprite RPC Protocol [Welch, B., \"The Sprite Remote Procedure Call System\", Technical Report, UCB/Computer Science Dept., 86/302, University of California at Berkeley, June 1986.][Bruce Willins]\n","sig":null,"attributes":[{"value":"/Sprite RPC Protocol [Welch, B., \"The Sprite Remote Procedure Call System\", Technical Report, UCB/Computer Science Dept., 86/302, University of California at Berkeley, June 1986.][Bruce Willins]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46462,"byte_end":46658,"line_start":236,"line_end":236,"column_start":5,"column_end":201}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1171},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46737,"byte_end":46741,"line_start":239,"line_end":239,"column_start":5,"column_end":9},"name":"Larp","qualname":"::internet::ip::IpTrafficClass::Larp","value":"IpTrafficClass::Larp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Locus Address Resolution Protocol [Brian Horn]\n","sig":null,"attributes":[{"value":"/Locus Address Resolution Protocol [Brian Horn]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46683,"byte_end":46732,"line_start":238,"line_end":238,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1174},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46806,"byte_end":46809,"line_start":241,"line_end":241,"column_start":5,"column_end":8},"name":"Mtp","qualname":"::internet::ip::IpTrafficClass::Mtp","value":"IpTrafficClass::Mtp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Multicast Transport Protocol [Susie_Armstrong]\n","sig":null,"attributes":[{"value":"/Multicast Transport Protocol [Susie_Armstrong]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46752,"byte_end":46801,"line_start":240,"line_end":240,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1177},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46855,"byte_end":46859,"line_start":243,"line_end":243,"column_start":5,"column_end":9},"name":"Ax25","qualname":"::internet::ip::IpTrafficClass::Ax25","value":"IpTrafficClass::Ax25","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"AX.25 Frames [Brian_Kantor]\n","sig":null,"attributes":[{"value":"/AX.25 Frames [Brian_Kantor]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46820,"byte_end":46850,"line_start":242,"line_end":242,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1180},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46930,"byte_end":46934,"line_start":245,"line_end":245,"column_start":5,"column_end":9},"name":"Ipip","qualname":"::internet::ip::IpTrafficClass::Ipip","value":"IpTrafficClass::Ipip","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"IP-within-IP Encapsulation Protocol [John_Ioannidis]\n","sig":null,"attributes":[{"value":"/IP-within-IP Encapsulation Protocol [John_Ioannidis]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46870,"byte_end":46925,"line_start":244,"line_end":244,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1183},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47018,"byte_end":47022,"line_start":247,"line_end":247,"column_start":5,"column_end":9},"name":"Micp","qualname":"::internet::ip::IpTrafficClass::Micp","value":"IpTrafficClass::Micp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Mobile Internetworking Control Pro. (deprecated) [John_Ioannidis]\n","sig":null,"attributes":[{"value":"/Mobile Internetworking Control Pro. (deprecated) [John_Ioannidis]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":46945,"byte_end":47013,"line_start":246,"line_end":246,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1186},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47089,"byte_end":47094,"line_start":249,"line_end":249,"column_start":5,"column_end":10},"name":"SccSp","qualname":"::internet::ip::IpTrafficClass::SccSp","value":"IpTrafficClass::SccSp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Semaphore Communications Sec. Pro. [Howard_Hart]\n","sig":null,"attributes":[{"value":"/Semaphore Communications Sec. Pro. [Howard_Hart]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47033,"byte_end":47084,"line_start":248,"line_end":248,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1189},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47155,"byte_end":47162,"line_start":251,"line_end":251,"column_start":5,"column_end":12},"name":"EtherIp","qualname":"::internet::ip::IpTrafficClass::EtherIp","value":"IpTrafficClass::EtherIp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Ethernet-within-IP Encapsulation [RFC3378]\n","sig":null,"attributes":[{"value":"/Ethernet-within-IP Encapsulation [RFC3378]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47105,"byte_end":47150,"line_start":250,"line_end":250,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1192},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47228,"byte_end":47233,"line_start":253,"line_end":253,"column_start":5,"column_end":10},"name":"Encap","qualname":"::internet::ip::IpTrafficClass::Encap","value":"IpTrafficClass::Encap","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Encapsulation Header [RFC1241][Robert_Woodburn]\n","sig":null,"attributes":[{"value":"/Encapsulation Header [RFC1241][Robert_Woodburn]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47173,"byte_end":47223,"line_start":252,"line_end":252,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1195},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47265,"byte_end":47269,"line_start":255,"line_end":255,"column_start":5,"column_end":9},"name":"Gmtp","qualname":"::internet::ip::IpTrafficClass::Gmtp","value":"IpTrafficClass::Gmtp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"GMTP [[RXB5]]\n","sig":null,"attributes":[{"value":"/GMTP [[RXB5]]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47244,"byte_end":47260,"line_start":254,"line_end":254,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1198},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47356,"byte_end":47360,"line_start":257,"line_end":257,"column_start":5,"column_end":9},"name":"Ifmp","qualname":"::internet::ip::IpTrafficClass::Ifmp","value":"IpTrafficClass::Ifmp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Ipsilon Flow Management Protocol [Bob_Hinden][November 1995, 1997.]\n","sig":null,"attributes":[{"value":"/Ipsilon Flow Management Protocol [Bob_Hinden][November 1995, 1997.]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47281,"byte_end":47351,"line_start":256,"line_end":256,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1201},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47406,"byte_end":47410,"line_start":259,"line_end":259,"column_start":5,"column_end":9},"name":"Pnni","qualname":"::internet::ip::IpTrafficClass::Pnni","value":"IpTrafficClass::Pnni","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"PNNI over IP [Ross_Callon]\n","sig":null,"attributes":[{"value":"/PNNI over IP [Ross_Callon]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47372,"byte_end":47401,"line_start":258,"line_end":258,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1204},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47486,"byte_end":47489,"line_start":261,"line_end":261,"column_start":5,"column_end":8},"name":"Pim","qualname":"::internet::ip::IpTrafficClass::Pim","value":"IpTrafficClass::Pim","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Protocol Independent Multicast [RFC7761][Dino_Farinacci]\n","sig":null,"attributes":[{"value":"/Protocol Independent Multicast [RFC7761][Dino_Farinacci]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47422,"byte_end":47481,"line_start":260,"line_end":260,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1207},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47529,"byte_end":47533,"line_start":263,"line_end":263,"column_start":5,"column_end":9},"name":"Aris","qualname":"::internet::ip::IpTrafficClass::Aris","value":"IpTrafficClass::Aris","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"ARIS [Nancy_Feldman]\n","sig":null,"attributes":[{"value":"/ARIS [Nancy_Feldman]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47501,"byte_end":47524,"line_start":262,"line_end":262,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1210},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47572,"byte_end":47576,"line_start":265,"line_end":265,"column_start":5,"column_end":9},"name":"Scps","qualname":"::internet::ip::IpTrafficClass::Scps","value":"IpTrafficClass::Scps","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"SCPS [Robert_Durst]\n","sig":null,"attributes":[{"value":"/SCPS [Robert_Durst]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47545,"byte_end":47567,"line_start":264,"line_end":264,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1213},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47616,"byte_end":47619,"line_start":267,"line_end":267,"column_start":5,"column_end":8},"name":"Qnx","qualname":"::internet::ip::IpTrafficClass::Qnx","value":"IpTrafficClass::Qnx","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"QNX [Michael_Hunter]\n","sig":null,"attributes":[{"value":"/QNX [Michael_Hunter]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47588,"byte_end":47611,"line_start":266,"line_end":266,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1216},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47667,"byte_end":47681,"line_start":269,"line_end":269,"column_start":5,"column_end":19},"name":"ActiveNetworks","qualname":"::internet::ip::IpTrafficClass::ActiveNetworks","value":"IpTrafficClass::ActiveNetworks","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Active Networks [Bob_Braden]\n","sig":null,"attributes":[{"value":"/Active Networks [Bob_Braden]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47631,"byte_end":47662,"line_start":268,"line_end":268,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1219},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47742,"byte_end":47748,"line_start":271,"line_end":271,"column_start":5,"column_end":11},"name":"IpComp","qualname":"::internet::ip::IpTrafficClass::IpComp","value":"IpTrafficClass::IpComp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"IP Payload Compression Protocol [RFC2393]\n","sig":null,"attributes":[{"value":"/IP Payload Compression Protocol [RFC2393]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47693,"byte_end":47737,"line_start":270,"line_end":270,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1222},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47813,"byte_end":47834,"line_start":273,"line_end":273,"column_start":5,"column_end":26},"name":"SitraNetworksProtocol","qualname":"::internet::ip::IpTrafficClass::SitraNetworksProtocol","value":"IpTrafficClass::SitraNetworksProtocol","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Sitara Networks Protocol [Manickam_R_Sridhar]\n","sig":null,"attributes":[{"value":"/Sitara Networks Protocol [Manickam_R_Sridhar]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47760,"byte_end":47808,"line_start":272,"line_end":272,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1225},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47889,"byte_end":47899,"line_start":275,"line_end":275,"column_start":5,"column_end":15},"name":"CompaqPeer","qualname":"::internet::ip::IpTrafficClass::CompaqPeer","value":"IpTrafficClass::CompaqPeer","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Compaq Peer Protocol [Victor_Volpe]\n","sig":null,"attributes":[{"value":"/Compaq Peer Protocol [Victor_Volpe]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47846,"byte_end":47884,"line_start":274,"line_end":274,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1228},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47937,"byte_end":47944,"line_start":277,"line_end":277,"column_start":5,"column_end":12},"name":"IpxInIp","qualname":"::internet::ip::IpTrafficClass::IpxInIp","value":"IpTrafficClass::IpxInIp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"IPX in IP [CJ_Lee]\n","sig":null,"attributes":[{"value":"/IPX in IP [CJ_Lee]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47911,"byte_end":47932,"line_start":276,"line_end":276,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1231},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48008,"byte_end":48012,"line_start":279,"line_end":279,"column_start":5,"column_end":9},"name":"Vrrp","qualname":"::internet::ip::IpTrafficClass::Vrrp","value":"IpTrafficClass::Vrrp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Virtual Router Redundancy Protocol [RFC5798]\n","sig":null,"attributes":[{"value":"/Virtual Router Redundancy Protocol [RFC5798]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":47956,"byte_end":48003,"line_start":278,"line_end":278,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1234},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48079,"byte_end":48082,"line_start":281,"line_end":281,"column_start":5,"column_end":8},"name":"Pgm","qualname":"::internet::ip::IpTrafficClass::Pgm","value":"IpTrafficClass::Pgm","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"PGM Reliable Transport Protocol [Tony_Speakman]\n","sig":null,"attributes":[{"value":"/PGM Reliable Transport Protocol [Tony_Speakman]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48024,"byte_end":48074,"line_start":280,"line_end":280,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1237},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48158,"byte_end":48176,"line_start":283,"line_end":283,"column_start":5,"column_end":23},"name":"AnyZeroHopProtocol","qualname":"::internet::ip::IpTrafficClass::AnyZeroHopProtocol","value":"IpTrafficClass::AnyZeroHopProtocol","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"any 0-hop protocol [Internet_Assigned_Numbers_Authority]\n","sig":null,"attributes":[{"value":"/any 0-hop protocol [Internet_Assigned_Numbers_Authority]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48094,"byte_end":48153,"line_start":282,"line_end":282,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1240},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48249,"byte_end":48272,"line_start":285,"line_end":285,"column_start":5,"column_end":28},"name":"Layer2TunnelingProtocol","qualname":"::internet::ip::IpTrafficClass::Layer2TunnelingProtocol","value":"IpTrafficClass::Layer2TunnelingProtocol","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Layer Two Tunneling Protocol [RFC3931][Bernard_Aboba]\n","sig":null,"attributes":[{"value":"/Layer Two Tunneling Protocol [RFC3931][Bernard_Aboba]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48188,"byte_end":48244,"line_start":284,"line_end":284,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1243},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48330,"byte_end":48333,"line_start":287,"line_end":287,"column_start":5,"column_end":8},"name":"Ddx","qualname":"::internet::ip::IpTrafficClass::Ddx","value":"IpTrafficClass::Ddx","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"D-II Data Exchange (DDX) [John_Worley]\n","sig":null,"attributes":[{"value":"/D-II Data Exchange (DDX) [John_Worley]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48284,"byte_end":48325,"line_start":286,"line_end":286,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1246},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48402,"byte_end":48406,"line_start":289,"line_end":289,"column_start":5,"column_end":9},"name":"Iatp","qualname":"::internet::ip::IpTrafficClass::Iatp","value":"IpTrafficClass::Iatp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Interactive Agent Transfer Protocol [John_Murphy]\n","sig":null,"attributes":[{"value":"/Interactive Agent Transfer Protocol [John_Murphy]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48345,"byte_end":48397,"line_start":288,"line_end":288,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1249},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48473,"byte_end":48476,"line_start":291,"line_end":291,"column_start":5,"column_end":8},"name":"Stp","qualname":"::internet::ip::IpTrafficClass::Stp","value":"IpTrafficClass::Stp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Schedule Transfer Protocol [Jean_Michel_Pittet]\n","sig":null,"attributes":[{"value":"/Schedule Transfer Protocol [Jean_Michel_Pittet]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48418,"byte_end":48468,"line_start":290,"line_end":290,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1252},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48538,"byte_end":48541,"line_start":293,"line_end":293,"column_start":5,"column_end":8},"name":"Srp","qualname":"::internet::ip::IpTrafficClass::Srp","value":"IpTrafficClass::Srp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"SpectraLink Radio Protocol [Mark_Hamilton]\n","sig":null,"attributes":[{"value":"/SpectraLink Radio Protocol [Mark_Hamilton]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48488,"byte_end":48533,"line_start":292,"line_end":292,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1255},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48581,"byte_end":48584,"line_start":295,"line_end":295,"column_start":5,"column_end":8},"name":"Uti","qualname":"::internet::ip::IpTrafficClass::Uti","value":"IpTrafficClass::Uti","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"UTI [Peter_Lothberg]\n","sig":null,"attributes":[{"value":"/UTI [Peter_Lothberg]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48553,"byte_end":48576,"line_start":294,"line_end":294,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1258},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48641,"byte_end":48662,"line_start":297,"line_end":297,"column_start":5,"column_end":26},"name":"SimpleMessageProtocol","qualname":"::internet::ip::IpTrafficClass::SimpleMessageProtocol","value":"IpTrafficClass::SimpleMessageProtocol","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Simple Message Protocol [Leif_Ekblad]\n","sig":null,"attributes":[{"value":"/Simple Message Protocol [Leif_Ekblad]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48596,"byte_end":48636,"line_start":296,"line_end":296,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1261},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48768,"byte_end":48770,"line_start":299,"line_end":299,"column_start":5,"column_end":7},"name":"Sm","qualname":"::internet::ip::IpTrafficClass::Sm","value":"IpTrafficClass::Sm","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Simple Multicast Protocol (deprecated) [Jon_Crowcroft][draft-perlman-simple-multicast]\n","sig":null,"attributes":[{"value":"/Simple Multicast Protocol (deprecated) [Jon_Crowcroft][draft-perlman-simple-multicast]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48674,"byte_end":48763,"line_start":298,"line_end":298,"column_start":5,"column_end":94}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1264},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48839,"byte_end":48842,"line_start":301,"line_end":301,"column_start":5,"column_end":8},"name":"Ptp","qualname":"::internet::ip::IpTrafficClass::Ptp","value":"IpTrafficClass::Ptp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Performance Transparency Protocol [Michael_Welzl]\n","sig":null,"attributes":[{"value":"/Performance Transparency Protocol [Michael_Welzl]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48782,"byte_end":48834,"line_start":300,"line_end":300,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1267},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48894,"byte_end":48906,"line_start":303,"line_end":303,"column_start":5,"column_end":17},"name":"IsisOverIpv4","qualname":"::internet::ip::IpTrafficClass::IsisOverIpv4","value":"IpTrafficClass::IsisOverIpv4","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"ISIS over IPv4 [Tony_Przygienda]\n","sig":null,"attributes":[{"value":"/ISIS over IPv4 [Tony_Przygienda]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48854,"byte_end":48889,"line_start":302,"line_end":302,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1270},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48948,"byte_end":48952,"line_start":305,"line_end":305,"column_start":5,"column_end":9},"name":"Fire","qualname":"::internet::ip::IpTrafficClass::Fire","value":"IpTrafficClass::Fire","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"FIRE [Criag_Partridge]\n","sig":null,"attributes":[{"value":"/FIRE [Criag_Partridge]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48918,"byte_end":48943,"line_start":304,"line_end":304,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1273},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49020,"byte_end":49024,"line_start":307,"line_end":307,"column_start":5,"column_end":9},"name":"Crtp","qualname":"::internet::ip::IpTrafficClass::Crtp","value":"IpTrafficClass::Crtp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Combat Radio Transport Protocol [Robert_Sautter]\n","sig":null,"attributes":[{"value":"/Combat Radio Transport Protocol [Robert_Sautter]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":48964,"byte_end":49015,"line_start":306,"line_end":306,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1276},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49087,"byte_end":49092,"line_start":309,"line_end":309,"column_start":5,"column_end":10},"name":"Crudp","qualname":"::internet::ip::IpTrafficClass::Crudp","value":"IpTrafficClass::Crudp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Combat Radio User Datagram [Robert_Sautter]\n","sig":null,"attributes":[{"value":"/Combat Radio User Datagram [Robert_Sautter]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49036,"byte_end":49082,"line_start":308,"line_end":308,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1279},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49133,"byte_end":49141,"line_start":311,"line_end":311,"column_start":5,"column_end":13},"name":"Sscopmce","qualname":"::internet::ip::IpTrafficClass::Sscopmce","value":"IpTrafficClass::Sscopmce","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"SSCOPMCE [Kurt_Waber]\n","sig":null,"attributes":[{"value":"/SSCOPMCE [Kurt_Waber]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49104,"byte_end":49128,"line_start":310,"line_end":310,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1282},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49178,"byte_end":49182,"line_start":313,"line_end":313,"column_start":5,"column_end":9},"name":"Iplt","qualname":"::internet::ip::IpTrafficClass::Iplt","value":"IpTrafficClass::Iplt","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"IPLT [[Hollbach]]\n","sig":null,"attributes":[{"value":"/IPLT [[Hollbach]]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49153,"byte_end":49173,"line_start":312,"line_end":312,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1285},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49238,"byte_end":49241,"line_start":315,"line_end":315,"column_start":5,"column_end":8},"name":"Sps","qualname":"::internet::ip::IpTrafficClass::Sps","value":"IpTrafficClass::Sps","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Secure Packet Shield [Bill_McIntosh]\n","sig":null,"attributes":[{"value":"/Secure Packet Shield [Bill_McIntosh]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49194,"byte_end":49233,"line_start":314,"line_end":314,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1288},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49312,"byte_end":49316,"line_start":317,"line_end":317,"column_start":5,"column_end":9},"name":"Pipe","qualname":"::internet::ip::IpTrafficClass::Pipe","value":"IpTrafficClass::Pipe","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Private IP Encapsulation within IP [Bernhard_Petri]\n","sig":null,"attributes":[{"value":"/Private IP Encapsulation within IP [Bernhard_Petri]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49253,"byte_end":49307,"line_start":316,"line_end":316,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1291},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49392,"byte_end":49396,"line_start":319,"line_end":319,"column_start":5,"column_end":9},"name":"Sctp","qualname":"::internet::ip::IpTrafficClass::Sctp","value":"IpTrafficClass::Sctp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Stream Control Transmission Protocol [Randall_R_Stewart]\n","sig":null,"attributes":[{"value":"/Stream Control Transmission Protocol [Randall_R_Stewart]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49328,"byte_end":49387,"line_start":318,"line_end":318,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1294},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49457,"byte_end":49459,"line_start":321,"line_end":321,"column_start":5,"column_end":7},"name":"Fc","qualname":"::internet::ip::IpTrafficClass::Fc","value":"IpTrafficClass::Fc","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Fibre Channel [Murali_Rajagopal][RFC6172]\n","sig":null,"attributes":[{"value":"/Fibre Channel [Murali_Rajagopal][RFC6172]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49408,"byte_end":49452,"line_start":320,"line_end":320,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1297},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49504,"byte_end":49517,"line_start":323,"line_end":323,"column_start":5,"column_end":18},"name":"RsvpE2eIgnore","qualname":"::internet::ip::IpTrafficClass::RsvpE2eIgnore","value":"IpTrafficClass::RsvpE2eIgnore","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"RSVP-E2E-IGNORE [RFC3175]\n","sig":null,"attributes":[{"value":"/RSVP-E2E-IGNORE [RFC3175]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49471,"byte_end":49499,"line_start":322,"line_end":322,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1300},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49561,"byte_end":49575,"line_start":325,"line_end":325,"column_start":5,"column_end":19},"name":"MobilityHeader","qualname":"::internet::ip::IpTrafficClass::MobilityHeader","value":"IpTrafficClass::MobilityHeader","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"MobilityHeader [RFC6275]\n","sig":null,"attributes":[{"value":"/MobilityHeader [RFC6275]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49529,"byte_end":49556,"line_start":324,"line_end":324,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1303},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49612,"byte_end":49619,"line_start":327,"line_end":327,"column_start":5,"column_end":12},"name":"UdpLite","qualname":"::internet::ip::IpTrafficClass::UdpLite","value":"IpTrafficClass::UdpLite","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"UDPLite [RFC3828]\n","sig":null,"attributes":[{"value":"/UDPLite [RFC3828]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49587,"byte_end":49607,"line_start":326,"line_end":326,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1306},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49649,"byte_end":49657,"line_start":329,"line_end":329,"column_start":5,"column_end":13},"name":"MplsInIp","qualname":"::internet::ip::IpTrafficClass::MplsInIp","value":"IpTrafficClass::MplsInIp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":" [RFC4023]\n","sig":null,"attributes":[{"value":"/ [RFC4023]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49631,"byte_end":49644,"line_start":328,"line_end":328,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1309},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49702,"byte_end":49707,"line_start":331,"line_end":331,"column_start":5,"column_end":10},"name":"Manet","qualname":"::internet::ip::IpTrafficClass::Manet","value":"IpTrafficClass::Manet","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"MANET Protocols [RFC5498]\n","sig":null,"attributes":[{"value":"/MANET Protocols [RFC5498]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49669,"byte_end":49697,"line_start":330,"line_end":330,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1312},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49759,"byte_end":49762,"line_start":333,"line_end":333,"column_start":5,"column_end":8},"name":"Hip","qualname":"::internet::ip::IpTrafficClass::Hip","value":"IpTrafficClass::Hip","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Host Identity Protocol [RFC7401]\n","sig":null,"attributes":[{"value":"/Host Identity Protocol [RFC7401]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49719,"byte_end":49754,"line_start":332,"line_end":332,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1315},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49806,"byte_end":49811,"line_start":335,"line_end":335,"column_start":5,"column_end":10},"name":"Shim6","qualname":"::internet::ip::IpTrafficClass::Shim6","value":"IpTrafficClass::Shim6","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Shim6 Protocol [RFC5533]\n","sig":null,"attributes":[{"value":"/Shim6 Protocol [RFC5533]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49774,"byte_end":49801,"line_start":334,"line_end":334,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1318},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49879,"byte_end":49883,"line_start":337,"line_end":337,"column_start":5,"column_end":9},"name":"Wesp","qualname":"::internet::ip::IpTrafficClass::Wesp","value":"IpTrafficClass::Wesp","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Wrapped Encapsulating Security Payload [RFC5840]\n","sig":null,"attributes":[{"value":"/Wrapped Encapsulating Security Payload [RFC5840]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49823,"byte_end":49874,"line_start":336,"line_end":336,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1321},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49938,"byte_end":49942,"line_start":339,"line_end":339,"column_start":5,"column_end":9},"name":"Rohc","qualname":"::internet::ip::IpTrafficClass::Rohc","value":"IpTrafficClass::Rohc","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Robust Header Compression [RFC5858]\n","sig":null,"attributes":[{"value":"/Robust Header Compression [RFC5858]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49895,"byte_end":49933,"line_start":338,"line_end":338,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1324},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49997,"byte_end":50020,"line_start":341,"line_end":341,"column_start":5,"column_end":28},"name":"ExperimentalAndTesting0","qualname":"::internet::ip::IpTrafficClass::ExperimentalAndTesting0","value":"IpTrafficClass::ExperimentalAndTesting0","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Use for experimentation and testing\n","sig":null,"attributes":[{"value":"/Use for experimentation and testing","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":49954,"byte_end":49992,"line_start":340,"line_end":340,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1327},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":50075,"byte_end":50098,"line_start":343,"line_end":343,"column_start":5,"column_end":28},"name":"ExperimentalAndTesting1","qualname":"::internet::ip::IpTrafficClass::ExperimentalAndTesting1","value":"IpTrafficClass::ExperimentalAndTesting1","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"Use for experimentation and testing\n","sig":null,"attributes":[{"value":"/Use for experimentation and testing","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":50032,"byte_end":50070,"line_start":342,"line_end":342,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":897},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40174,"byte_end":40188,"line_start":55,"line_end":55,"column_start":10,"column_end":24},"name":"IpTrafficClass","qualname":"::internet::ip::IpTrafficClass","value":"pub enum IpTrafficClass {\n\n    ///IPv6 Hop-by-Hop Option [RFC8200]\n    IPv6HeaderHopByHop = ,\n\n    ///Internet Control Message [RFC792]\n    Icmp = ,\n\n    ///Internet Group Management [RFC1112]\n    Igmp = ,\n\n    ///Gateway-to-Gateway [RFC823]\n    Ggp = ,\n\n    ///IPv4 encapsulation [RFC2003]\n    IPv4 = ,\n\n    ///Stream [RFC1190][RFC1819]\n    Stream = ,\n\n    ///Transmission Control [RFC793]\n    Tcp = ,\n\n    ///CBT [Tony_Ballardie]\n    Cbt = ,\n\n    ///Exterior Gateway Protocol [RFC888][David_Mills]\n    Egp = ,\n\n    ///any private interior gateway (used by Cisco for their IGRP) [Internet_Assigned_Numbers_Authority]\n    Igp = ,\n\n    ///BBN RCC Monitoring [Steve_Chipman]\n    BbnRccMon = ,\n\n    ///Network Voice Protocol [RFC741][Steve_Casner]\n    NvpII = ,\n\n    ///PUP\n    Pup = ,\n\n    ///ARGUS (deprecated) [Robert_W_Scheifler]\n    Argus = ,\n\n    ///EMCON [<mystery contact>]\n    Emcon = ,\n\n    ///Cross Net Debugger [Haverty, J., \"XNET Formats for Internet Protocol Version 4\", IEN 158, October 1980.][Jack_Haverty]\n    Xnet = ,\n\n    ///Chaos [J_Noel_Chiappa]\n    Chaos = ,\n\n    ///User Datagram [RFC768][Jon_Postel]\n    Udp = ,\n\n    ///Multiplexing [Cohen, D. and J. Postel, \"Multiplexing Protocol\", IEN 90, USC/Information Sciences Institute, May 1979.][Jon_Postel]\n    Mux = ,\n\n    ///DCN Measurement Subsystems [David_Mills]\n    DcnMeas = ,\n\n    ///Host Monitoring [RFC869][Bob_Hinden]\n    Hmp = ,\n\n    ///Packet Radio Measurement [Zaw_Sing_Su]\n    Prm = ,\n\n    ///XEROX NS IDP\n    XnsIdp = ,\n\n    ///Trunk-1 [Barry_Boehm]\n    Trunk1 = ,\n\n    ///Trunk-2 [Barry_Boehm]\n    Trunk2 = ,\n\n    ///Leaf-1 [Barry_Boehm]\n    Leaf1 = ,\n\n    ///Leaf-2 [Barry_Boehm]\n    Leaf2 = ,\n\n    ///Reliable Data Protocol [RFC908][Bob_Hinden]\n    Rdp = ,\n\n    ///Internet Reliable Transaction [RFC938][Trudy_Miller]\n    Irtp = ,\n\n    ///ISO Transport Protocol Class 4 [RFC905][<mystery contact>]\n    IsoTp4 = ,\n\n    ///Bulk Data Transfer Protocol [RFC969][David_Clark]\n    NetBlt = ,\n\n    ///MFE Network Services Protocol [Shuttleworth, B., \"A Documentary of MFENet, a National Computer Network\", UCRL-52317, Lawrence Livermore Labs, Livermore, California, June 1977.][Barry_Howard]\n    MfeNsp = ,\n\n    ///MERIT Internodal Protocol [Hans_Werner_Braun]\n    MeritInp = ,\n\n    ///Datagram Congestion Control Protocol [RFC4340]\n    Dccp = ,\n\n    ///Third Party Connect Protocol [Stuart_A_Friedberg]\n    ThirdPartyConnectProtocol = ,\n\n    ///Inter-Domain Policy Routing Protocol [Martha_Steenstrup]\n    Idpr = ,\n\n    ///XTP [Greg_Chesson]\n    Xtp = ,\n\n    ///Datagram Delivery Protocol [Wesley_Craig]\n    Ddp = ,\n\n    ///IDPR Control Message Transport Proto [Martha_Steenstrup]\n    IdprCmtp = ,\n\n    ///TP++ Transport Protocol [Dirk_Fromhein]\n    TpPlusPlus = ,\n\n    ///IL Transport Protocol [Dave_Presotto]\n    Il = ,\n\n    ///IPv6 encapsulation [RFC2473]\n    Ipv6 = ,\n\n    ///Source Demand Routing Protocol [Deborah_Estrin]\n    Sdrp = ,\n\n    ///Routing Header for IPv6 [Steve_Deering]\n    IPv6RouteHeader = ,\n\n    ///Fragment Header for IPv6 [Steve_Deering]\n    IPv6FragmentationHeader = ,\n\n    ///Inter-Domain Routing Protocol [Sue_Hares]\n    Idrp = ,\n\n    ///Reservation Protocol [RFC2205][RFC3209][Bob_Braden]\n    Rsvp = ,\n\n    ///Generic Routing Encapsulation [RFC2784][Tony_Li]\n    Gre = ,\n\n    ///Dynamic Source Routing Protocol [RFC4728]\n    Dsr = ,\n\n    ///BNA [Gary Salamon]\n    Bna = ,\n\n    ///Encap Security Payload [RFC4303]\n    IPv6EncapSecurityPayload = ,\n\n    ///Authentication Header [RFC4302]\n    IPv6AuthenticationHeader = ,\n\n    ///Integrated Net Layer Security  TUBA [K_Robert_Glenn]\n    Inlsp = ,\n\n    ///IP with Encryption (deprecated) [John_Ioannidis]\n    Swipe = ,\n\n    ///NBMA Address Resolution Protocol [RFC1735]\n    Narp = ,\n\n    ///IP Mobility [Charlie_Perkins]\n    Mobile = ,\n\n    ///Transport Layer Security Protocol using Kryptonet key management [Christer_Oberg]\n    Tlsp = ,\n\n    ///SKIP [Tom_Markson]\n    Skip = ,\n\n    ///ICMP for IPv6 [RFC8200]\n    IPv6Icmp = ,\n\n    ///No Next Header for IPv6 [RFC8200]\n    IPv6NoNextHeader = ,\n\n    ///Destination Options for IPv6 [RFC8200]\n    IPv6DestinationOptions = ,\n\n    ///any host internal protocol [Internet_Assigned_Numbers_Authority]\n    AnyHostInternalProtocol = ,\n\n    ///CFTP [Forsdick, H., \"CFTP\", Network Message, Bolt Beranek and Newman, January 1982.][Harry_Forsdick]\n    Cftp = ,\n\n    ///any local network [Internet_Assigned_Numbers_Authority]\n    AnyLocalNetwork = ,\n\n    ///SATNET and Backroom EXPAK [Steven_Blumenthal]\n    SatExpak = ,\n\n    ///Kryptolan [Paul Liu]\n    Krytolan = ,\n\n    ///MIT Remote Virtual Disk Protocol [Michael_Greenwald]\n    Rvd = ,\n\n    ///Internet Pluribus Packet Core [Steven_Blumenthal]\n    Ippc = ,\n\n    ///any distributed file system [Internet_Assigned_Numbers_Authority]\n    AnyDistributedFileSystem = ,\n\n    ///SATNET Monitoring [Steven_Blumenthal]\n    SatMon = ,\n\n    ///VISA Protocol [Gene_Tsudik]\n    Visa = ,\n\n    ///Internet Packet Core Utility [Steven_Blumenthal]\n    Ipcv = ,\n\n    ///Computer Protocol Network Executive [David Mittnacht]\n    Cpnx = ,\n\n    ///Computer Protocol Heart Beat [David Mittnacht]\n    Cphb = ,\n\n    ///Wang Span Network [Victor Dafoulas]\n    Wsn = ,\n\n    ///Packet Video Protocol [Steve_Casner]\n    Pvp = ,\n\n    ///Backroom SATNET Monitoring [Steven_Blumenthal]\n    BrSatMon = ,\n\n    ///SUN ND PROTOCOL-Temporary [William_Melohn]\n    SunNd = ,\n\n    ///WIDEBAND Monitoring [Steven_Blumenthal]\n    WbMon = ,\n\n    ///WIDEBAND EXPAK [Steven_Blumenthal]\n    WbExpak = ,\n\n    ///ISO Internet Protocol [Marshall_T_Rose]\n    IsoIp = ,\n\n    ///VMTP [Dave_Cheriton]\n    Vmtp = ,\n\n    ///SECURE-VMTP [Dave_Cheriton]\n    SecureVmtp = ,\n\n    ///VINES [Brian Horn]\n    Vines = ,\n\n    ///Transaction Transport Protocol or Internet Protocol Traffic Manager [Jim_Stevens]\n    TtpOrIptm = ,\n\n    ///NSFNET-IGP [Hans_Werner_Braun]\n    NsfnetIgp = ,\n\n    ///Dissimilar Gateway Protocol [M/A-COM Government Systems, \"Dissimilar Gateway Protocol Specification, Draft Version\", Contract no. CS901145, November 16, 1987.][Mike_Little]\n    Dgp = ,\n\n    ///TCF [Guillermo_A_Loyola]\n    Tcf = ,\n\n    ///EIGRP [RFC7868]\n    Eigrp = ,\n\n    ///OSPFIGP [RFC1583][RFC2328][RFC5340][John_Moy]\n    Ospfigp = ,\n\n    ///Sprite RPC Protocol [Welch, B., \"The Sprite Remote Procedure Call System\", Technical Report, UCB/Computer Science Dept., 86/302, University of California at Berkeley, June 1986.][Bruce Willins]\n    SpriteRpc = ,\n\n    ///Locus Address Resolution Protocol [Brian Horn]\n    Larp = ,\n\n    ///Multicast Transport Protocol [Susie_Armstrong]\n    Mtp = ,\n\n    ///AX.25 Frames [Brian_Kantor]\n    Ax25 = ,\n\n    ///IP-within-IP Encapsulation Protocol [John_Ioannidis]\n    Ipip = ,\n\n    ///Mobile Internetworking Control Pro. (deprecated) [John_Ioannidis]\n    Micp = ,\n\n    ///Semaphore Communications Sec. Pro. [Howard_Hart]\n    SccSp = ,\n\n    ///Ethernet-within-IP Encapsulation [RFC3378]\n    EtherIp = ,\n\n    ///Encapsulation Header [RFC1241][Robert_Woodburn]\n    Encap = ,\n\n    ///GMTP [[RXB5]]\n    Gmtp = ,\n\n    ///Ipsilon Flow Management Protocol [Bob_Hinden][November 1995, 1997.]\n    Ifmp = ,\n\n    ///PNNI over IP [Ross_Callon]\n    Pnni = ,\n\n    ///Protocol Independent Multicast [RFC7761][Dino_Farinacci]\n    Pim = ,\n\n    ///ARIS [Nancy_Feldman]\n    Aris = ,\n\n    ///SCPS [Robert_Durst]\n    Scps = ,\n\n    ///QNX [Michael_Hunter]\n    Qnx = ,\n\n    ///Active Networks [Bob_Braden]\n    ActiveNetworks = ,\n\n    ///IP Payload Compression Protocol [RFC2393]\n    IpComp = ,\n\n    ///Sitara Networks Protocol [Manickam_R_Sridhar]\n    SitraNetworksProtocol = ,\n\n    ///Compaq Peer Protocol [Victor_Volpe]\n    CompaqPeer = ,\n\n    ///IPX in IP [CJ_Lee]\n    IpxInIp = ,\n\n    ///Virtual Router Redundancy Protocol [RFC5798]\n    Vrrp = ,\n\n    ///PGM Reliable Transport Protocol [Tony_Speakman]\n    Pgm = ,\n\n    ///any 0-hop protocol [Internet_Assigned_Numbers_Authority]\n    AnyZeroHopProtocol = ,\n\n    ///Layer Two Tunneling Protocol [RFC3931][Bernard_Aboba]\n    Layer2TunnelingProtocol = ,\n\n    ///D-II Data Exchange (DDX) [John_Worley]\n    Ddx = ,\n\n    ///Interactive Agent Transfer Protocol [John_Murphy]\n    Iatp = ,\n\n    ///Schedule Transfer Protocol [Jean_Michel_Pittet]\n    Stp = ,\n\n    ///SpectraLink Radio Protocol [Mark_Hamilton]\n    Srp = ,\n\n    ///UTI [Peter_Lothberg]\n    Uti = ,\n\n    ///Simple Message Protocol [Leif_Ekblad]\n    SimpleMessageProtocol = ,\n\n    ///Simple Multicast Protocol (deprecated) [Jon_Crowcroft][draft-perlman-simple-multicast]\n    Sm = ,\n\n    ///Performance Transparency Protocol [Michael_Welzl]\n    Ptp = ,\n\n    ///ISIS over IPv4 [Tony_Przygienda]\n    IsisOverIpv4 = ,\n\n    ///FIRE [Criag_Partridge]\n    Fire = ,\n\n    ///Combat Radio Transport Protocol [Robert_Sautter]\n    Crtp = ,\n\n    ///Combat Radio User Datagram [Robert_Sautter]\n    Crudp = ,\n\n    ///SSCOPMCE [Kurt_Waber]\n    Sscopmce = ,\n\n    ///IPLT [[Hollbach]]\n    Iplt = ,\n\n    ///Secure Packet Shield [Bill_McIntosh]\n    Sps = ,\n\n    ///Private IP Encapsulation within IP [Bernhard_Petri]\n    Pipe = ,\n\n    ///Stream Control Transmission Protocol [Randall_R_Stewart]\n    Sctp = ,\n\n    ///Fibre Channel [Murali_Rajagopal][RFC6172]\n    Fc = ,\n\n    ///RSVP-E2E-IGNORE [RFC3175]\n    RsvpE2eIgnore = ,\n\n    ///MobilityHeader [RFC6275]\n    MobilityHeader = ,\n\n    ///UDPLite [RFC3828]\n    UdpLite = ,\n\n    /// [RFC4023]\n    MplsInIp = ,\n\n    ///MANET Protocols [RFC5498]\n    Manet = ,\n\n    ///Host Identity Protocol [RFC7401]\n    Hip = ,\n\n    ///Shim6 Protocol [RFC5533]\n    Shim6 = ,\n\n    ///Wrapped Encapsulating Security Payload [RFC5840]\n    Wesp = ,\n\n    ///Robust Header Compression [RFC5858]\n    Rohc = ,\n\n    ///Use for experimentation and testing\n    ExperimentalAndTesting0 = ,\n\n    ///Use for experimentation and testing\n    ExperimentalAndTesting1 = ,\n}","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":901},{"krate":0,"index":904},{"krate":0,"index":907},{"krate":0,"index":910},{"krate":0,"index":913},{"krate":0,"index":916},{"krate":0,"index":919},{"krate":0,"index":922},{"krate":0,"index":925},{"krate":0,"index":928},{"krate":0,"index":931},{"krate":0,"index":934},{"krate":0,"index":937},{"krate":0,"index":940},{"krate":0,"index":943},{"krate":0,"index":946},{"krate":0,"index":949},{"krate":0,"index":952},{"krate":0,"index":955},{"krate":0,"index":958},{"krate":0,"index":961},{"krate":0,"index":964},{"krate":0,"index":967},{"krate":0,"index":970},{"krate":0,"index":973},{"krate":0,"index":976},{"krate":0,"index":979},{"krate":0,"index":982},{"krate":0,"index":985},{"krate":0,"index":988},{"krate":0,"index":991},{"krate":0,"index":994},{"krate":0,"index":997},{"krate":0,"index":1000},{"krate":0,"index":1003},{"krate":0,"index":1006},{"krate":0,"index":1009},{"krate":0,"index":1012},{"krate":0,"index":1015},{"krate":0,"index":1018},{"krate":0,"index":1021},{"krate":0,"index":1024},{"krate":0,"index":1027},{"krate":0,"index":1030},{"krate":0,"index":1033},{"krate":0,"index":1036},{"krate":0,"index":1039},{"krate":0,"index":1042},{"krate":0,"index":1045},{"krate":0,"index":1048},{"krate":0,"index":1051},{"krate":0,"index":1054},{"krate":0,"index":1057},{"krate":0,"index":1060},{"krate":0,"index":1063},{"krate":0,"index":1066},{"krate":0,"index":1069},{"krate":0,"index":1072},{"krate":0,"index":1075},{"krate":0,"index":1078},{"krate":0,"index":1081},{"krate":0,"index":1084},{"krate":0,"index":1087},{"krate":0,"index":1090},{"krate":0,"index":1093},{"krate":0,"index":1096},{"krate":0,"index":1099},{"krate":0,"index":1102},{"krate":0,"index":1105},{"krate":0,"index":1108},{"krate":0,"index":1111},{"krate":0,"index":1114},{"krate":0,"index":1117},{"krate":0,"index":1120},{"krate":0,"index":1123},{"krate":0,"index":1126},{"krate":0,"index":1129},{"krate":0,"index":1132},{"krate":0,"index":1135},{"krate":0,"index":1138},{"krate":0,"index":1141},{"krate":0,"index":1144},{"krate":0,"index":1147},{"krate":0,"index":1150},{"krate":0,"index":1153},{"krate":0,"index":1156},{"krate":0,"index":1159},{"krate":0,"index":1162},{"krate":0,"index":1165},{"krate":0,"index":1168},{"krate":0,"index":1171},{"krate":0,"index":1174},{"krate":0,"index":1177},{"krate":0,"index":1180},{"krate":0,"index":1183},{"krate":0,"index":1186},{"krate":0,"index":1189},{"krate":0,"index":1192},{"krate":0,"index":1195},{"krate":0,"index":1198},{"krate":0,"index":1201},{"krate":0,"index":1204},{"krate":0,"index":1207},{"krate":0,"index":1210},{"krate":0,"index":1213},{"krate":0,"index":1216},{"krate":0,"index":1219},{"krate":0,"index":1222},{"krate":0,"index":1225},{"krate":0,"index":1228},{"krate":0,"index":1231},{"krate":0,"index":1234},{"krate":0,"index":1237},{"krate":0,"index":1240},{"krate":0,"index":1243},{"krate":0,"index":1246},{"krate":0,"index":1249},{"krate":0,"index":1252},{"krate":0,"index":1255},{"krate":0,"index":1258},{"krate":0,"index":1261},{"krate":0,"index":1264},{"krate":0,"index":1267},{"krate":0,"index":1270},{"krate":0,"index":1273},{"krate":0,"index":1276},{"krate":0,"index":1279},{"krate":0,"index":1282},{"krate":0,"index":1285},{"krate":0,"index":1288},{"krate":0,"index":1291},{"krate":0,"index":1294},{"krate":0,"index":1297},{"krate":0,"index":1300},{"krate":0,"index":1303},{"krate":0,"index":1306},{"krate":0,"index":1309},{"krate":0,"index":1312},{"krate":0,"index":1315},{"krate":0,"index":1318},{"krate":0,"index":1321},{"krate":0,"index":1324},{"krate":0,"index":1327}],"decl_id":null,"docs":"Identifiers for the traffic_class field in ipv6 headers and protocol field in ipv4 headers.\n","sig":null,"attributes":[{"value":"/Identifiers for the traffic_class field in ipv6 headers and protocol field in ipv4 headers.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":40031,"byte_end":40125,"line_start":53,"line_end":53,"column_start":1,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":50229,"byte_end":50253,"line_start":349,"line_end":349,"column_start":12,"column_end":36},"name":"is_ipv6_ext_header_value","qualname":"<IpTrafficClass>::is_ipv6_ext_header_value","value":"pub fn is_ipv6_ext_header_value(u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns true if the given id identifies an IPV6 extension header traffic class.\n","sig":null,"attributes":[{"value":"/Returns true if the given id identifies an IPV6 extension header traffic class.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":50135,"byte_end":50217,"line_start":348,"line_end":348,"column_start":5,"column_end":87}}]},{"kind":"Struct","id":{"krate":0,"index":1340},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":51405,"byte_end":51415,"line_start":11,"line_end":11,"column_start":12,"column_end":22},"name":"Ipv4Header","qualname":"::internet::ipv4::Ipv4Header","value":"Ipv4Header { differentiated_services_code_point, explicit_congestion_notification, payload_len, identification, dont_fragment, more_fragments, fragments_offset, time_to_live, protocol, header_checksum, source, destination }","parent":null,"children":[{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1353},{"krate":0,"index":1355},{"krate":0,"index":1356}],"decl_id":null,"docs":"IPv4 header without options.\n","sig":null,"attributes":[{"value":"/IPv4 header without options.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":51345,"byte_end":51376,"line_start":9,"line_end":9,"column_start":1,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":1341},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":51426,"byte_end":51460,"line_start":12,"line_end":12,"column_start":9,"column_end":43},"name":"differentiated_services_code_point","qualname":"::internet::ipv4::Ipv4Header::differentiated_services_code_point","value":"u8","parent":{"krate":0,"index":1340},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1342},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":51474,"byte_end":51506,"line_start":13,"line_end":13,"column_start":9,"column_end":41},"name":"explicit_congestion_notification","qualname":"::internet::ipv4::Ipv4Header::explicit_congestion_notification","value":"u8","parent":{"krate":0,"index":1340},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1343},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":51864,"byte_end":51875,"line_start":19,"line_end":19,"column_start":9,"column_end":20},"name":"payload_len","qualname":"::internet::ipv4::Ipv4Header::payload_len","value":"u16","parent":{"krate":0,"index":1340},"children":[],"decl_id":null,"docs":"Length of the payload of the ipv4 packet in bytes (does not contain the options).","sig":null,"attributes":[{"value":"/Length of the payload of the ipv4 packet in bytes (does not contain the options).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":51516,"byte_end":51600,"line_start":14,"line_end":14,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":51605,"byte_end":51608,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/This field does not directly exist in an ipv4 header but instead is decoded from","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":51613,"byte_end":51696,"line_start":16,"line_end":16,"column_start":5,"column_end":88}},{"value":"/ & encoded to the total_size field together with the options length (using the ihl).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":51701,"byte_end":51788,"line_start":17,"line_end":17,"column_start":5,"column_end":92}},{"value":"/If the total_length field in a ipv4 header is smaller then ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":51793,"byte_end":51855,"line_start":18,"line_end":18,"column_start":5,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":1344},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":51890,"byte_end":51904,"line_start":20,"line_end":20,"column_start":9,"column_end":23},"name":"identification","qualname":"::internet::ipv4::Ipv4Header::identification","value":"u16","parent":{"krate":0,"index":1340},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1345},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":51919,"byte_end":51932,"line_start":21,"line_end":21,"column_start":9,"column_end":22},"name":"dont_fragment","qualname":"::internet::ipv4::Ipv4Header::dont_fragment","value":"bool","parent":{"krate":0,"index":1340},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1346},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":51948,"byte_end":51962,"line_start":22,"line_end":22,"column_start":9,"column_end":23},"name":"more_fragments","qualname":"::internet::ipv4::Ipv4Header::more_fragments","value":"bool","parent":{"krate":0,"index":1340},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1347},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":51978,"byte_end":51994,"line_start":23,"line_end":23,"column_start":9,"column_end":25},"name":"fragments_offset","qualname":"::internet::ipv4::Ipv4Header::fragments_offset","value":"u16","parent":{"krate":0,"index":1340},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1348},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":52009,"byte_end":52021,"line_start":24,"line_end":24,"column_start":9,"column_end":21},"name":"time_to_live","qualname":"::internet::ipv4::Ipv4Header::time_to_live","value":"u8","parent":{"krate":0,"index":1340},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1349},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":52035,"byte_end":52043,"line_start":25,"line_end":25,"column_start":9,"column_end":17},"name":"protocol","qualname":"::internet::ipv4::Ipv4Header::protocol","value":"u8","parent":{"krate":0,"index":1340},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1350},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":52057,"byte_end":52072,"line_start":26,"line_end":26,"column_start":9,"column_end":24},"name":"header_checksum","qualname":"::internet::ipv4::Ipv4Header::header_checksum","value":"u16","parent":{"krate":0,"index":1340},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1351},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":52087,"byte_end":52093,"line_start":27,"line_end":27,"column_start":9,"column_end":15},"name":"source","qualname":"::internet::ipv4::Ipv4Header::source","value":"[u8; 4]","parent":{"krate":0,"index":1340},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1353},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":52111,"byte_end":52122,"line_start":28,"line_end":28,"column_start":9,"column_end":20},"name":"destination","qualname":"::internet::ipv4::Ipv4Header::destination","value":"[u8; 4]","parent":{"krate":0,"index":1340},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":52538,"byte_end":52541,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<Ipv4Header>::new","value":"pub fn new(u16, u8, IpTrafficClass, [u8; ], [u8; ]) -> Ipv4Header","parent":null,"children":[],"decl_id":null,"docs":"Constructs an Ipv4Header with standard values for non specified values.\n","sig":null,"attributes":[{"value":"/Constructs an Ipv4Header with standard values for non specified values.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":52452,"byte_end":52526,"line_start":42,"line_end":42,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":53372,"byte_end":53375,"line_start":65,"line_end":65,"column_start":12,"column_end":15},"name":"ihl","qualname":"<Ipv4Header>::ihl","value":"pub fn ihl(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Length of the header in 4 bytes (often also called IHL - Internet Header Lenght). ","sig":null,"attributes":[{"value":"/Length of the header in 4 bytes (often also called IHL - Internet Header Lenght). ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":53160,"byte_end":53245,"line_start":62,"line_end":62,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":53250,"byte_end":53253,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/The minimum allowed length of a header is 5 (= 20 bytes) and the maximum length is 15 (= 60 bytes).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":53258,"byte_end":53360,"line_start":64,"line_end":64,"column_start":5,"column_end":107}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":53534,"byte_end":53541,"line_start":70,"line_end":70,"column_start":12,"column_end":19},"name":"options","qualname":"<Ipv4Header>::options","value":"pub fn options(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns a slice to the options part of the header (empty if no options are present).\n","sig":null,"attributes":[{"value":"/Returns a slice to the options part of the header (empty if no options are present).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":53435,"byte_end":53522,"line_start":69,"line_end":69,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":53697,"byte_end":53707,"line_start":75,"line_end":75,"column_start":12,"column_end":22},"name":"header_len","qualname":"<Ipv4Header>::header_len","value":"pub fn header_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"Length of the header (includes options) in bytes.\n","sig":null,"attributes":[{"value":"/Length of the header (includes options) in bytes.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":53633,"byte_end":53685,"line_start":74,"line_end":74,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":53878,"byte_end":53887,"line_start":80,"line_end":80,"column_start":12,"column_end":21},"name":"total_len","qualname":"<Ipv4Header>::total_len","value":"pub fn total_len(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Returns the total length of the header + payload in bytes.\n","sig":null,"attributes":[{"value":"/Returns the total length of the header + payload in bytes.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":53805,"byte_end":53866,"line_start":79,"line_end":79,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":54108,"byte_end":54123,"line_start":85,"line_end":85,"column_start":12,"column_end":27},"name":"set_payload_len","qualname":"<Ipv4Header>::set_payload_len","value":"pub fn set_payload_len(&mut Self, usize) -> Result<(), ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Sets the payload length if the value is not too big. Otherwise an error is returned.\n","sig":null,"attributes":[{"value":"/Sets the payload length if the value is not too big. Otherwise an error is returned.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":54009,"byte_end":54096,"line_start":84,"line_end":84,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":54506,"byte_end":54521,"line_start":96,"line_end":96,"column_start":12,"column_end":27},"name":"max_payload_len","qualname":"<Ipv4Header>::max_payload_len","value":"pub fn max_payload_len(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Returns the maximum payload size based on the current options size.\n","sig":null,"attributes":[{"value":"/Returns the maximum payload size based on the current options size.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":54424,"byte_end":54494,"line_start":95,"line_end":95,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":54907,"byte_end":54918,"line_start":104,"line_end":104,"column_start":12,"column_end":23},"name":"set_options","qualname":"<Ipv4Header>::set_options","value":"pub fn set_options(&mut Self, &[u8]) -> Result<(), ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Sets the options & header_length based on the provided length.\nThe length of the given slice must be a multiple of 4 and maximum 40 bytes.\nIf the length is not fullfilling these constraints, no data is set and\nan error is returned.\n","sig":null,"attributes":[{"value":"/Sets the options & header_length based on the provided length.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":54640,"byte_end":54705,"line_start":100,"line_end":100,"column_start":5,"column_end":70}},{"value":"/The length of the given slice must be a multiple of 4 and maximum 40 bytes.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":54710,"byte_end":54788,"line_start":101,"line_end":101,"column_start":5,"column_end":83}},{"value":"/If the length is not fullfilling these constraints, no data is set and","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":54793,"byte_end":54866,"line_start":102,"line_end":102,"column_start":5,"column_end":78}},{"value":"/an error is returned.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":54871,"byte_end":54895,"line_start":103,"line_end":103,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":55560,"byte_end":55575,"line_start":123,"line_end":123,"column_start":12,"column_end":27},"name":"read_from_slice","qualname":"<Ipv4Header>::read_from_slice","value":"pub fn read_from_slice(&[u8]) -> Result<(Ipv4Header, &[u8]), ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Read an Ipv4Header from a slice and return the header & unused parts of the slice.\n","sig":null,"attributes":[{"value":"/Read an Ipv4Header from a slice and return the header & unused parts of the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":55463,"byte_end":55548,"line_start":122,"line_end":122,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":55888,"byte_end":55892,"line_start":133,"line_end":133,"column_start":12,"column_end":16},"name":"read","qualname":"<Ipv4Header>::read","value":"pub fn read<T: io::Read + io::Seek + Sized>(&mut T)\n-> Result<Ipv4Header, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Reads an IPv4 header from the current position.\n","sig":null,"attributes":[{"value":"/Reads an IPv4 header from the current position.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":55826,"byte_end":55876,"line_start":132,"line_end":132,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":56317,"byte_end":56337,"line_start":143,"line_end":143,"column_start":12,"column_end":32},"name":"read_without_version","qualname":"<Ipv4Header>::read_without_version","value":"pub fn read_without_version<T: io::Read + io::Seek + Sized>(&mut T, u8)\n-> Result<Ipv4Header, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Reads an IPv4 header assuming the version & ihl field have already been read.\n","sig":null,"attributes":[{"value":"/Reads an IPv4 header assuming the version & ihl field have already been read.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":56225,"byte_end":56305,"line_start":142,"line_end":142,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":59031,"byte_end":59043,"line_start":212,"line_end":212,"column_start":12,"column_end":24},"name":"check_ranges","qualname":"<Ipv4Header>::check_ranges","value":"pub fn check_ranges(&Self) -> Result<(), ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Checks if the values in this header are valid values for an ipv4 header.","sig":null,"attributes":[{"value":"/Checks if the values in this header are valid values for an ipv4 header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":58603,"byte_end":58678,"line_start":205,"line_end":205,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":58683,"byte_end":58686,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/Specifically it will be checked, that:","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":58691,"byte_end":58732,"line_start":207,"line_end":207,"column_start":5,"column_end":46}},{"value":"/ * payload_len + options_len is not too big to be encoded in the total_size header field","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":58737,"byte_end":58828,"line_start":208,"line_end":208,"column_start":5,"column_end":96}},{"value":"/ * differentiated_services_code_point is not greater then 0x3f","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":58833,"byte_end":58898,"line_start":209,"line_end":209,"column_start":5,"column_end":70}},{"value":"/ * explicit_congestion_notification is not greater then 0x3","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":58903,"byte_end":58965,"line_start":210,"line_end":210,"column_start":5,"column_end":67}},{"value":"/ * fragments_offset is not greater then 0x1fff","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":58970,"byte_end":59019,"line_start":211,"line_end":211,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":59625,"byte_end":59630,"line_start":225,"line_end":225,"column_start":12,"column_end":17},"name":"write","qualname":"<Ipv4Header>::write","value":"pub fn write<T: io::Write + Sized>(&Self, &mut T) -> Result<(), WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Writes a given IPv4 header to the current position (this method automatically calculates the header length and checksum).\n","sig":null,"attributes":[{"value":"/Writes a given IPv4 header to the current position (this method automatically calculates the header length and checksum).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":59489,"byte_end":59613,"line_start":224,"line_end":224,"column_start":5,"column_end":129}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":60032,"byte_end":60041,"line_start":234,"line_end":234,"column_start":12,"column_end":21},"name":"write_raw","qualname":"<Ipv4Header>::write_raw","value":"pub fn write_raw<T: io::Write + Sized>(&Self, &mut T)\n-> Result<(), WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Writes a given IPv4 header to the current position (this method just writes the specified checksum and does note compute it).\n","sig":null,"attributes":[{"value":"/Writes a given IPv4 header to the current position (this method just writes the specified checksum and does note compute it).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":59892,"byte_end":60020,"line_start":233,"line_end":233,"column_start":5,"column_end":133}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":61891,"byte_end":61911,"line_start":292,"line_end":292,"column_start":12,"column_end":32},"name":"calc_header_checksum","qualname":"<Ipv4Header>::calc_header_checksum","value":"pub fn calc_header_checksum(&Self) -> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculate header checksum of the current ipv4 header.\n","sig":null,"attributes":[{"value":"/Calculate header checksum of the current ipv4 header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":61823,"byte_end":61879,"line_start":291,"line_end":291,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1360},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":66863,"byte_end":66878,"line_start":413,"line_end":413,"column_start":12,"column_end":27},"name":"Ipv4HeaderSlice","qualname":"::internet::ipv4::Ipv4HeaderSlice","value":"Ipv4HeaderSlice {  }","parent":null,"children":[{"krate":0,"index":1362}],"decl_id":null,"docs":"A slice containing an ipv4 header of a network package.\n","sig":null,"attributes":[{"value":"/A slice containing an ipv4 header of a network package.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":66754,"byte_end":66812,"line_start":411,"line_end":411,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":67028,"byte_end":67038,"line_start":420,"line_end":420,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Ipv4HeaderSlice>::from_slice","value":"pub fn from_slice(&'a [u8]) -> Result<Ipv4HeaderSlice, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Creates a slice containing an ipv4 header (including header options).\n","sig":null,"attributes":[{"value":"/Creates a slice containing an ipv4 header (including header options).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":66944,"byte_end":67016,"line_start":419,"line_end":419,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":68390,"byte_end":68395,"line_start":465,"line_end":465,"column_start":12,"column_end":17},"name":"slice","qualname":"<Ipv4HeaderSlice>::slice","value":"pub fn slice(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns the slice containing the ipv4 header\n","sig":null,"attributes":[{"value":"/Returns the slice containing the ipv4 header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":68317,"byte_end":68364,"line_start":463,"line_end":463,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":68369,"byte_end":68378,"line_start":464,"line_end":464,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":68520,"byte_end":68527,"line_start":470,"line_end":470,"column_start":12,"column_end":19},"name":"version","qualname":"<Ipv4HeaderSlice>::version","value":"pub fn version(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"version\" field of the IPv4 header (should be 4).\n","sig":null,"attributes":[{"value":"/Read the \"version\" field of the IPv4 header (should be 4).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":68447,"byte_end":68508,"line_start":469,"line_end":469,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":68686,"byte_end":68689,"line_start":475,"line_end":475,"column_start":12,"column_end":15},"name":"ihl","qualname":"<Ipv4HeaderSlice>::ihl","value":"pub fn ihl(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"ip header length\" (length of the ipv4 header + options in multiples of 4 bytes).\n","sig":null,"attributes":[{"value":"/Read the \"ip header length\" (length of the ipv4 header + options in multiples of 4 bytes).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":68581,"byte_end":68674,"line_start":474,"line_end":474,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":68820,"byte_end":68823,"line_start":480,"line_end":480,"column_start":12,"column_end":15},"name":"dcp","qualname":"<Ipv4HeaderSlice>::dcp","value":"pub fn dcp(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"differentiated_services_code_point\" from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"differentiated_services_code_point\" from the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":68744,"byte_end":68808,"line_start":479,"line_end":479,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":68951,"byte_end":68954,"line_start":485,"line_end":485,"column_start":12,"column_end":15},"name":"ecn","qualname":"<Ipv4HeaderSlice>::ecn","value":"pub fn ecn(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"explicit_congestion_notification\" from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"explicit_congestion_notification\" from the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":68877,"byte_end":68939,"line_start":484,"line_end":484,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":69101,"byte_end":69110,"line_start":490,"line_end":490,"column_start":12,"column_end":21},"name":"total_len","qualname":"<Ipv4HeaderSlice>::total_len","value":"pub fn total_len(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Read the \"total length\" from the slice (total length of ip header + payload).\n","sig":null,"attributes":[{"value":"/Read the \"total length\" from the slice (total length of ip header + payload).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":69009,"byte_end":69089,"line_start":489,"line_end":489,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":69281,"byte_end":69292,"line_start":495,"line_end":495,"column_start":12,"column_end":23},"name":"payload_len","qualname":"<Ipv4HeaderSlice>::payload_len","value":"pub fn payload_len(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Determine the payload length based on the ihl & total_length field of the header.\n","sig":null,"attributes":[{"value":"/Determine the payload length based on the ihl & total_length field of the header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":69185,"byte_end":69269,"line_start":494,"line_end":494,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":69433,"byte_end":69447,"line_start":500,"line_end":500,"column_start":12,"column_end":26},"name":"identification","qualname":"<Ipv4HeaderSlice>::identification","value":"pub fn identification(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Read the \"identification\" field from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"identification\" field from the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":69371,"byte_end":69421,"line_start":499,"line_end":499,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":69582,"byte_end":69595,"line_start":505,"line_end":505,"column_start":12,"column_end":25},"name":"dont_fragment","qualname":"<Ipv4HeaderSlice>::dont_fragment","value":"pub fn dont_fragment(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Read the \"dont fragment\" flag from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"dont fragment\" flag from the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":69522,"byte_end":69570,"line_start":504,"line_end":504,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":69721,"byte_end":69735,"line_start":510,"line_end":510,"column_start":12,"column_end":26},"name":"more_fragments","qualname":"<Ipv4HeaderSlice>::more_fragments","value":"pub fn more_fragments(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Read the \"more fragments\" flag from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"more fragments\" flag from the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":69660,"byte_end":69709,"line_start":509,"line_end":509,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":69863,"byte_end":69879,"line_start":515,"line_end":515,"column_start":12,"column_end":28},"name":"fragments_offset","qualname":"<Ipv4HeaderSlice>::fragments_offset","value":"pub fn fragments_offset(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Read the \"fragment_offset\" field from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"fragment_offset\" field from the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":69800,"byte_end":69851,"line_start":514,"line_end":514,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":70062,"byte_end":70065,"line_start":521,"line_end":521,"column_start":12,"column_end":15},"name":"ttl","qualname":"<Ipv4HeaderSlice>::ttl","value":"pub fn ttl(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"time_to_live\" field from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"time_to_live\" field from the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":70002,"byte_end":70050,"line_start":520,"line_end":520,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":70170,"byte_end":70178,"line_start":526,"line_end":526,"column_start":12,"column_end":20},"name":"protocol","qualname":"<Ipv4HeaderSlice>::protocol","value":"pub fn protocol(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"protocol\" field from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"protocol\" field from the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":70114,"byte_end":70158,"line_start":525,"line_end":525,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":70290,"byte_end":70305,"line_start":531,"line_end":531,"column_start":12,"column_end":27},"name":"header_checksum","qualname":"<Ipv4HeaderSlice>::header_checksum","value":"pub fn header_checksum(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Read the \"header checksum\" field from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"header checksum\" field from the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":70227,"byte_end":70278,"line_start":530,"line_end":530,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":70452,"byte_end":70458,"line_start":536,"line_end":536,"column_start":12,"column_end":18},"name":"source","qualname":"<Ipv4HeaderSlice>::source","value":"pub fn source(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns a slice containing the ipv4 source address.\n","sig":null,"attributes":[{"value":"/Returns a slice containing the ipv4 source address.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":70386,"byte_end":70440,"line_start":535,"line_end":535,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":70589,"byte_end":70600,"line_start":541,"line_end":541,"column_start":12,"column_end":23},"name":"source_addr","qualname":"<Ipv4HeaderSlice>::source_addr","value":"pub fn source_addr(&Self) -> Ipv4Addr","parent":null,"children":[],"decl_id":null,"docs":"Return the ipv4 source address as an std::net::Ipv4Addr\n","sig":null,"attributes":[{"value":"/Return the ipv4 source address as an std::net::Ipv4Addr","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":70519,"byte_end":70577,"line_start":540,"line_end":540,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":70831,"byte_end":70842,"line_start":548,"line_end":548,"column_start":12,"column_end":23},"name":"destination","qualname":"<Ipv4HeaderSlice>::destination","value":"pub fn destination(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns a slice containing the ipv4 source address.\n","sig":null,"attributes":[{"value":"/Returns a slice containing the ipv4 source address.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":70765,"byte_end":70819,"line_start":547,"line_end":547,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":70978,"byte_end":70994,"line_start":553,"line_end":553,"column_start":12,"column_end":28},"name":"destination_addr","qualname":"<Ipv4HeaderSlice>::destination_addr","value":"pub fn destination_addr(&Self) -> Ipv4Addr","parent":null,"children":[],"decl_id":null,"docs":"Return the ipv4 destination address as an std::net::Ipv4Addr\n","sig":null,"attributes":[{"value":"/Return the ipv4 destination address as an std::net::Ipv4Addr","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":70903,"byte_end":70966,"line_start":552,"line_end":552,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":71264,"byte_end":71271,"line_start":560,"line_end":560,"column_start":12,"column_end":19},"name":"options","qualname":"<Ipv4HeaderSlice>::options","value":"pub fn options(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns a slice containing the ipv4 header options (empty when there are no options).\n","sig":null,"attributes":[{"value":"/Returns a slice containing the ipv4 header options (empty when there are no options).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":71164,"byte_end":71252,"line_start":559,"line_end":559,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":71410,"byte_end":71419,"line_start":565,"line_end":565,"column_start":12,"column_end":21},"name":"to_header","qualname":"<Ipv4HeaderSlice>::to_header","value":"pub fn to_header(&Self) -> Ipv4Header","parent":null,"children":[],"decl_id":null,"docs":"Decode all the fields and copy the results to a Ipv4Header struct\n","sig":null,"attributes":[{"value":"/Decode all the fields and copy the results to a Ipv4Header struct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":71330,"byte_end":71398,"line_start":564,"line_end":564,"column_start":5,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":1380},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":72855,"byte_end":72865,"line_start":10,"line_end":10,"column_start":12,"column_end":22},"name":"Ipv6Header","qualname":"::internet::ipv6::Ipv6Header","value":"Ipv6Header { traffic_class, flow_label, payload_length, next_header, hop_limit, source, destination }","parent":null,"children":[{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1383},{"krate":0,"index":1384},{"krate":0,"index":1385},{"krate":0,"index":1386},{"krate":0,"index":1388}],"decl_id":null,"docs":"IPv6 header according to rfc8200.\n","sig":null,"attributes":[{"value":"/IPv6 header according to rfc8200.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":72759,"byte_end":72795,"line_start":8,"line_end":8,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":1381},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":72876,"byte_end":72889,"line_start":11,"line_end":11,"column_start":9,"column_end":22},"name":"traffic_class","qualname":"::internet::ipv6::Ipv6Header::traffic_class","value":"u8","parent":{"krate":0,"index":1380},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1382},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":73073,"byte_end":73083,"line_start":13,"line_end":13,"column_start":9,"column_end":19},"name":"flow_label","qualname":"::internet::ipv6::Ipv6Header::flow_label","value":"u32","parent":{"krate":0,"index":1380},"children":[],"decl_id":null,"docs":"If non 0 serves as a hint to router and switches with multiple outbound paths that these packets should stay on the same path, so that they will not be reordered.\n","sig":null,"attributes":[{"value":"/If non 0 serves as a hint to router and switches with multiple outbound paths that these packets should stay on the same path, so that they will not be reordered.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":72899,"byte_end":73064,"line_start":12,"line_end":12,"column_start":5,"column_end":170}}]},{"kind":"Field","id":{"krate":0,"index":1383},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":73193,"byte_end":73207,"line_start":15,"line_end":15,"column_start":9,"column_end":23},"name":"payload_length","qualname":"::internet::ipv6::Ipv6Header::payload_length","value":"u16","parent":{"krate":0,"index":1380},"children":[],"decl_id":null,"docs":"The length of the payload and extension headers in bytes (0 in case of jumbo payloads).\n","sig":null,"attributes":[{"value":"/The length of the payload and extension headers in bytes (0 in case of jumbo payloads).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":73094,"byte_end":73184,"line_start":14,"line_end":14,"column_start":5,"column_end":95}}]},{"kind":"Field","id":{"krate":0,"index":1384},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":73338,"byte_end":73349,"line_start":17,"line_end":17,"column_start":9,"column_end":20},"name":"next_header","qualname":"::internet::ipv6::Ipv6Header::next_header","value":"u8","parent":{"krate":0,"index":1380},"children":[],"decl_id":null,"docs":"Specifies what the next header or transport layer protocol is (see IpTrafficClass for a definitions of ids).\n","sig":null,"attributes":[{"value":"/Specifies what the next header or transport layer protocol is (see IpTrafficClass for a definitions of ids).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":73218,"byte_end":73329,"line_start":16,"line_end":16,"column_start":5,"column_end":116}}]},{"kind":"Field","id":{"krate":0,"index":1385},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":73433,"byte_end":73442,"line_start":19,"line_end":19,"column_start":9,"column_end":18},"name":"hop_limit","qualname":"::internet::ipv6::Ipv6Header::hop_limit","value":"u8","parent":{"krate":0,"index":1380},"children":[],"decl_id":null,"docs":"The number of hops the packet can take before it is discarded.\n","sig":null,"attributes":[{"value":"/The number of hops the packet can take before it is discarded.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":73359,"byte_end":73424,"line_start":18,"line_end":18,"column_start":5,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":1386},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":73483,"byte_end":73489,"line_start":21,"line_end":21,"column_start":9,"column_end":15},"name":"source","qualname":"::internet::ipv6::Ipv6Header::source","value":"[u8; 16]","parent":{"krate":0,"index":1380},"children":[],"decl_id":null,"docs":"IPv6 source address\n","sig":null,"attributes":[{"value":"/IPv6 source address","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":73452,"byte_end":73474,"line_start":20,"line_end":20,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":1388},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":73540,"byte_end":73551,"line_start":23,"line_end":23,"column_start":9,"column_end":20},"name":"destination","qualname":"::internet::ipv6::Ipv6Header::destination","value":"[u8; 16]","parent":{"krate":0,"index":1380},"children":[],"decl_id":null,"docs":"IPv6 destination address\n","sig":null,"attributes":[{"value":"/IPv6 destination address","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":73504,"byte_end":73531,"line_start":22,"line_end":22,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":73805,"byte_end":73820,"line_start":34,"line_end":34,"column_start":12,"column_end":27},"name":"read_from_slice","qualname":"<Ipv6Header>::read_from_slice","value":"pub fn read_from_slice(&[u8]) -> Result<(Ipv6Header, &[u8]), ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Read an Ipv6Header from a slice and return the header & unused parts of the slice.\n","sig":null,"attributes":[{"value":"/Read an Ipv6Header from a slice and return the header & unused parts of the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":73708,"byte_end":73793,"line_start":33,"line_end":33,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":74088,"byte_end":74092,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"read","qualname":"<Ipv6Header>::read","value":"pub fn read<T: io::Read + io::Seek + Sized>(&mut T)\n-> Result<Ipv6Header, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Reads an IPv6 header from the current position.\n","sig":null,"attributes":[{"value":"/Reads an IPv6 header from the current position.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":74026,"byte_end":74076,"line_start":41,"line_end":41,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":74631,"byte_end":74651,"line_start":55,"line_end":55,"column_start":12,"column_end":32},"name":"read_without_version","qualname":"<Ipv6Header>::read_without_version","value":"pub fn read_without_version<T: io::Read + io::Seek + Sized>(&mut T, u8)\n-> Result<Ipv6Header, io::Error>","parent":null,"children":[],"decl_id":null,"docs":"Reads an IPv6 header assuming the version & flow_label field have already been read.\n","sig":null,"attributes":[{"value":"/Reads an IPv6 header assuming the version & flow_label field have already been read.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":74532,"byte_end":74619,"line_start":54,"line_end":54,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":75976,"byte_end":76006,"line_start":90,"line_end":90,"column_start":12,"column_end":42},"name":"skip_header_extension_in_slice","qualname":"<Ipv6Header>::skip_header_extension_in_slice","value":"pub fn skip_header_extension_in_slice(&[u8], u8)\n-> Result<(u8, &[u8]), ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Takes a slice and skips an ipv6 header extensions and returns the next_header id & the slice past the header.\nNOTE: There must be a ipv6 header extension id given as a traffic_class.\n","sig":null,"attributes":[{"value":"/Takes a slice and skips an ipv6 header extensions and returns the next_header id & the slice past the header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":75772,"byte_end":75884,"line_start":88,"line_end":88,"column_start":5,"column_end":117}},{"value":"/NOTE: There must be a ipv6 header extension id given as a traffic_class.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":75889,"byte_end":75964,"line_start":89,"line_end":89,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":76898,"byte_end":76933,"line_start":111,"line_end":111,"column_start":12,"column_end":47},"name":"skip_all_header_extensions_in_slice","qualname":"<Ipv6Header>::skip_all_header_extensions_in_slice","value":"pub fn skip_all_header_extensions_in_slice(&[u8], u8)\n-> Result<(u8, &[u8]), ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Takes a slice & traffic class (identifying the first header type) and returns next_header id & the slice past after all ipv6 header extensions.\n","sig":null,"attributes":[{"value":"/Takes a slice & traffic class (identifying the first header type) and returns next_header id & the slice past after all ipv6 header extensions.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":76740,"byte_end":76886,"line_start":110,"line_end":110,"column_start":5,"column_end":151}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":77839,"byte_end":77860,"line_start":137,"line_end":137,"column_start":12,"column_end":33},"name":"skip_header_extension","qualname":"<Ipv6Header>::skip_header_extension","value":"pub fn skip_header_extension<T: io::Read + io::Seek + Sized>(&mut T, u8)\n-> Result<u8, io::Error>","parent":null,"children":[],"decl_id":null,"docs":"Skips the ipv6 header extension and returns the traffic_class\n","sig":null,"attributes":[{"value":"/Skips the ipv6 header extension and returns the traffic_class","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":77763,"byte_end":77827,"line_start":136,"line_end":136,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":79289,"byte_end":79315,"line_start":162,"line_end":162,"column_start":12,"column_end":38},"name":"skip_all_header_extensions","qualname":"<Ipv6Header>::skip_all_header_extensions","value":"pub fn skip_all_header_extensions<T: io::Read + io::Seek + Sized>(&mut T, u8)\n-> Result<u8, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Skips all ipv6 header extensions and returns the last traffic_class\n","sig":null,"attributes":[{"value":"/Skips all ipv6 header extensions and returns the last traffic_class","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":79207,"byte_end":79277,"line_start":161,"line_end":161,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":80093,"byte_end":80098,"line_start":184,"line_end":184,"column_start":12,"column_end":17},"name":"write","qualname":"<Ipv6Header>::write","value":"pub fn write<T: io::Write + Sized>(&Self, &mut T) -> Result<(), WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Writes a given IPv6 header to the current position.\n","sig":null,"attributes":[{"value":"/Writes a given IPv6 header to the current position.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":80027,"byte_end":80081,"line_start":183,"line_end":183,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":81623,"byte_end":81641,"line_start":225,"line_end":225,"column_start":12,"column_end":30},"name":"set_payload_length","qualname":"<Ipv6Header>::set_payload_length","value":"pub fn set_payload_length(&mut Self, usize) -> Result<(), ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Sets the field total_length based on the size of the payload and the options. Returns an error if the payload is too big to fit.\n","sig":null,"attributes":[{"value":"/Sets the field total_length based on the size of the payload and the options. Returns an error if the payload is too big to fit.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":81480,"byte_end":81611,"line_start":224,"line_end":224,"column_start":5,"column_end":136}}]},{"kind":"Struct","id":{"krate":0,"index":1405},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":82113,"byte_end":82128,"line_start":239,"line_end":239,"column_start":12,"column_end":27},"name":"Ipv6HeaderSlice","qualname":"::internet::ipv6::Ipv6HeaderSlice","value":"Ipv6HeaderSlice {  }","parent":null,"children":[{"krate":0,"index":1407}],"decl_id":null,"docs":"A slice containing an ipv6 header of a network package.\n","sig":null,"attributes":[{"value":"/A slice containing an ipv6 header of a network package.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":82004,"byte_end":82062,"line_start":237,"line_end":237,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":82281,"byte_end":82291,"line_start":246,"line_end":246,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Ipv6HeaderSlice>::from_slice","value":"pub fn from_slice(&'a [u8]) -> Result<Ipv6HeaderSlice, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Creates a slice containing an ipv6 header (without header extensions).\n","sig":null,"attributes":[{"value":"/Creates a slice containing an ipv6 header (without header extensions).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":82196,"byte_end":82269,"line_start":245,"line_end":245,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":82934,"byte_end":82939,"line_start":270,"line_end":270,"column_start":12,"column_end":17},"name":"slice","qualname":"<Ipv6HeaderSlice>::slice","value":"pub fn slice(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns the slice containing the ipv6 header\n","sig":null,"attributes":[{"value":"/Returns the slice containing the ipv6 header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":82861,"byte_end":82908,"line_start":268,"line_end":268,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":82913,"byte_end":82922,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":83060,"byte_end":83067,"line_start":275,"line_end":275,"column_start":12,"column_end":19},"name":"version","qualname":"<Ipv6HeaderSlice>::version","value":"pub fn version(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"version\" field from the slice (should be 6).\n","sig":null,"attributes":[{"value":"/Read the \"version\" field from the slice (should be 6).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":82991,"byte_end":83048,"line_start":274,"line_end":274,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":83182,"byte_end":83195,"line_start":280,"line_end":280,"column_start":12,"column_end":25},"name":"traffic_class","qualname":"<Ipv6HeaderSlice>::traffic_class","value":"pub fn traffic_class(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"traffic class\" field from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"traffic class\" field from the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":83121,"byte_end":83170,"line_start":279,"line_end":279,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":83332,"byte_end":83342,"line_start":285,"line_end":285,"column_start":12,"column_end":22},"name":"flow_label","qualname":"<Ipv6HeaderSlice>::flow_label","value":"pub fn flow_label(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"Read the \"flow label\" field from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"flow label\" field from the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":83274,"byte_end":83320,"line_start":284,"line_end":284,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":83604,"byte_end":83618,"line_start":290,"line_end":290,"column_start":12,"column_end":26},"name":"payload_length","qualname":"<Ipv6HeaderSlice>::payload_length","value":"pub fn payload_length(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Read the \"payload length\" field from  the slice. The length should contain the length of all extension headers and payload.\n","sig":null,"attributes":[{"value":"/Read the \"payload length\" field from  the slice. The length should contain the length of all extension headers and payload.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":83466,"byte_end":83592,"line_start":289,"line_end":289,"column_start":5,"column_end":131}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":83894,"byte_end":83905,"line_start":295,"line_end":295,"column_start":12,"column_end":23},"name":"next_header","qualname":"<Ipv6HeaderSlice>::next_header","value":"pub fn next_header(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"next header\" field from the slice. The next header value specifies what the next header or transport layer protocol is (see IpTrafficClass for a definitions of ids).\n","sig":null,"attributes":[{"value":"/Read the \"next header\" field from the slice. The next header value specifies what the next header or transport layer protocol is (see IpTrafficClass for a definitions of ids).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":83704,"byte_end":83882,"line_start":294,"line_end":294,"column_start":5,"column_end":183}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":84098,"byte_end":84107,"line_start":300,"line_end":300,"column_start":12,"column_end":21},"name":"hop_limit","qualname":"<Ipv6HeaderSlice>::hop_limit","value":"pub fn hop_limit(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"hop limit\" field from the slice. The hop limit specifies the number of hops the packet can take before it is discarded.\n","sig":null,"attributes":[{"value":"/Read the \"hop limit\" field from the slice. The hop limit specifies the number of hops the packet can take before it is discarded.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":83954,"byte_end":84086,"line_start":299,"line_end":299,"column_start":5,"column_end":137}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":84222,"byte_end":84228,"line_start":305,"line_end":305,"column_start":12,"column_end":18},"name":"source","qualname":"<Ipv6HeaderSlice>::source","value":"pub fn source(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns a slice containing the IPv6 source address.\n","sig":null,"attributes":[{"value":"/Returns a slice containing the IPv6 source address.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":84156,"byte_end":84210,"line_start":304,"line_end":304,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":84359,"byte_end":84370,"line_start":310,"line_end":310,"column_start":12,"column_end":23},"name":"source_addr","qualname":"<Ipv6HeaderSlice>::source_addr","value":"pub fn source_addr(&Self) -> Ipv6Addr","parent":null,"children":[],"decl_id":null,"docs":"Return the ipv6 source address as an std::net::Ipv6Addr\n","sig":null,"attributes":[{"value":"/Return the ipv6 source address as an std::net::Ipv6Addr","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":84289,"byte_end":84347,"line_start":309,"line_end":309,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":84607,"byte_end":84618,"line_start":317,"line_end":317,"column_start":12,"column_end":23},"name":"destination","qualname":"<Ipv6HeaderSlice>::destination","value":"pub fn destination(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns a slice containing the IPv6 destination address.\n","sig":null,"attributes":[{"value":"/Returns a slice containing the IPv6 destination address.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":84536,"byte_end":84595,"line_start":316,"line_end":316,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":84756,"byte_end":84772,"line_start":322,"line_end":322,"column_start":12,"column_end":28},"name":"destination_addr","qualname":"<Ipv6HeaderSlice>::destination_addr","value":"pub fn destination_addr(&Self) -> Ipv6Addr","parent":null,"children":[],"decl_id":null,"docs":"Return the ipv6 destination address as an std::net::Ipv6Addr\n","sig":null,"attributes":[{"value":"/Return the ipv6 destination address as an std::net::Ipv6Addr","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":84681,"byte_end":84744,"line_start":321,"line_end":321,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":85023,"byte_end":85032,"line_start":329,"line_end":329,"column_start":12,"column_end":21},"name":"to_header","qualname":"<Ipv6HeaderSlice>::to_header","value":"pub fn to_header(&Self) -> Ipv6Header","parent":null,"children":[],"decl_id":null,"docs":"Decode all the fields and copy the results to a Ipv6Header struct\n","sig":null,"attributes":[{"value":"/Decode all the fields and copy the results to a Ipv6Header struct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":84943,"byte_end":85011,"line_start":328,"line_end":328,"column_start":5,"column_end":73}}]},{"kind":"Const","id":{"krate":0,"index":294},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":85805,"byte_end":85835,"line_start":351,"line_end":351,"column_start":11,"column_end":41},"name":"IPV6_MAX_NUM_HEADER_EXTENSIONS","qualname":"::internet::ipv6::IPV6_MAX_NUM_HEADER_EXTENSIONS","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"Maximum number of header extensions allowed (according to the ipv6 rfc8200, & iana protocol numbers).\n","sig":null,"attributes":[{"value":"/Maximum number of header extensions allowed (according to the ipv6 rfc8200, & iana protocol numbers).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":85690,"byte_end":85794,"line_start":350,"line_end":350,"column_start":1,"column_end":105}}]},{"kind":"Struct","id":{"krate":0,"index":1425},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":85944,"byte_end":85963,"line_start":355,"line_end":355,"column_start":12,"column_end":31},"name":"Ipv6ExtensionHeader","qualname":"::internet::ipv6::Ipv6ExtensionHeader","value":"Ipv6ExtensionHeader {  }","parent":null,"children":[{"krate":0,"index":1426},{"krate":0,"index":1427}],"decl_id":null,"docs":"Dummy struct for ipv6 header extensions.\n","sig":null,"attributes":[{"value":"/Dummy struct for ipv6 header extensions.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":85850,"byte_end":85893,"line_start":353,"line_end":353,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":1439},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":86124,"byte_end":86148,"line_start":362,"line_end":362,"column_start":12,"column_end":36},"name":"Ipv6ExtensionHeaderSlice","qualname":"::internet::ipv6::Ipv6ExtensionHeaderSlice","value":"Ipv6ExtensionHeaderSlice {  }","parent":null,"children":[{"krate":0,"index":1441}],"decl_id":null,"docs":"A slice containing an ipv6 extension header of a network package.\n","sig":null,"attributes":[{"value":"/A slice containing an ipv6 extension header of a network package.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":86005,"byte_end":86073,"line_start":360,"line_end":360,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":86289,"byte_end":86299,"line_start":368,"line_end":368,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Ipv6ExtensionHeaderSlice>::from_slice","value":"pub fn from_slice(u8, &'a [u8]) -> Result<Ipv6ExtensionHeaderSlice, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Creates a slice containing an ipv6 header extension.\n","sig":null,"attributes":[{"value":"/Creates a slice containing an ipv6 header extension.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":86222,"byte_end":86277,"line_start":367,"line_end":367,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":87112,"byte_end":87117,"line_start":397,"line_end":397,"column_start":12,"column_end":17},"name":"slice","qualname":"<Ipv6ExtensionHeaderSlice>::slice","value":"pub fn slice(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns the slice containing the ipv6 extension header\n","sig":null,"attributes":[{"value":"/Returns the slice containing the ipv6 extension header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":87029,"byte_end":87086,"line_start":395,"line_end":395,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":87091,"byte_end":87100,"line_start":396,"line_end":396,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":87267,"byte_end":87278,"line_start":402,"line_end":402,"column_start":12,"column_end":23},"name":"next_header","qualname":"<Ipv6ExtensionHeaderSlice>::next_header","value":"pub fn next_header(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Returns the id of the next header (see IpTrafficClass for a definition of all ids).\n","sig":null,"attributes":[{"value":"/Returns the id of the next header (see IpTrafficClass for a definition of all ids).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":87169,"byte_end":87255,"line_start":401,"line_end":401,"column_start":5,"column_end":91}}]},{"kind":"Struct","id":{"krate":0,"index":1459},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":90902,"byte_end":90911,"line_start":8,"line_end":8,"column_start":12,"column_end":21},"name":"UdpHeader","qualname":"::transport::udp::UdpHeader","value":"UdpHeader { source_port, destination_port, length, checksum }","parent":null,"children":[{"krate":0,"index":1460},{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1463}],"decl_id":null,"docs":"Udp header according to rfc768.\n","sig":null,"attributes":[{"value":"/Udp header according to rfc768.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":90808,"byte_end":90842,"line_start":6,"line_end":6,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":1460},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":90967,"byte_end":90978,"line_start":10,"line_end":10,"column_start":9,"column_end":20},"name":"source_port","qualname":"::transport::udp::UdpHeader::source_port","value":"u16","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":"Source port of the packet (optional).\n","sig":null,"attributes":[{"value":"/Source port of the packet (optional).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":90918,"byte_end":90958,"line_start":9,"line_end":9,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":1461},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":91032,"byte_end":91048,"line_start":12,"line_end":12,"column_start":9,"column_end":25},"name":"destination_port","qualname":"::transport::udp::UdpHeader::destination_port","value":"u16","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":"Destination port of the packet.\n","sig":null,"attributes":[{"value":"/Destination port of the packet.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":90989,"byte_end":91023,"line_start":11,"line_end":11,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1462},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":91136,"byte_end":91142,"line_start":14,"line_end":14,"column_start":9,"column_end":15},"name":"length","qualname":"::transport::udp::UdpHeader::length","value":"u16","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":"Length of the packet (includes the udp header length of 8 bytes).\n","sig":null,"attributes":[{"value":"/Length of the packet (includes the udp header length of 8 bytes).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":91059,"byte_end":91127,"line_start":13,"line_end":13,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":1463},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":91355,"byte_end":91363,"line_start":16,"line_end":16,"column_start":9,"column_end":17},"name":"checksum","qualname":"::transport::udp::UdpHeader::checksum","value":"u16","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":"The checksum of the packet. The checksum is calculated from a pseudo header, the udp header and the payload. The pseudo header is composed of source and destination address, protocol number \n","sig":null,"attributes":[{"value":"/The checksum of the packet. The checksum is calculated from a pseudo header, the udp header and the payload. The pseudo header is composed of source and destination address, protocol number ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":91153,"byte_end":91346,"line_start":15,"line_end":15,"column_start":5,"column_end":198}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":91455,"byte_end":91476,"line_start":22,"line_end":22,"column_start":12,"column_end":33},"name":"without_ipv4_checksum","qualname":"<UdpHeader>::without_ipv4_checksum","value":"pub fn without_ipv4_checksum(u16, u16, usize) -> Result<UdpHeader, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Returns an udp header for the given parameters\n","sig":null,"attributes":[{"value":"/Returns an udp header for the given parameters","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":91394,"byte_end":91443,"line_start":21,"line_end":21,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":92167,"byte_end":92185,"line_start":38,"line_end":38,"column_start":12,"column_end":30},"name":"with_ipv4_checksum","qualname":"<UdpHeader>::with_ipv4_checksum","value":"pub fn with_ipv4_checksum(u16, u16, &Ipv4Header, &[u8])\n-> Result<UdpHeader, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculate an udp header given an ipv4 header and the payload\n","sig":null,"attributes":[{"value":"/Calculate an udp header given an ipv4 header and the payload","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":92092,"byte_end":92155,"line_start":37,"line_end":37,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":93054,"byte_end":93072,"line_start":57,"line_end":57,"column_start":12,"column_end":30},"name":"calc_checksum_ipv4","qualname":"<UdpHeader>::calc_checksum_ipv4","value":"pub fn calc_checksum_ipv4(&Self, &Ipv4Header, &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the upd header checksum based on a ipv4 header.\n","sig":null,"attributes":[{"value":"/Calculates the upd header checksum based on a ipv4 header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":92981,"byte_end":93042,"line_start":56,"line_end":56,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":93339,"byte_end":93361,"line_start":62,"line_end":62,"column_start":12,"column_end":34},"name":"calc_checksum_ipv4_raw","qualname":"<UdpHeader>::calc_checksum_ipv4_raw","value":"pub fn calc_checksum_ipv4_raw(&Self, [u8; ], [u8; ], u8, &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the upd header checksum based on a ipv4 header.\n","sig":null,"attributes":[{"value":"/Calculates the upd header checksum based on a ipv4 header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":93266,"byte_end":93327,"line_start":61,"line_end":61,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":94653,"byte_end":94671,"line_start":84,"line_end":84,"column_start":12,"column_end":30},"name":"with_ipv6_checksum","qualname":"<UdpHeader>::with_ipv6_checksum","value":"pub fn with_ipv6_checksum(u16, u16, &Ipv6Header, &[u8])\n-> Result<UdpHeader, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculate an udp header given an ipv6 header and the payload\n","sig":null,"attributes":[{"value":"/Calculate an udp header given an ipv6 header and the payload","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":94578,"byte_end":94641,"line_start":83,"line_end":83,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":95551,"byte_end":95569,"line_start":103,"line_end":103,"column_start":12,"column_end":30},"name":"calc_checksum_ipv6","qualname":"<UdpHeader>::calc_checksum_ipv6","value":"pub fn calc_checksum_ipv6(&Self, &Ipv6Header, &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the checksum of the current udp header given an ipv6 header and the payload.\n","sig":null,"attributes":[{"value":"/Calculates the checksum of the current udp header given an ipv6 header and the payload.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":95449,"byte_end":95539,"line_start":102,"line_end":102,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":95870,"byte_end":95892,"line_start":108,"line_end":108,"column_start":12,"column_end":34},"name":"calc_checksum_ipv6_raw","qualname":"<UdpHeader>::calc_checksum_ipv6_raw","value":"pub fn calc_checksum_ipv6_raw(&Self, &[u8; ], &[u8; ], &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the checksum of the current udp header given an ipv6 source & destination address plus the payload.\n","sig":null,"attributes":[{"value":"/Calculates the checksum of the current udp header given an ipv6 source & destination address plus the payload.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":95745,"byte_end":95858,"line_start":107,"line_end":107,"column_start":5,"column_end":118}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":98336,"byte_end":98351,"line_start":161,"line_end":161,"column_start":12,"column_end":27},"name":"read_from_slice","qualname":"<UdpHeader>::read_from_slice","value":"pub fn read_from_slice(&[u8]) -> Result<(UdpHeader, &[u8]), ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Reads a udp header from a slice directly and returns a tuple containing the resulting header & unused part of the slice.\n","sig":null,"attributes":[{"value":"/Reads a udp header from a slice directly and returns a tuple containing the resulting header & unused part of the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":98201,"byte_end":98324,"line_start":160,"line_end":160,"column_start":5,"column_end":128}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":98622,"byte_end":98626,"line_start":169,"line_end":169,"column_start":12,"column_end":16},"name":"read","qualname":"<UdpHeader>::read","value":"pub fn read<T: io::Read + io::Seek + Sized>(&mut T)\n-> Result<UdpHeader, io::Error>","parent":null,"children":[],"decl_id":null,"docs":"Tries to read an udp header from the current position.\n","sig":null,"attributes":[{"value":"/Tries to read an udp header from the current position.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":98553,"byte_end":98610,"line_start":168,"line_end":168,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":99062,"byte_end":99067,"line_start":179,"line_end":179,"column_start":12,"column_end":17},"name":"write","qualname":"<UdpHeader>::write","value":"pub fn write<T: io::Write + Sized>(&Self, &mut T) -> Result<(), WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Write the udp header without recalculating the checksum or length.\n","sig":null,"attributes":[{"value":"/Write the udp header without recalculating the checksum or length.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":98981,"byte_end":99050,"line_start":178,"line_end":178,"column_start":5,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1477},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":99670,"byte_end":99684,"line_start":195,"line_end":195,"column_start":12,"column_end":26},"name":"UdpHeaderSlice","qualname":"::transport::udp::UdpHeaderSlice","value":"UdpHeaderSlice {  }","parent":null,"children":[{"krate":0,"index":1479}],"decl_id":null,"docs":"A slice containing an udp header of a network package. Struct allows the selective read of fields in the header.\n","sig":null,"attributes":[{"value":"/A slice containing an udp header of a network package. Struct allows the selective read of fields in the header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":99504,"byte_end":99619,"line_start":193,"line_end":193,"column_start":1,"column_end":116}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":99805,"byte_end":99815,"line_start":202,"line_end":202,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<UdpHeaderSlice>::from_slice","value":"pub fn from_slice(&'a [u8]) -> Result<UdpHeaderSlice, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Creates a slice containing an udp header.\n","sig":null,"attributes":[{"value":"/Creates a slice containing an udp header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":99749,"byte_end":99793,"line_start":201,"line_end":201,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":100248,"byte_end":100253,"line_start":216,"line_end":216,"column_start":12,"column_end":17},"name":"slice","qualname":"<UdpHeaderSlice>::slice","value":"pub fn slice(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns the slice containing the udp header\n","sig":null,"attributes":[{"value":"/Returns the slice containing the udp header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":100190,"byte_end":100236,"line_start":215,"line_end":215,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":100363,"byte_end":100374,"line_start":221,"line_end":221,"column_start":12,"column_end":23},"name":"source_port","qualname":"<UdpHeaderSlice>::source_port","value":"pub fn source_port(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Reads the \"udp source port\" from the slice.\n","sig":null,"attributes":[{"value":"/Reads the \"udp source port\" from the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":100305,"byte_end":100351,"line_start":220,"line_end":220,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":100511,"byte_end":100527,"line_start":226,"line_end":226,"column_start":12,"column_end":28},"name":"destination_port","qualname":"<UdpHeaderSlice>::destination_port","value":"pub fn destination_port(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Reads the \"udp destination port\" from the slice.\n","sig":null,"attributes":[{"value":"/Reads the \"udp destination port\" from the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":100448,"byte_end":100499,"line_start":225,"line_end":225,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":100651,"byte_end":100657,"line_start":231,"line_end":231,"column_start":12,"column_end":18},"name":"length","qualname":"<UdpHeaderSlice>::length","value":"pub fn length(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Reads the \"length\" from the slice.\n","sig":null,"attributes":[{"value":"/Reads the \"length\" from the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":100602,"byte_end":100639,"line_start":230,"line_end":230,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":100783,"byte_end":100791,"line_start":236,"line_end":236,"column_start":12,"column_end":20},"name":"checksum","qualname":"<UdpHeaderSlice>::checksum","value":"pub fn checksum(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Reads the \"checksum\" from the slice.\n","sig":null,"attributes":[{"value":"/Reads the \"checksum\" from the slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":100732,"byte_end":100771,"line_start":235,"line_end":235,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":100945,"byte_end":100954,"line_start":241,"line_end":241,"column_start":12,"column_end":21},"name":"to_header","qualname":"<UdpHeaderSlice>::to_header","value":"pub fn to_header(&Self) -> UdpHeader","parent":null,"children":[],"decl_id":null,"docs":"Decode all the fields and copy the results to a UdpHeader struct\n","sig":null,"attributes":[{"value":"/Decode all the fields and copy the results to a UdpHeader struct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":100866,"byte_end":100933,"line_start":240,"line_end":240,"column_start":5,"column_end":72}}]},{"kind":"Const","id":{"krate":0,"index":368},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":101430,"byte_end":101453,"line_start":10,"line_end":10,"column_start":11,"column_end":34},"name":"TCP_MINIMUM_HEADER_SIZE","qualname":"::transport::tcp::TCP_MINIMUM_HEADER_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"The minimum size of the tcp header in bytes\n","sig":null,"attributes":[{"value":"/The minimum size of the tcp header in bytes","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":101373,"byte_end":101419,"line_start":9,"line_end":9,"column_start":1,"column_end":47}}]},{"kind":"Const","id":{"krate":0,"index":369},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":101543,"byte_end":101566,"line_start":12,"line_end":12,"column_start":11,"column_end":34},"name":"TCP_MINIMUM_DATA_OFFSET","qualname":"::transport::tcp::TCP_MINIMUM_DATA_OFFSET","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"The minimum data offset size (size of the tcp header itself).\n","sig":null,"attributes":[{"value":"/The minimum data offset size (size of the tcp header itself).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":101468,"byte_end":101532,"line_start":11,"line_end":11,"column_start":1,"column_end":65}}]},{"kind":"Const","id":{"krate":0,"index":370},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":101658,"byte_end":101681,"line_start":14,"line_end":14,"column_start":11,"column_end":34},"name":"TCP_MAXIMUM_DATA_OFFSET","qualname":"::transport::tcp::TCP_MAXIMUM_DATA_OFFSET","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"The maximum allowed value for the data offset (it is a 4 bit value).\n","sig":null,"attributes":[{"value":"/The maximum allowed value for the data offset (it is a 4 bit value).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":101576,"byte_end":101647,"line_start":13,"line_end":13,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1497},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":101814,"byte_end":101823,"line_start":20,"line_end":20,"column_start":12,"column_end":21},"name":"TcpHeader","qualname":"::transport::tcp::TcpHeader","value":"TcpHeader { source_port, destination_port, sequence_number, acknowledgment_number, ns, fin, syn, rst, psh, ack, urg, ece, cwr, window_size, checksum, urgent_pointer }","parent":null,"children":[{"krate":0,"index":1498},{"krate":0,"index":1499},{"krate":0,"index":1500},{"krate":0,"index":1501},{"krate":0,"index":1502},{"krate":0,"index":1503},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1506},{"krate":0,"index":1507},{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1510},{"krate":0,"index":1511},{"krate":0,"index":1512},{"krate":0,"index":1513},{"krate":0,"index":1514},{"krate":0,"index":1515}],"decl_id":null,"docs":"TCP header according to rfc 793.","sig":null,"attributes":[{"value":"/TCP header according to rfc 793.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":101694,"byte_end":101729,"line_start":16,"line_end":16,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":101730,"byte_end":101733,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/Field descriptions copied from RFC 793 page 15++","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":101734,"byte_end":101785,"line_start":18,"line_end":18,"column_start":1,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":1498},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":101865,"byte_end":101876,"line_start":22,"line_end":22,"column_start":9,"column_end":20},"name":"source_port","qualname":"::transport::tcp::TcpHeader::source_port","value":"u16","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":"The source port number.\n","sig":null,"attributes":[{"value":"/The source port number.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":101830,"byte_end":101856,"line_start":21,"line_end":21,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1499},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":101927,"byte_end":101943,"line_start":24,"line_end":24,"column_start":9,"column_end":25},"name":"destination_port","qualname":"::transport::tcp::TcpHeader::destination_port","value":"u16","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":"The destination port number.\n","sig":null,"attributes":[{"value":"/The destination port number.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":101887,"byte_end":101918,"line_start":23,"line_end":23,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":1500},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":102226,"byte_end":102241,"line_start":30,"line_end":30,"column_start":9,"column_end":24},"name":"sequence_number","qualname":"::transport::tcp::TcpHeader::sequence_number","value":"u32","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":"The sequence number of the first data octet in this segment (except when SYN is present).","sig":null,"attributes":[{"value":"/The sequence number of the first data octet in this segment (except when SYN is present).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":101954,"byte_end":102046,"line_start":25,"line_end":25,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":102051,"byte_end":102054,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/If SYN is present the sequence number is the initial sequence number (ISN) ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":102059,"byte_end":102137,"line_start":27,"line_end":27,"column_start":5,"column_end":83}},{"value":"/and the first data octet is ISN+1.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":102142,"byte_end":102179,"line_start":28,"line_end":28,"column_start":5,"column_end":42}},{"value":"/[copied from RFC 793, page 16]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":102184,"byte_end":102217,"line_start":29,"line_end":29,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":1501},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":102485,"byte_end":102506,"line_start":36,"line_end":36,"column_start":9,"column_end":30},"name":"acknowledgment_number","qualname":"::transport::tcp::TcpHeader::acknowledgment_number","value":"u32","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":"If the ACK control bit is set this field contains the value of the\nnext sequence number the sender of the segment is expecting to\nreceive.","sig":null,"attributes":[{"value":"/If the ACK control bit is set this field contains the value of the","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":102252,"byte_end":102321,"line_start":31,"line_end":31,"column_start":5,"column_end":74}},{"value":"/next sequence number the sender of the segment is expecting to","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":102326,"byte_end":102391,"line_start":32,"line_end":32,"column_start":5,"column_end":70}},{"value":"/receive.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":102396,"byte_end":102407,"line_start":33,"line_end":33,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":102412,"byte_end":102415,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/Once a connection is established this is always sent.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":102420,"byte_end":102476,"line_start":35,"line_end":35,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":1503},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":102811,"byte_end":102813,"line_start":43,"line_end":43,"column_start":9,"column_end":11},"name":"ns","qualname":"::transport::tcp::TcpHeader::ns","value":"bool","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":"ECN-nonce - concealment protection (experimental: see RFC 3540)\n","sig":null,"attributes":[{"value":"/ECN-nonce - concealment protection (experimental: see RFC 3540)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":102736,"byte_end":102802,"line_start":42,"line_end":42,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":1504},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":102861,"byte_end":102864,"line_start":45,"line_end":45,"column_start":9,"column_end":12},"name":"fin","qualname":"::transport::tcp::TcpHeader::fin","value":"bool","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":"No more data from sender\n","sig":null,"attributes":[{"value":"/No more data from sender","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":102825,"byte_end":102852,"line_start":44,"line_end":44,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":1505},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":102916,"byte_end":102919,"line_start":47,"line_end":47,"column_start":9,"column_end":12},"name":"syn","qualname":"::transport::tcp::TcpHeader::syn","value":"bool","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":"Synchronize sequence numbers\n","sig":null,"attributes":[{"value":"/Synchronize sequence numbers","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":102876,"byte_end":102907,"line_start":46,"line_end":46,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":1506},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":102963,"byte_end":102966,"line_start":49,"line_end":49,"column_start":9,"column_end":12},"name":"rst","qualname":"::transport::tcp::TcpHeader::rst","value":"bool","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":"Reset the connection\n","sig":null,"attributes":[{"value":"/Reset the connection","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":102931,"byte_end":102954,"line_start":48,"line_end":48,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":1507},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103003,"byte_end":103006,"line_start":51,"line_end":51,"column_start":9,"column_end":12},"name":"psh","qualname":"::transport::tcp::TcpHeader::psh","value":"bool","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":"Push Function\n","sig":null,"attributes":[{"value":"/Push Function","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":102978,"byte_end":102994,"line_start":50,"line_end":50,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":1508},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103062,"byte_end":103065,"line_start":53,"line_end":53,"column_start":9,"column_end":12},"name":"ack","qualname":"::transport::tcp::TcpHeader::ack","value":"bool","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":"Acknowledgment field significant\n","sig":null,"attributes":[{"value":"/Acknowledgment field significant","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103018,"byte_end":103053,"line_start":52,"line_end":52,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1509},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103121,"byte_end":103124,"line_start":55,"line_end":55,"column_start":9,"column_end":12},"name":"urg","qualname":"::transport::tcp::TcpHeader::urg","value":"bool","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":"Urgent Pointer field significant\n","sig":null,"attributes":[{"value":"/Urgent Pointer field significant","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103077,"byte_end":103112,"line_start":54,"line_end":54,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1510},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103167,"byte_end":103170,"line_start":57,"line_end":57,"column_start":9,"column_end":12},"name":"ece","qualname":"::transport::tcp::TcpHeader::ece","value":"bool","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":"ECN-Echo (RFC 3168)\n","sig":null,"attributes":[{"value":"/ECN-Echo (RFC 3168)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103136,"byte_end":103158,"line_start":56,"line_end":56,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":1511},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103429,"byte_end":103432,"line_start":61,"line_end":61,"column_start":9,"column_end":12},"name":"cwr","qualname":"::transport::tcp::TcpHeader::cwr","value":"bool","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":"Congestion Window Reduced (CWR) flag ","sig":null,"attributes":[{"value":"/Congestion Window Reduced (CWR) flag ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103182,"byte_end":103222,"line_start":58,"line_end":58,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103227,"byte_end":103230,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/This flag is set by the sending host to indicate that it received a TCP segment with the ECE flag set and had responded in congestion control mechanism (added to header by RFC 3168).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103235,"byte_end":103420,"line_start":60,"line_end":60,"column_start":5,"column_end":190}}]},{"kind":"Field","id":{"krate":0,"index":1512},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103611,"byte_end":103622,"line_start":65,"line_end":65,"column_start":9,"column_end":20},"name":"window_size","qualname":"::transport::tcp::TcpHeader::window_size","value":"u16","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":"The number of data octets beginning with the one indicated in the\nacknowledgment field which the sender of this segment is willing to\naccept.\n","sig":null,"attributes":[{"value":"/The number of data octets beginning with the one indicated in the","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103444,"byte_end":103512,"line_start":62,"line_end":62,"column_start":5,"column_end":73}},{"value":"/acknowledgment field which the sender of this segment is willing to","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103517,"byte_end":103587,"line_start":63,"line_end":63,"column_start":5,"column_end":75}},{"value":"/accept.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103592,"byte_end":103602,"line_start":64,"line_end":64,"column_start":5,"column_end":15}}]},{"kind":"Field","id":{"krate":0,"index":1513},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103737,"byte_end":103745,"line_start":67,"line_end":67,"column_start":9,"column_end":17},"name":"checksum","qualname":"::transport::tcp::TcpHeader::checksum","value":"u16","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":"Checksum (16 bit one's complement) of the pseudo ip header, this tcp header and the payload.\n","sig":null,"attributes":[{"value":"/Checksum (16 bit one's complement) of the pseudo ip header, this tcp header and the payload.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103633,"byte_end":103728,"line_start":66,"line_end":66,"column_start":5,"column_end":100}}]},{"kind":"Field","id":{"krate":0,"index":1514},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":104096,"byte_end":104110,"line_start":74,"line_end":74,"column_start":9,"column_end":23},"name":"urgent_pointer","qualname":"::transport::tcp::TcpHeader::urgent_pointer","value":"u16","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":"This field communicates the current value of the urgent pointer as a\npositive offset from the sequence number in this segment.","sig":null,"attributes":[{"value":"/This field communicates the current value of the urgent pointer as a","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103756,"byte_end":103827,"line_start":68,"line_end":68,"column_start":5,"column_end":76}},{"value":"/positive offset from the sequence number in this segment.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103832,"byte_end":103892,"line_start":69,"line_end":69,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103897,"byte_end":103900,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/The urgent pointer points to the sequence number of the octet following","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103905,"byte_end":103979,"line_start":71,"line_end":71,"column_start":5,"column_end":79}},{"value":"/the urgent data.  This field is only be interpreted in segments with","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":103984,"byte_end":104055,"line_start":72,"line_end":72,"column_start":5,"column_end":76}},{"value":"/the URG control bit set.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":104060,"byte_end":104087,"line_start":73,"line_end":73,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":104473,"byte_end":104476,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<TcpHeader>::new","value":"pub fn new(u16, u16, u32, u16) -> TcpHeader","parent":null,"children":[],"decl_id":null,"docs":"Creates a TcpHeader with the given values and the rest initialized with default values.\n","sig":null,"attributes":[{"value":"/Creates a TcpHeader with the given values and the rest initialized with default values.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":104371,"byte_end":104461,"line_start":81,"line_end":81,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":105322,"byte_end":105333,"line_start":109,"line_end":109,"column_start":12,"column_end":23},"name":"data_offset","qualname":"<TcpHeader>::data_offset","value":"pub fn data_offset(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"The number of 32 bit words in the TCP Header.","sig":null,"attributes":[{"value":"/The number of 32 bit words in the TCP Header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":105118,"byte_end":105166,"line_start":105,"line_end":105,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":105171,"byte_end":105174,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/This indicates where the data begins.  The TCP header (even one including options) is an","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":105179,"byte_end":105270,"line_start":107,"line_end":107,"column_start":5,"column_end":96}},{"value":"/integral number of 32 bits long.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":105275,"byte_end":105310,"line_start":108,"line_end":108,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":105456,"byte_end":105466,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"name":"header_len","qualname":"<TcpHeader>::header_len","value":"pub fn header_len(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Returns the length of the header including the options.\n","sig":null,"attributes":[{"value":"/Returns the length of the header including the options.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":105386,"byte_end":105444,"line_start":113,"line_end":113,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":105731,"byte_end":105742,"line_start":119,"line_end":119,"column_start":12,"column_end":23},"name":"options_len","qualname":"<TcpHeader>::options_len","value":"pub fn options_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"Returns the options size in bytes based on the currently set data_offset. Returns None if the data_offset is smaller then the minimum size or bigger then the maximum supported size.\n","sig":null,"attributes":[{"value":"/Returns the options size in bytes based on the currently set data_offset. Returns None if the data_offset is smaller then the minimum size or bigger then the maximum supported size.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":105535,"byte_end":105719,"line_start":118,"line_end":118,"column_start":5,"column_end":189}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":106091,"byte_end":106098,"line_start":126,"line_end":126,"column_start":12,"column_end":19},"name":"options","qualname":"<TcpHeader>::options","value":"pub fn options(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns a slice containing the options of the header (size is determined via the data_offset field.\n","sig":null,"attributes":[{"value":"/Returns a slice containing the options of the header (size is determined via the data_offset field.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":105977,"byte_end":106079,"line_start":125,"line_end":125,"column_start":5,"column_end":107}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":106295,"byte_end":106306,"line_start":131,"line_end":131,"column_start":12,"column_end":23},"name":"set_options","qualname":"<TcpHeader>::set_options","value":"pub fn set_options(&mut Self, &[TcpOptionElement])\n-> Result<(), TcpOptionWriteError>","parent":null,"children":[],"decl_id":null,"docs":"Sets the options (overwrites the current options) or returns an error when there is not enough space.\n","sig":null,"attributes":[{"value":"/Sets the options (overwrites the current options) or returns an error when there is not enough space.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":106179,"byte_end":106283,"line_start":130,"line_end":130,"column_start":5,"column_end":109}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":111290,"byte_end":111305,"line_start":251,"line_end":251,"column_start":12,"column_end":27},"name":"set_options_raw","qualname":"<TcpHeader>::set_options_raw","value":"pub fn set_options_raw(&mut Self, &[u8]) -> Result<(), TcpOptionWriteError>","parent":null,"children":[],"decl_id":null,"docs":"Sets the options to the data given.\n","sig":null,"attributes":[{"value":"/Sets the options to the data given.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":111240,"byte_end":111278,"line_start":250,"line_end":250,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":112031,"byte_end":112047,"line_start":270,"line_end":270,"column_start":12,"column_end":28},"name":"options_iterator","qualname":"<TcpHeader>::options_iterator","value":"pub fn options_iterator(&Self) -> TcpOptionsIterator","parent":null,"children":[],"decl_id":null,"docs":"Returns an iterator that allows to iterate through all known TCP header options.\n","sig":null,"attributes":[{"value":"/Returns an iterator that allows to iterate through all known TCP header options.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":111936,"byte_end":112019,"line_start":269,"line_end":269,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":112239,"byte_end":112254,"line_start":277,"line_end":277,"column_start":12,"column_end":27},"name":"read_from_slice","qualname":"<TcpHeader>::read_from_slice","value":"pub fn read_from_slice(&[u8]) -> Result<(TcpHeader, &[u8]), ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Reads a tcp header from a slice\n","sig":null,"attributes":[{"value":"/Reads a tcp header from a slice","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":112193,"byte_end":112227,"line_start":276,"line_end":276,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":112522,"byte_end":112526,"line_start":286,"line_end":286,"column_start":12,"column_end":16},"name":"read","qualname":"<TcpHeader>::read","value":"pub fn read<T: io::Read + Sized>(&mut T) -> Result<TcpHeader, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Read a tcp header from the current position\n","sig":null,"attributes":[{"value":"/Read a tcp header from the current position","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":112464,"byte_end":112510,"line_start":285,"line_end":285,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":114356,"byte_end":114361,"line_start":332,"line_end":332,"column_start":12,"column_end":17},"name":"write","qualname":"<TcpHeader>::write","value":"pub fn write<T: io::Write + Sized>(&Self, &mut T)\n-> Result<(), std::io::Error>","parent":null,"children":[],"decl_id":null,"docs":"Write the tcp header to a stream (does NOT calculate the checksum).\n","sig":null,"attributes":[{"value":"/Write the tcp header to a stream (does NOT calculate the checksum).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":114274,"byte_end":114344,"line_start":331,"line_end":331,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":116321,"byte_end":116339,"line_start":391,"line_end":391,"column_start":12,"column_end":30},"name":"calc_checksum_ipv4","qualname":"<TcpHeader>::calc_checksum_ipv4","value":"pub fn calc_checksum_ipv4(&Self, &Ipv4Header, &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the upd header checksum based on a ipv4 header and returns the result. This does NOT set the checksum.\n","sig":null,"attributes":[{"value":"/Calculates the upd header checksum based on a ipv4 header and returns the result. This does NOT set the checksum.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":116193,"byte_end":116309,"line_start":390,"line_end":390,"column_start":5,"column_end":121}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":116643,"byte_end":116665,"line_start":396,"line_end":396,"column_start":12,"column_end":34},"name":"calc_checksum_ipv4_raw","qualname":"<TcpHeader>::calc_checksum_ipv4_raw","value":"pub fn calc_checksum_ipv4_raw(&Self, [u8; ], [u8; ], &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the checksum for the current header in ipv4 mode and returns the result. This does NOT set the checksum.\n","sig":null,"attributes":[{"value":"/Calculates the checksum for the current header in ipv4 mode and returns the result. This does NOT set the checksum.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":116513,"byte_end":116631,"line_start":395,"line_end":395,"column_start":5,"column_end":123}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":117765,"byte_end":117783,"line_start":415,"line_end":415,"column_start":12,"column_end":30},"name":"calc_checksum_ipv6","qualname":"<TcpHeader>::calc_checksum_ipv6","value":"pub fn calc_checksum_ipv6(&Self, &Ipv6Header, &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the upd header checksum based on a ipv6 header and returns the result. This does NOT set the checksum..\n","sig":null,"attributes":[{"value":"/Calculates the upd header checksum based on a ipv6 header and returns the result. This does NOT set the checksum..","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":117636,"byte_end":117753,"line_start":414,"line_end":414,"column_start":5,"column_end":122}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":118089,"byte_end":118111,"line_start":420,"line_end":420,"column_start":12,"column_end":34},"name":"calc_checksum_ipv6_raw","qualname":"<TcpHeader>::calc_checksum_ipv6_raw","value":"pub fn calc_checksum_ipv6_raw(&Self, &[u8; ], &[u8; ], &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the checksum for the current header in ipv6 mode and returns the result. This does NOT set the checksum.\n","sig":null,"attributes":[{"value":"/Calculates the checksum for the current header in ipv6 mode and returns the result. This does NOT set the checksum.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":117959,"byte_end":118077,"line_start":419,"line_end":419,"column_start":5,"column_end":123}}]},{"kind":"Struct","id":{"krate":0,"index":1519},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":125000,"byte_end":125014,"line_start":603,"line_end":603,"column_start":12,"column_end":26},"name":"TcpHeaderSlice","qualname":"::transport::tcp::TcpHeaderSlice","value":"TcpHeaderSlice {  }","parent":null,"children":[{"krate":0,"index":1521}],"decl_id":null,"docs":"A slice containing an tcp header of a network package.\n","sig":null,"attributes":[{"value":"/A slice containing an tcp header of a network package.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":124892,"byte_end":124949,"line_start":601,"line_end":601,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":125135,"byte_end":125145,"line_start":610,"line_end":610,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<TcpHeaderSlice>::from_slice","value":"pub fn from_slice(&'a [u8]) -> Result<TcpHeaderSlice, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Creates a slice containing an tcp header.\n","sig":null,"attributes":[{"value":"/Creates a slice containing an tcp header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":125079,"byte_end":125123,"line_start":609,"line_end":609,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":125916,"byte_end":125921,"line_start":633,"line_end":633,"column_start":12,"column_end":17},"name":"slice","qualname":"<TcpHeaderSlice>::slice","value":"pub fn slice(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns the slice containing the tcp header\n","sig":null,"attributes":[{"value":"/Returns the slice containing the tcp header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":125858,"byte_end":125904,"line_start":632,"line_end":632,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":126021,"byte_end":126032,"line_start":638,"line_end":638,"column_start":12,"column_end":23},"name":"source_port","qualname":"<TcpHeaderSlice>::source_port","value":"pub fn source_port(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Read the destination port number.\n","sig":null,"attributes":[{"value":"/Read the destination port number.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":125973,"byte_end":126009,"line_start":637,"line_end":637,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":126154,"byte_end":126170,"line_start":643,"line_end":643,"column_start":12,"column_end":28},"name":"destination_port","qualname":"<TcpHeaderSlice>::destination_port","value":"pub fn destination_port(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Read the destination port number.\n","sig":null,"attributes":[{"value":"/Read the destination port number.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":126106,"byte_end":126142,"line_start":642,"line_end":642,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":126525,"byte_end":126540,"line_start":652,"line_end":652,"column_start":12,"column_end":27},"name":"sequence_number","qualname":"<TcpHeaderSlice>::sequence_number","value":"pub fn sequence_number(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"Read the sequence number of the first data octet in this segment (except when SYN is present).","sig":null,"attributes":[{"value":"/Read the sequence number of the first data octet in this segment (except when SYN is present).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":126245,"byte_end":126342,"line_start":647,"line_end":647,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":126347,"byte_end":126350,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/If SYN is present the sequence number is the initial sequence number (ISN) ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":126355,"byte_end":126433,"line_start":649,"line_end":649,"column_start":5,"column_end":83}},{"value":"/and the first data octet is ISN+1.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":126438,"byte_end":126475,"line_start":650,"line_end":650,"column_start":5,"column_end":42}},{"value":"/[copied from RFC 793, page 16]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":126480,"byte_end":126513,"line_start":651,"line_end":651,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":126899,"byte_end":126920,"line_start":663,"line_end":663,"column_start":12,"column_end":33},"name":"acknowledgment_number","qualname":"<TcpHeaderSlice>::acknowledgment_number","value":"pub fn acknowledgment_number(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"Reads the acknowledgment number.","sig":null,"attributes":[{"value":"/Reads the acknowledgment number.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":126615,"byte_end":126650,"line_start":656,"line_end":656,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":126655,"byte_end":126658,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/If the ACK control bit is set this field contains the value of the","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":126663,"byte_end":126732,"line_start":658,"line_end":658,"column_start":5,"column_end":74}},{"value":"/next sequence number the sender of the segment is expecting to","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":126737,"byte_end":126802,"line_start":659,"line_end":659,"column_start":5,"column_end":70}},{"value":"/receive.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":126807,"byte_end":126818,"line_start":660,"line_end":660,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":126823,"byte_end":126826,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/Once a connection is established this is always sent.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":126831,"byte_end":126887,"line_start":662,"line_end":662,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":127205,"byte_end":127216,"line_start":671,"line_end":671,"column_start":12,"column_end":23},"name":"data_offset","qualname":"<TcpHeaderSlice>::data_offset","value":"pub fn data_offset(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the number of 32 bit words in the TCP Header.","sig":null,"attributes":[{"value":"/Read the number of 32 bit words in the TCP Header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":126996,"byte_end":127049,"line_start":667,"line_end":667,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":127054,"byte_end":127057,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/This indicates where the data begins.  The TCP header (even one including options) is an","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":127062,"byte_end":127153,"line_start":669,"line_end":669,"column_start":5,"column_end":96}},{"value":"/integral number of 32 bits long.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":127158,"byte_end":127193,"line_start":670,"line_end":670,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":127358,"byte_end":127360,"line_start":676,"line_end":676,"column_start":12,"column_end":14},"name":"ns","qualname":"<TcpHeaderSlice>::ns","value":"pub fn ns(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"ECN-nonce - concealment protection (experimental: see RFC 3540)\n","sig":null,"attributes":[{"value":"/ECN-nonce - concealment protection (experimental: see RFC 3540)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":127280,"byte_end":127346,"line_start":675,"line_end":675,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":127483,"byte_end":127486,"line_start":681,"line_end":681,"column_start":12,"column_end":15},"name":"fin","qualname":"<TcpHeaderSlice>::fin","value":"pub fn fin(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Read the fin flag (no more data from sender).\n","sig":null,"attributes":[{"value":"/Read the fin flag (no more data from sender).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":127423,"byte_end":127471,"line_start":680,"line_end":680,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":127614,"byte_end":127617,"line_start":686,"line_end":686,"column_start":12,"column_end":15},"name":"syn","qualname":"<TcpHeaderSlice>::syn","value":"pub fn syn(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Reads the syn flag (synchronize sequence numbers).\n","sig":null,"attributes":[{"value":"/Reads the syn flag (synchronize sequence numbers).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":127549,"byte_end":127602,"line_start":685,"line_end":685,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":127737,"byte_end":127740,"line_start":691,"line_end":691,"column_start":12,"column_end":15},"name":"rst","qualname":"<TcpHeaderSlice>::rst","value":"pub fn rst(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Reads the rst flag (reset the connection).\n","sig":null,"attributes":[{"value":"/Reads the rst flag (reset the connection).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":127680,"byte_end":127725,"line_start":690,"line_end":690,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":127853,"byte_end":127856,"line_start":696,"line_end":696,"column_start":12,"column_end":15},"name":"psh","qualname":"<TcpHeaderSlice>::psh","value":"pub fn psh(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Reads the psh flag (push function).\n","sig":null,"attributes":[{"value":"/Reads the psh flag (push function).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":127803,"byte_end":127841,"line_start":695,"line_end":695,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":127988,"byte_end":127991,"line_start":701,"line_end":701,"column_start":12,"column_end":15},"name":"ack","qualname":"<TcpHeaderSlice>::ack","value":"pub fn ack(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Reads the ack flag (acknowledgment field significant).\n","sig":null,"attributes":[{"value":"/Reads the ack flag (acknowledgment field significant).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":127919,"byte_end":127976,"line_start":700,"line_end":700,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":128124,"byte_end":128127,"line_start":706,"line_end":706,"column_start":12,"column_end":15},"name":"urg","qualname":"<TcpHeaderSlice>::urg","value":"pub fn urg(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Reads the urg flag (Urgent Pointer field significant).\n","sig":null,"attributes":[{"value":"/Reads the urg flag (Urgent Pointer field significant).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":128055,"byte_end":128112,"line_start":705,"line_end":705,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":128240,"byte_end":128243,"line_start":711,"line_end":711,"column_start":12,"column_end":15},"name":"ece","qualname":"<TcpHeaderSlice>::ece","value":"pub fn ece(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Read the ECN-Echo flag (RFC 3168).\n","sig":null,"attributes":[{"value":"/Read the ECN-Echo flag (RFC 3168).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":128191,"byte_end":128228,"line_start":710,"line_end":710,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":128568,"byte_end":128571,"line_start":718,"line_end":718,"column_start":12,"column_end":15},"name":"cwr","qualname":"<TcpHeaderSlice>::cwr","value":"pub fn cwr(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Reads the cwr flag (Congestion Window Reduced). ","sig":null,"attributes":[{"value":"/Reads the cwr flag (Congestion Window Reduced). ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":128307,"byte_end":128358,"line_start":715,"line_end":715,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":128363,"byte_end":128366,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/This flag is set by the sending host to indicate that it received a TCP segment with the ECE flag set and had responded in congestion control mechanism (added to header by RFC 3168).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":128371,"byte_end":128556,"line_start":717,"line_end":717,"column_start":5,"column_end":190}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":128806,"byte_end":128817,"line_start":725,"line_end":725,"column_start":12,"column_end":23},"name":"window_size","qualname":"<TcpHeaderSlice>::window_size","value":"pub fn window_size(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"The number of data octets beginning with the one indicated in the\nacknowledgment field which the sender of this segment is willing to\naccept.\n","sig":null,"attributes":[{"value":"/The number of data octets beginning with the one indicated in the","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":128636,"byte_end":128704,"line_start":722,"line_end":722,"column_start":5,"column_end":73}},{"value":"/acknowledgment field which the sender of this segment is willing to","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":128709,"byte_end":128779,"line_start":723,"line_end":723,"column_start":5,"column_end":75}},{"value":"/accept.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":128784,"byte_end":128794,"line_start":724,"line_end":724,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":129001,"byte_end":129009,"line_start":730,"line_end":730,"column_start":12,"column_end":20},"name":"checksum","qualname":"<TcpHeaderSlice>::checksum","value":"pub fn checksum(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Checksum (16 bit one's complement) of the pseudo ip header, this tcp header and the payload.\n","sig":null,"attributes":[{"value":"/Checksum (16 bit one's complement) of the pseudo ip header, this tcp header and the payload.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":128894,"byte_end":128989,"line_start":729,"line_end":729,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":129429,"byte_end":129443,"line_start":740,"line_end":740,"column_start":12,"column_end":26},"name":"urgent_pointer","qualname":"<TcpHeaderSlice>::urgent_pointer","value":"pub fn urgent_pointer(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"This field communicates the current value of the urgent pointer as a\npositive offset from the sequence number in this segment.","sig":null,"attributes":[{"value":"/This field communicates the current value of the urgent pointer as a","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":129086,"byte_end":129157,"line_start":734,"line_end":734,"column_start":5,"column_end":76}},{"value":"/positive offset from the sequence number in this segment.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":129162,"byte_end":129222,"line_start":735,"line_end":735,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":129227,"byte_end":129230,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/The urgent pointer points to the sequence number of the octet following","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":129235,"byte_end":129309,"line_start":737,"line_end":737,"column_start":5,"column_end":79}},{"value":"/the urgent data.  This field is only be interpreted in segments with","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":129314,"byte_end":129385,"line_start":738,"line_end":738,"column_start":5,"column_end":76}},{"value":"/the URG control bit set.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":129390,"byte_end":129417,"line_start":739,"line_end":739,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":129556,"byte_end":129563,"line_start":745,"line_end":745,"column_start":12,"column_end":19},"name":"options","qualname":"<TcpHeaderSlice>::options","value":"pub fn options(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":"Options of the header\n","sig":null,"attributes":[{"value":"/Options of the header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":129520,"byte_end":129544,"line_start":744,"line_end":744,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":129764,"byte_end":129780,"line_start":750,"line_end":750,"column_start":12,"column_end":28},"name":"options_iterator","qualname":"<TcpHeaderSlice>::options_iterator","value":"pub fn options_iterator(&Self) -> TcpOptionsIterator","parent":null,"children":[],"decl_id":null,"docs":"Returns an iterator that allows to iterate through all known TCP header options.\n","sig":null,"attributes":[{"value":"/Returns an iterator that allows to iterate through all known TCP header options.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":129669,"byte_end":129752,"line_start":749,"line_end":749,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":129957,"byte_end":129966,"line_start":755,"line_end":755,"column_start":12,"column_end":21},"name":"to_header","qualname":"<TcpHeaderSlice>::to_header","value":"pub fn to_header(&Self) -> TcpHeader","parent":null,"children":[],"decl_id":null,"docs":"Decode all the fields and copy the results to a TcpHeader struct\n","sig":null,"attributes":[{"value":"/Decode all the fields and copy the results to a TcpHeader struct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":129878,"byte_end":129945,"line_start":754,"line_end":754,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":131110,"byte_end":131128,"line_start":786,"line_end":786,"column_start":12,"column_end":30},"name":"calc_checksum_ipv4","qualname":"<TcpHeaderSlice>::calc_checksum_ipv4","value":"pub fn calc_checksum_ipv4(&Self, &Ipv4HeaderSlice, &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the upd header checksum based on a ipv4 header and returns the result. This does NOT set the checksum.\n","sig":null,"attributes":[{"value":"/Calculates the upd header checksum based on a ipv4 header and returns the result. This does NOT set the checksum.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":130982,"byte_end":131098,"line_start":785,"line_end":785,"column_start":5,"column_end":121}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":131443,"byte_end":131465,"line_start":791,"line_end":791,"column_start":12,"column_end":34},"name":"calc_checksum_ipv4_raw","qualname":"<TcpHeaderSlice>::calc_checksum_ipv4_raw","value":"pub fn calc_checksum_ipv4_raw(&Self, &[u8], &[u8], &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the checksum for the current header in ipv4 mode and returns the result. This does NOT set the checksum.\n","sig":null,"attributes":[{"value":"/Calculates the checksum for the current header in ipv4 mode and returns the result. This does NOT set the checksum.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":131313,"byte_end":131431,"line_start":790,"line_end":790,"column_start":5,"column_end":123}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":132549,"byte_end":132567,"line_start":810,"line_end":810,"column_start":12,"column_end":30},"name":"calc_checksum_ipv6","qualname":"<TcpHeaderSlice>::calc_checksum_ipv6","value":"pub fn calc_checksum_ipv6(&Self, &Ipv6HeaderSlice, &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the upd header checksum based on a ipv6 header and returns the result. This does NOT set the checksum..\n","sig":null,"attributes":[{"value":"/Calculates the upd header checksum based on a ipv6 header and returns the result. This does NOT set the checksum..","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":132420,"byte_end":132537,"line_start":809,"line_end":809,"column_start":5,"column_end":122}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":132882,"byte_end":132904,"line_start":815,"line_end":815,"column_start":12,"column_end":34},"name":"calc_checksum_ipv6_raw","qualname":"<TcpHeaderSlice>::calc_checksum_ipv6_raw","value":"pub fn calc_checksum_ipv6_raw(&Self, &[u8], &[u8], &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the checksum for the current header in ipv6 mode and returns the result. This does NOT set the checksum.\n","sig":null,"attributes":[{"value":"/Calculates the checksum for the current header in ipv6 mode and returns the result. This does NOT set the checksum.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":132752,"byte_end":132870,"line_start":814,"line_end":814,"column_start":5,"column_end":123}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1540},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":135332,"byte_end":135335,"line_start":877,"line_end":877,"column_start":5,"column_end":8},"name":"Nop","qualname":"::transport::tcp::TcpOptionElement::Nop","value":"TcpOptionElement::Nop","parent":{"krate":0,"index":1539},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1542},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":135341,"byte_end":135359,"line_start":878,"line_end":878,"column_start":5,"column_end":23},"name":"MaximumSegmentSize","qualname":"::transport::tcp::TcpOptionElement::MaximumSegmentSize","value":"TcpOptionElement::MaximumSegmentSize(u16)","parent":{"krate":0,"index":1539},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1545},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":135370,"byte_end":135381,"line_start":879,"line_end":879,"column_start":5,"column_end":16},"name":"WindowScale","qualname":"::transport::tcp::TcpOptionElement::WindowScale","value":"TcpOptionElement::WindowScale(u8)","parent":{"krate":0,"index":1539},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1548},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":135391,"byte_end":135424,"line_start":880,"line_end":880,"column_start":5,"column_end":38},"name":"SelectiveAcknowledgementPermitted","qualname":"::transport::tcp::TcpOptionElement::SelectiveAcknowledgementPermitted","value":"TcpOptionElement::SelectiveAcknowledgementPermitted","parent":{"krate":0,"index":1539},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1550},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":135430,"byte_end":135454,"line_start":881,"line_end":881,"column_start":5,"column_end":29},"name":"SelectiveAcknowledgement","qualname":"::transport::tcp::TcpOptionElement::SelectiveAcknowledgement","value":"TcpOptionElement::SelectiveAcknowledgement((u32, u32), [Option<(u32, u32)>; ])","parent":{"krate":0,"index":1539},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1555},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":135588,"byte_end":135597,"line_start":883,"line_end":883,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::transport::tcp::TcpOptionElement::Timestamp","value":"TcpOptionElement::Timestamp(u32, u32)","parent":{"krate":0,"index":1539},"children":[],"decl_id":null,"docs":"Timestamp & echo (first number is the sender timestamp, the second the echo timestamp)\n","sig":null,"attributes":[{"value":"/Timestamp & echo (first number is the sender timestamp, the second the echo timestamp)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":135494,"byte_end":135583,"line_start":882,"line_end":882,"column_start":5,"column_end":94}}]},{"kind":"Enum","id":{"krate":0,"index":1539},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":135309,"byte_end":135325,"line_start":876,"line_end":876,"column_start":10,"column_end":26},"name":"TcpOptionElement","qualname":"::transport::tcp::TcpOptionElement","value":"pub enum TcpOptionElement {\n    Nop,\n    MaximumSegmentSize(u16),\n    WindowScale(u8),\n    SelectiveAcknowledgementPermitted,\n    SelectiveAcknowledgement((u32, u32), [Option<(u32, u32)>; ]),\n\n    ///Timestamp & echo (first number is the sender timestamp, the second the echo timestamp)\n    Timestamp(u32, u32),\n}","parent":null,"children":[{"krate":0,"index":1540},{"krate":0,"index":1542},{"krate":0,"index":1545},{"krate":0,"index":1548},{"krate":0,"index":1550},{"krate":0,"index":1555}],"decl_id":null,"docs":"Different kinds of options that can be present in the options part of a tcp header.\n","sig":null,"attributes":[{"value":"/Different kinds of options that can be present in the options part of a tcp header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":135174,"byte_end":135260,"line_start":874,"line_end":874,"column_start":1,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1572},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":135871,"byte_end":135891,"line_start":890,"line_end":890,"column_start":5,"column_end":25},"name":"UnexpectedEndOfSlice","qualname":"::transport::tcp::TcpOptionReadError::UnexpectedEndOfSlice","value":"TcpOptionReadError::UnexpectedEndOfSlice(u8)","parent":{"krate":0,"index":1571},"children":[],"decl_id":null,"docs":"Returned if an option id was read, but there was not enough memory in the options left to completely read it.\n","sig":null,"attributes":[{"value":"/Returned if an option id was read, but there was not enough memory in the options left to completely read it.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":135754,"byte_end":135866,"line_start":889,"line_end":889,"column_start":5,"column_end":117}}]},{"kind":"StructVariant","id":{"krate":0,"index":1575},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":136001,"byte_end":136015,"line_start":893,"line_end":893,"column_start":5,"column_end":19},"name":"UnexpectedSize","qualname":"::transport::tcp::TcpOptionReadError::UnexpectedSize","value":"TcpOptionReadError::UnexpectedSize { option_id, size }","parent":{"krate":0,"index":1571},"children":[],"decl_id":null,"docs":"Returned if the option as an unexpected size argument (e.g. != 4 for maximum segment size).\n","sig":null,"attributes":[{"value":"/Returned if the option as an unexpected size argument (e.g. != 4 for maximum segment size).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":135902,"byte_end":135996,"line_start":892,"line_end":892,"column_start":5,"column_end":99}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1578},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":136224,"byte_end":136233,"line_start":898,"line_end":898,"column_start":5,"column_end":14},"name":"UnknownId","qualname":"::transport::tcp::TcpOptionReadError::UnknownId","value":"TcpOptionReadError::UnknownId(u8)","parent":{"krate":0,"index":1571},"children":[],"decl_id":null,"docs":"Returned if an unknown tcp header option is encountered.","sig":null,"attributes":[{"value":"/Returned if an unknown tcp header option is encountered.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":136048,"byte_end":136107,"line_start":895,"line_end":895,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":136112,"byte_end":136115,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/The first element is the identifier and the slice contains the rest of data left in the options.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":136120,"byte_end":136219,"line_start":897,"line_end":897,"column_start":5,"column_end":104}}]},{"kind":"Enum","id":{"krate":0,"index":1571},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":135729,"byte_end":135747,"line_start":888,"line_end":888,"column_start":10,"column_end":28},"name":"TcpOptionReadError","qualname":"::transport::tcp::TcpOptionReadError","value":"pub enum TcpOptionReadError {\n\n    ///Returned if an option id was read, but there was not enough memory in the options left to completely read it.\n    UnexpectedEndOfSlice(u8),\n\n    ///Returned if the option as an unexpected size argument (e.g. != 4 for maximum segment size).\n    UnexpectedSize {\n        option_id: u8,\n        size: u8,\n    },\n\n    ///Returned if an unknown tcp header option is encountered.\n    ///\n    ///The first element is the identifier and the slice contains the rest of data left in the options.\n    UnknownId(u8),\n}","parent":null,"children":[{"krate":0,"index":1572},{"krate":0,"index":1575},{"krate":0,"index":1578}],"decl_id":null,"docs":"Errors that can occour while reading the options of a TCP header.\n","sig":null,"attributes":[{"value":"/Errors that can occour while reading the options of a TCP header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":135612,"byte_end":135680,"line_start":886,"line_end":886,"column_start":1,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1593},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":136792,"byte_end":136806,"line_start":909,"line_end":909,"column_start":5,"column_end":19},"name":"NotEnoughSpace","qualname":"::transport::tcp::TcpOptionWriteError::NotEnoughSpace","value":"TcpOptionWriteError::NotEnoughSpace(usize)","parent":{"krate":0,"index":1592},"children":[],"decl_id":null,"docs":"There is not enough memory to store all options in the options section of the header (maximum 40 bytes).","sig":null,"attributes":[{"value":"/There is not enough memory to store all options in the options section of the header (maximum 40 bytes).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":136384,"byte_end":136491,"line_start":904,"line_end":904,"column_start":5,"column_end":112}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":136496,"byte_end":136499,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/The options size is limited by the 4 bit data_offset field in the header which describes","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":136504,"byte_end":136595,"line_start":906,"line_end":906,"column_start":5,"column_end":96}},{"value":"/the total tcp header size in multiple of 4 bytes. This leads to a maximum size for the options","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":136600,"byte_end":136697,"line_start":907,"line_end":907,"column_start":5,"column_end":102}},{"value":"/part of the header of 4*(15 - 5) (minus 5 for the size of the tcp header itself). ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":136702,"byte_end":136787,"line_start":908,"line_end":908,"column_start":5,"column_end":90}}]},{"kind":"Enum","id":{"krate":0,"index":1592},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":136358,"byte_end":136377,"line_start":903,"line_end":903,"column_start":10,"column_end":29},"name":"TcpOptionWriteError","qualname":"::transport::tcp::TcpOptionWriteError","value":"pub enum TcpOptionWriteError {\n\n    ///There is not enough memory to store all options in the options section of the header (maximum 40 bytes).\n    ///\n    ///The options size is limited by the 4 bit data_offset field in the header which describes\n    ///the total tcp header size in multiple of 4 bytes. This leads to a maximum size for the options\n    ///part of the header of 4*(15 - 5) (minus 5 for the size of the tcp header itself). \n    NotEnoughSpace(usize),\n}","parent":null,"children":[{"krate":0,"index":1593}],"decl_id":null,"docs":"Errors that can occour when setting the options of a tcp header.\n","sig":null,"attributes":[{"value":"/Errors that can occour when setting the options of a tcp header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":136242,"byte_end":136309,"line_start":901,"line_end":901,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":451},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":136885,"byte_end":136903,"line_start":913,"line_end":913,"column_start":12,"column_end":30},"name":"TcpOptionsIterator","qualname":"::transport::tcp::TcpOptionsIterator","value":"TcpOptionsIterator {  }","parent":null,"children":[{"krate":0,"index":453}],"decl_id":null,"docs":"Allows iterating over the options after a TCP header.\n","sig":null,"attributes":[{"value":"/Allows iterating over the options after a TCP header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":136817,"byte_end":136873,"line_start":912,"line_end":912,"column_start":1,"column_end":57}}]},{"kind":"Const","id":{"krate":0,"index":454},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":136945,"byte_end":136962,"line_start":917,"line_end":917,"column_start":11,"column_end":28},"name":"TCP_OPTION_ID_END","qualname":"::transport::tcp::TCP_OPTION_ID_END","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":455},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":136982,"byte_end":136999,"line_start":918,"line_end":918,"column_start":11,"column_end":28},"name":"TCP_OPTION_ID_NOP","qualname":"::transport::tcp::TCP_OPTION_ID_NOP","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":456},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":137019,"byte_end":137053,"line_start":919,"line_end":919,"column_start":11,"column_end":45},"name":"TCP_OPTION_ID_MAXIMUM_SEGMENT_SIZE","qualname":"::transport::tcp::TCP_OPTION_ID_MAXIMUM_SEGMENT_SIZE","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":457},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":137073,"byte_end":137099,"line_start":920,"line_end":920,"column_start":11,"column_end":37},"name":"TCP_OPTION_ID_WINDOW_SCALE","qualname":"::transport::tcp::TCP_OPTION_ID_WINDOW_SCALE","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":458},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":137119,"byte_end":137156,"line_start":921,"line_end":921,"column_start":11,"column_end":48},"name":"TCP_OPTION_ID_SELECTIVE_ACK_PERMITTED","qualname":"::transport::tcp::TCP_OPTION_ID_SELECTIVE_ACK_PERMITTED","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":459},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":137176,"byte_end":137203,"line_start":922,"line_end":922,"column_start":11,"column_end":38},"name":"TCP_OPTION_ID_SELECTIVE_ACK","qualname":"::transport::tcp::TCP_OPTION_ID_SELECTIVE_ACK","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":460},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":137223,"byte_end":137246,"line_start":923,"line_end":923,"column_start":11,"column_end":34},"name":"TCP_OPTION_ID_TIMESTAMP","qualname":"::transport::tcp::TCP_OPTION_ID_TIMESTAMP","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":137382,"byte_end":137392,"line_start":927,"line_end":927,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<TcpOptionsIterator>::from_slice","value":"pub fn from_slice(&'a [u8]) -> TcpOptionsIterator","parent":null,"children":[],"decl_id":null,"docs":"Creates an options iterator from a slice containing encoded tcp options.\n","sig":null,"attributes":[{"value":"/Creates an options iterator from a slice containing encoded tcp options.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":137295,"byte_end":137370,"line_start":926,"line_end":926,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":137556,"byte_end":137560,"line_start":932,"line_end":932,"column_start":12,"column_end":16},"name":"rest","qualname":"<TcpOptionsIterator>::rest","value":"pub fn rest(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns the non processed part of the options slice.\n","sig":null,"attributes":[{"value":"/Returns the non processed part of the options slice.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":137489,"byte_end":137544,"line_start":931,"line_end":931,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1608},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":87498,"byte_end":87501,"line_start":11,"line_end":11,"column_start":5,"column_end":8},"name":"Udp","qualname":"::transport::TransportHeader::Udp","value":"TransportHeader::Udp(udp::UdpHeader)","parent":{"krate":0,"index":1607},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1611},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":87523,"byte_end":87526,"line_start":12,"line_end":12,"column_start":5,"column_end":8},"name":"Tcp","qualname":"::transport::TransportHeader::Tcp","value":"TransportHeader::Tcp(tcp::TcpHeader)","parent":{"krate":0,"index":1607},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1607},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":87476,"byte_end":87491,"line_start":10,"line_end":10,"column_start":10,"column_end":25},"name":"TransportHeader","qualname":"::transport::TransportHeader","value":"pub enum TransportHeader { Udp(udp::UdpHeader), Tcp(tcp::TcpHeader), }","parent":null,"children":[{"krate":0,"index":1608},{"krate":0,"index":1611}],"decl_id":null,"docs":"The possible headers on the transport layer\n","sig":null,"attributes":[{"value":"/The possible headers on the transport layer","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":87381,"byte_end":87427,"line_start":8,"line_end":8,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":87698,"byte_end":87701,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"udp","qualname":"<TransportHeader>::udp","value":"pub fn udp(Self) -> Option<udp::UdpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Returns Result::Some containing the udp header if self has the value Udp. \nOtherwise None is returned.\n","sig":null,"attributes":[{"value":"/Returns Result::Some containing the udp header if self has the value Udp. ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":87574,"byte_end":87651,"line_start":17,"line_end":17,"column_start":5,"column_end":82}},{"value":"/Otherwise None is returned.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":87656,"byte_end":87686,"line_start":18,"line_end":18,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":88007,"byte_end":88014,"line_start":29,"line_end":29,"column_start":12,"column_end":19},"name":"mut_udp","qualname":"<TransportHeader>::mut_udp","value":"pub fn mut_udp(&mut Self) -> Option<&mut udp::UdpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Returns Result::Some containing the udp header if self has the value Udp. \nOtherwise None is returned.\n","sig":null,"attributes":[{"value":"/Returns Result::Some containing the udp header if self has the value Udp. ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":87883,"byte_end":87960,"line_start":27,"line_end":27,"column_start":5,"column_end":82}},{"value":"/Otherwise None is returned.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":87965,"byte_end":87995,"line_start":28,"line_end":28,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":88338,"byte_end":88341,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"tcp","qualname":"<TransportHeader>::tcp","value":"pub fn tcp(Self) -> Option<tcp::TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Returns Result::Some containing the tcp header if self has the value Tcp. \nOtherwise None is returned.\n","sig":null,"attributes":[{"value":"/Returns Result::Some containing the tcp header if self has the value Tcp. ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":88214,"byte_end":88291,"line_start":37,"line_end":37,"column_start":5,"column_end":82}},{"value":"/Otherwise None is returned.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":88296,"byte_end":88326,"line_start":38,"line_end":38,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":88669,"byte_end":88676,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"name":"mut_tcp","qualname":"<TransportHeader>::mut_tcp","value":"pub fn mut_tcp(&mut Self) -> Option<&mut tcp::TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Returns Result::Some containing a mutable refernce to the tcp header if self has the value Tcp. \nOtherwise None is returned.\n","sig":null,"attributes":[{"value":"/Returns Result::Some containing a mutable refernce to the tcp header if self has the value Tcp. ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":88523,"byte_end":88622,"line_start":47,"line_end":47,"column_start":5,"column_end":104}},{"value":"/Otherwise None is returned.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":88627,"byte_end":88657,"line_start":48,"line_end":48,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":89004,"byte_end":89014,"line_start":59,"line_end":59,"column_start":12,"column_end":22},"name":"header_len","qualname":"<TransportHeader>::header_len","value":"pub fn header_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"Returns the size of the transport header (in case of UDP fixed, \nin case of TCP cotanining the options).dd\n","sig":null,"attributes":[{"value":"/Returns the size of the transport header (in case of UDP fixed, ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":88876,"byte_end":88943,"line_start":57,"line_end":57,"column_start":5,"column_end":72}},{"value":"/in case of TCP cotanining the options).dd","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":88948,"byte_end":88992,"line_start":58,"line_end":58,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":89341,"byte_end":89361,"line_start":69,"line_end":69,"column_start":12,"column_end":32},"name":"update_checksum_ipv4","qualname":"<TransportHeader>::update_checksum_ipv4","value":"pub fn update_checksum_ipv4(&mut Self, &Ipv4Header, &[u8])\n-> Result<(), ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the checksum for the transport header & sets it in the header for\nan ipv4 header.\n","sig":null,"attributes":[{"value":"/Calculates the checksum for the transport header & sets it in the header for","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":89227,"byte_end":89306,"line_start":67,"line_end":67,"column_start":5,"column_end":84}},{"value":"/an ipv4 header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":89311,"byte_end":89329,"line_start":68,"line_end":68,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":89902,"byte_end":89922,"line_start":84,"line_end":84,"column_start":12,"column_end":32},"name":"update_checksum_ipv6","qualname":"<TransportHeader>::update_checksum_ipv6","value":"pub fn update_checksum_ipv6(&mut Self, &Ipv6Header, &[u8])\n-> Result<(), ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the checksum for the transport header & sets it in the header for\nan ipv6 header.\n","sig":null,"attributes":[{"value":"/Calculates the checksum for the transport header & sets it in the header for","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":89788,"byte_end":89867,"line_start":82,"line_end":82,"column_start":5,"column_end":84}},{"value":"/an ipv6 header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":89872,"byte_end":89890,"line_start":83,"line_end":83,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":90411,"byte_end":90416,"line_start":98,"line_end":98,"column_start":12,"column_end":17},"name":"write","qualname":"<TransportHeader>::write","value":"pub fn write<T: io::Write + Sized>(&Self, &mut T) -> Result<(), WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Write the transport header to the given writer.\n","sig":null,"attributes":[{"value":"/Write the transport header to the given writer.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":90349,"byte_end":90399,"line_start":97,"line_end":97,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":503},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144653,"byte_end":144666,"line_start":41,"line_end":41,"column_start":12,"column_end":25},"name":"PacketBuilder","qualname":"::packet_builder::PacketBuilder","value":"PacketBuilder {  }","parent":null,"children":[],"decl_id":null,"docs":" Helper for building packets.","sig":null,"attributes":[{"value":"/ Helper for building packets.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":143410,"byte_end":143442,"line_start":6,"line_end":6,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":143443,"byte_end":143446,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The packet builder allows the easy construction of a packet from the ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":143447,"byte_end":143520,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ ethernet II layer downwards including ipv6, ipv4, the udp header and the ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":143521,"byte_end":143598,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/ actual payload. The packet builder automatically calculates lengths & checksums ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":143599,"byte_end":143683,"line_start":10,"line_end":10,"column_start":1,"column_end":85}},{"value":"/ for ip & udp and set type identifiers for ethernetII and ip. This makes it ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":143684,"byte_end":143763,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ easy and less error prone to construct custom packets.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":143764,"byte_end":143822,"line_start":12,"line_end":12,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":143823,"byte_end":143826,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Example:","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":143827,"byte_end":143841,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":143842,"byte_end":143845,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Generating a packet that starts with an Ethernet II header:","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":143846,"byte_end":143909,"line_start":16,"line_end":16,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":143910,"byte_end":143913,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":143914,"byte_end":143921,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/ use etherparse::PacketBuilder;","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":143922,"byte_end":143956,"line_start":19,"line_end":19,"column_start":1,"column_end":35}},{"value":"/ ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":143957,"byte_end":143961,"line_start":20,"line_end":20,"column_start":1,"column_end":5}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":143962,"byte_end":143995,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"/     ethernet2([1,2,3,4,5,6],     //source mac","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":143996,"byte_end":144045,"line_start":22,"line_end":22,"column_start":1,"column_end":50}},{"value":"/               [7,8,9,10,11,12]) //destionation mac","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144046,"byte_end":144100,"line_start":23,"line_end":23,"column_start":1,"column_end":55}},{"value":"/    .ipv4([192,168,1,1], //source ip","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144101,"byte_end":144140,"line_start":24,"line_end":24,"column_start":1,"column_end":40}},{"value":"/          [192,168,1,2], //desitionation ip","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144141,"byte_end":144187,"line_start":25,"line_end":25,"column_start":1,"column_end":47}},{"value":"/          20)            //time to life","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144188,"byte_end":144230,"line_start":26,"line_end":26,"column_start":1,"column_end":43}},{"value":"/    .udp(21,    //source port ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144231,"byte_end":144264,"line_start":27,"line_end":27,"column_start":1,"column_end":34}},{"value":"/         1234); //desitnation port","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144265,"byte_end":144302,"line_start":28,"line_end":28,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144303,"byte_end":144306,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ //payload of the udp packet","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144307,"byte_end":144338,"line_start":30,"line_end":30,"column_start":1,"column_end":32}},{"value":"/ let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144339,"byte_end":144375,"line_start":31,"line_end":31,"column_start":1,"column_end":37}},{"value":"/     ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144376,"byte_end":144384,"line_start":32,"line_end":32,"column_start":1,"column_end":9}},{"value":"/ //get some memory to store the result","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144385,"byte_end":144426,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/ let mut result = Vec::<u8>::with_capacity(","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144427,"byte_end":144473,"line_start":34,"line_end":34,"column_start":1,"column_end":47}},{"value":"/                     builder.size(payload.len()));","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144474,"byte_end":144527,"line_start":35,"line_end":35,"column_start":1,"column_end":54}},{"value":"/     ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144528,"byte_end":144536,"line_start":36,"line_end":36,"column_start":1,"column_end":9}},{"value":"/ //serialize","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144537,"byte_end":144552,"line_start":37,"line_end":37,"column_start":1,"column_end":16}},{"value":"/ builder.write(&mut result, &payload).unwrap();","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144553,"byte_end":144603,"line_start":38,"line_end":38,"column_start":1,"column_end":51}},{"value":"/ println!(\"{:?}\", result);","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144604,"byte_end":144633,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144634,"byte_end":144641,"line_start":40,"line_end":40,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":145607,"byte_end":145616,"line_start":72,"line_end":72,"column_start":12,"column_end":21},"name":"ethernet2","qualname":"<PacketBuilder>::ethernet2","value":"pub fn ethernet2([u8; ], [u8; ]) -> PacketBuilderStep<Ethernet2Header>","parent":null,"children":[],"decl_id":null,"docs":" Start an packet with an ethernetII header.","sig":null,"attributes":[{"value":"/ Start an packet with an ethernetII header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144696,"byte_end":144742,"line_start":44,"line_end":44,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144747,"byte_end":144750,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144755,"byte_end":144768,"line_start":46,"line_end":46,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144773,"byte_end":144776,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ Basic usage: ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144781,"byte_end":144798,"line_start":48,"line_end":48,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144803,"byte_end":144806,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144811,"byte_end":144818,"line_start":50,"line_end":50,"column_start":5,"column_end":12}},{"value":"/ # use etherparse::PacketBuilder;","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144823,"byte_end":144859,"line_start":51,"line_end":51,"column_start":5,"column_end":41}},{"value":"/ #","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144864,"byte_end":144869,"line_start":52,"line_end":52,"column_start":5,"column_end":10}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144874,"byte_end":144907,"line_start":53,"line_end":53,"column_start":5,"column_end":38}},{"value":"/     ethernet2([1,2,3,4,5,6],     //source mac","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144912,"byte_end":144961,"line_start":54,"line_end":54,"column_start":5,"column_end":54}},{"value":"/               [7,8,9,10,11,12]) //destionation mac","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144966,"byte_end":145020,"line_start":55,"line_end":55,"column_start":5,"column_end":59}},{"value":"/    .ipv4([192,168,1,1], //source ip","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":145025,"byte_end":145064,"line_start":56,"line_end":56,"column_start":5,"column_end":44}},{"value":"/          [192,168,1,2], //desitionation ip","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":145069,"byte_end":145115,"line_start":57,"line_end":57,"column_start":5,"column_end":51}},{"value":"/          20)            //time to life","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":145120,"byte_end":145162,"line_start":58,"line_end":58,"column_start":5,"column_end":47}},{"value":"/    .udp(21,    //source port ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":145167,"byte_end":145200,"line_start":59,"line_end":59,"column_start":5,"column_end":38}},{"value":"/         1234); //desitnation port","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":145205,"byte_end":145242,"line_start":60,"line_end":60,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":145247,"byte_end":145250,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ //payload of the udp packet","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":145255,"byte_end":145286,"line_start":62,"line_end":62,"column_start":5,"column_end":36}},{"value":"/ let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":145291,"byte_end":145327,"line_start":63,"line_end":63,"column_start":5,"column_end":41}},{"value":"/     ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":145332,"byte_end":145340,"line_start":64,"line_end":64,"column_start":5,"column_end":13}},{"value":"/ //get some memory to store the result","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":145345,"byte_end":145386,"line_start":65,"line_end":65,"column_start":5,"column_end":46}},{"value":"/ let mut result = Vec::<u8>::with_capacity(","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":145391,"byte_end":145437,"line_start":66,"line_end":66,"column_start":5,"column_end":51}},{"value":"/                     builder.size(payload.len()));","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":145442,"byte_end":145495,"line_start":67,"line_end":67,"column_start":5,"column_end":58}},{"value":"/     ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":145500,"byte_end":145508,"line_start":68,"line_end":68,"column_start":5,"column_end":13}},{"value":"/ //serialize","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":145513,"byte_end":145528,"line_start":69,"line_end":69,"column_start":5,"column_end":20}},{"value":"/ builder.write(&mut result, &payload).unwrap();","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":145533,"byte_end":145583,"line_start":70,"line_end":70,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":145588,"byte_end":145595,"line_start":71,"line_end":71,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146944,"byte_end":146948,"line_start":114,"line_end":114,"column_start":12,"column_end":16},"name":"ipv4","qualname":"<PacketBuilder>::ipv4","value":"pub fn ipv4([u8; ], [u8; ], u8) -> PacketBuilderStep<IpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Starts a packet with an IPv4 header.","sig":null,"attributes":[{"value":"/Starts a packet with an IPv4 header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146153,"byte_end":146192,"line_start":88,"line_end":88,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146197,"byte_end":146200,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146205,"byte_end":146218,"line_start":90,"line_end":90,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146223,"byte_end":146226,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Basic usage: ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146231,"byte_end":146248,"line_start":92,"line_end":92,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146253,"byte_end":146256,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146261,"byte_end":146268,"line_start":94,"line_end":94,"column_start":5,"column_end":12}},{"value":"/ # use etherparse::PacketBuilder;","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146273,"byte_end":146309,"line_start":95,"line_end":95,"column_start":5,"column_end":41}},{"value":"/ #","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146314,"byte_end":146319,"line_start":96,"line_end":96,"column_start":5,"column_end":10}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146324,"byte_end":146357,"line_start":97,"line_end":97,"column_start":5,"column_end":38}},{"value":"/    ipv4([192,168,1,1],  //source ip","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146362,"byte_end":146401,"line_start":98,"line_end":98,"column_start":5,"column_end":44}},{"value":"/          [192,168,1,2], //desitionation ip","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146406,"byte_end":146452,"line_start":99,"line_end":99,"column_start":5,"column_end":51}},{"value":"/          20)            //time to life","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146457,"byte_end":146499,"line_start":100,"line_end":100,"column_start":5,"column_end":47}},{"value":"/    .udp(21,    //source port ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146504,"byte_end":146537,"line_start":101,"line_end":101,"column_start":5,"column_end":38}},{"value":"/         1234); //desitnation port","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146542,"byte_end":146579,"line_start":102,"line_end":102,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146584,"byte_end":146587,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ //payload of the udp packet","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146592,"byte_end":146623,"line_start":104,"line_end":104,"column_start":5,"column_end":36}},{"value":"/ let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146628,"byte_end":146664,"line_start":105,"line_end":105,"column_start":5,"column_end":41}},{"value":"/     ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146669,"byte_end":146677,"line_start":106,"line_end":106,"column_start":5,"column_end":13}},{"value":"/ //get some memory to store the result","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146682,"byte_end":146723,"line_start":107,"line_end":107,"column_start":5,"column_end":46}},{"value":"/ let mut result = Vec::<u8>::with_capacity(","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146728,"byte_end":146774,"line_start":108,"line_end":108,"column_start":5,"column_end":51}},{"value":"/                     builder.size(payload.len()));","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146779,"byte_end":146832,"line_start":109,"line_end":109,"column_start":5,"column_end":58}},{"value":"/     ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146837,"byte_end":146845,"line_start":110,"line_end":110,"column_start":5,"column_end":13}},{"value":"/ //serialize","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146850,"byte_end":146865,"line_start":111,"line_end":111,"column_start":5,"column_end":20}},{"value":"/ builder.write(&mut result, &payload).unwrap();","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146870,"byte_end":146920,"line_start":112,"line_end":112,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":146925,"byte_end":146932,"line_start":113,"line_end":113,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":148285,"byte_end":148289,"line_start":156,"line_end":156,"column_start":12,"column_end":16},"name":"ipv6","qualname":"<PacketBuilder>::ipv6","value":"pub fn ipv6([u8; ], [u8; ], u8) -> PacketBuilderStep<IpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Start a packet with an IPv6 header.","sig":null,"attributes":[{"value":"/Start a packet with an IPv6 header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147382,"byte_end":147420,"line_start":126,"line_end":126,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147425,"byte_end":147428,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147433,"byte_end":147446,"line_start":128,"line_end":128,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147451,"byte_end":147454,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Basic usage: ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147459,"byte_end":147476,"line_start":130,"line_end":130,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147481,"byte_end":147484,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147489,"byte_end":147496,"line_start":132,"line_end":132,"column_start":5,"column_end":12}},{"value":"/ # use etherparse::PacketBuilder;","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147501,"byte_end":147537,"line_start":133,"line_end":133,"column_start":5,"column_end":41}},{"value":"/ #","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147542,"byte_end":147547,"line_start":134,"line_end":134,"column_start":5,"column_end":10}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147552,"byte_end":147585,"line_start":135,"line_end":135,"column_start":5,"column_end":38}},{"value":"/     ipv6(","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147590,"byte_end":147603,"line_start":136,"line_end":136,"column_start":5,"column_end":18}},{"value":"/         //source","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147608,"byte_end":147628,"line_start":137,"line_end":137,"column_start":5,"column_end":25}},{"value":"/         [11,12,13,14,15,16,17,18,19,10,21,22,23,24,25,26],","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147633,"byte_end":147695,"line_start":138,"line_end":138,"column_start":5,"column_end":67}},{"value":"/         //destination","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147700,"byte_end":147725,"line_start":139,"line_end":139,"column_start":5,"column_end":30}},{"value":"/         [31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147730,"byte_end":147792,"line_start":140,"line_end":140,"column_start":5,"column_end":67}},{"value":"/         //hop_limit","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147797,"byte_end":147820,"line_start":141,"line_end":141,"column_start":5,"column_end":28}},{"value":"/         47)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147825,"byte_end":147840,"line_start":142,"line_end":142,"column_start":5,"column_end":20}},{"value":"/    .udp(21,    //source port ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147845,"byte_end":147878,"line_start":143,"line_end":143,"column_start":5,"column_end":38}},{"value":"/         1234); //desitnation port","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147883,"byte_end":147920,"line_start":144,"line_end":144,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147925,"byte_end":147928,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ //payload of the udp packet","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147933,"byte_end":147964,"line_start":146,"line_end":146,"column_start":5,"column_end":36}},{"value":"/ let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":147969,"byte_end":148005,"line_start":147,"line_end":147,"column_start":5,"column_end":41}},{"value":"/     ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":148010,"byte_end":148018,"line_start":148,"line_end":148,"column_start":5,"column_end":13}},{"value":"/ //get some memory to store the result","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":148023,"byte_end":148064,"line_start":149,"line_end":149,"column_start":5,"column_end":46}},{"value":"/ let mut result = Vec::<u8>::with_capacity(","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":148069,"byte_end":148115,"line_start":150,"line_end":150,"column_start":5,"column_end":51}},{"value":"/                     builder.size(payload.len()));","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":148120,"byte_end":148173,"line_start":151,"line_end":151,"column_start":5,"column_end":58}},{"value":"/     ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":148178,"byte_end":148186,"line_start":152,"line_end":152,"column_start":5,"column_end":13}},{"value":"/ //serialize","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":148191,"byte_end":148206,"line_start":153,"line_end":153,"column_start":5,"column_end":20}},{"value":"/ builder.write(&mut result, &payload).unwrap();","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":148211,"byte_end":148261,"line_start":154,"line_end":154,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":148266,"byte_end":148273,"line_start":155,"line_end":155,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150775,"byte_end":150777,"line_start":228,"line_end":228,"column_start":12,"column_end":14},"name":"ip","qualname":"<PacketBuilder>::ip","value":"pub fn ip(IpHeader) -> PacketBuilderStep<IpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Starts a packet with an arbitrary ip header (length, protocol/next_header & checksum fields will be overwritten based on the rest of the packet).","sig":null,"attributes":[{"value":"/Starts a packet with an arbitrary ip header (length, protocol/next_header & checksum fields will be overwritten based on the rest of the packet).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":148719,"byte_end":148867,"line_start":168,"line_end":168,"column_start":5,"column_end":153}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":148872,"byte_end":148875,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":148880,"byte_end":148894,"line_start":170,"line_end":170,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":148899,"byte_end":148902,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ With an IPv4 header:","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":148907,"byte_end":148931,"line_start":172,"line_end":172,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":148936,"byte_end":148939,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":148944,"byte_end":148951,"line_start":174,"line_end":174,"column_start":5,"column_end":12}},{"value":"/ # use etherparse::*;","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":148956,"byte_end":148980,"line_start":175,"line_end":175,"column_start":5,"column_end":29}},{"value":"/ #","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":148985,"byte_end":148990,"line_start":176,"line_end":176,"column_start":5,"column_end":10}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":148995,"byte_end":149028,"line_start":177,"line_end":177,"column_start":5,"column_end":38}},{"value":"/    //payload_len, protocol & checksum will be replaced during write","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149033,"byte_end":149104,"line_start":178,"line_end":178,"column_start":5,"column_end":76}},{"value":"/    ip(IpHeader::Version4(Ipv4Header::new(","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149109,"byte_end":149154,"line_start":179,"line_end":179,"column_start":5,"column_end":50}},{"value":"/        0, //payload_len will be replaced during write","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149159,"byte_end":149216,"line_start":180,"line_end":180,"column_start":5,"column_end":62}},{"value":"/        12, //time_to_live","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149221,"byte_end":149250,"line_start":181,"line_end":181,"column_start":5,"column_end":34}},{"value":"/        IpTrafficClass::Udp, //will be replaced during write","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149255,"byte_end":149318,"line_start":182,"line_end":182,"column_start":5,"column_end":68}},{"value":"/        [0,1,2,3], //source","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149323,"byte_end":149353,"line_start":183,"line_end":183,"column_start":5,"column_end":35}},{"value":"/        [4,5,6,7] //destination","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149358,"byte_end":149392,"line_start":184,"line_end":184,"column_start":5,"column_end":39}},{"value":"/     )))","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149397,"byte_end":149408,"line_start":185,"line_end":185,"column_start":5,"column_end":16}},{"value":"/    .udp(21,    //source port ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149413,"byte_end":149446,"line_start":186,"line_end":186,"column_start":5,"column_end":38}},{"value":"/         1234); //desitnation port","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149451,"byte_end":149488,"line_start":187,"line_end":187,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149493,"byte_end":149496,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ //payload of the udp packet","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149501,"byte_end":149532,"line_start":189,"line_end":189,"column_start":5,"column_end":36}},{"value":"/ let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149537,"byte_end":149573,"line_start":190,"line_end":190,"column_start":5,"column_end":41}},{"value":"/     ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149578,"byte_end":149586,"line_start":191,"line_end":191,"column_start":5,"column_end":13}},{"value":"/ //get some memory to store the result","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149591,"byte_end":149632,"line_start":192,"line_end":192,"column_start":5,"column_end":46}},{"value":"/ let mut result = Vec::<u8>::with_capacity(","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149637,"byte_end":149683,"line_start":193,"line_end":193,"column_start":5,"column_end":51}},{"value":"/                     builder.size(payload.len()));","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149688,"byte_end":149741,"line_start":194,"line_end":194,"column_start":5,"column_end":58}},{"value":"/     ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149746,"byte_end":149754,"line_start":195,"line_end":195,"column_start":5,"column_end":13}},{"value":"/ //serialize","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149759,"byte_end":149774,"line_start":196,"line_end":196,"column_start":5,"column_end":20}},{"value":"/ builder.write(&mut result, &payload).unwrap();","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149779,"byte_end":149829,"line_start":197,"line_end":197,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149834,"byte_end":149841,"line_start":198,"line_end":198,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149846,"byte_end":149849,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ With an IPv6 header:","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149854,"byte_end":149878,"line_start":200,"line_end":200,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149883,"byte_end":149886,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149891,"byte_end":149898,"line_start":202,"line_end":202,"column_start":5,"column_end":12}},{"value":"/ # use etherparse::*;","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149903,"byte_end":149927,"line_start":203,"line_end":203,"column_start":5,"column_end":29}},{"value":"/ #","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149932,"byte_end":149937,"line_start":204,"line_end":204,"column_start":5,"column_end":10}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149942,"byte_end":149975,"line_start":205,"line_end":205,"column_start":5,"column_end":38}},{"value":"/    ip(IpHeader::Version6(Ipv6Header{","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":149980,"byte_end":150020,"line_start":206,"line_end":206,"column_start":5,"column_end":45}},{"value":"/         traffic_class: 0,","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150025,"byte_end":150054,"line_start":207,"line_end":207,"column_start":5,"column_end":34}},{"value":"/         flow_label: 0,","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150059,"byte_end":150085,"line_start":208,"line_end":208,"column_start":5,"column_end":31}},{"value":"/         payload_length: 0, //will be replaced during write","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150090,"byte_end":150152,"line_start":209,"line_end":209,"column_start":5,"column_end":67}},{"value":"/         next_header: 0, //will be replaced during write","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150157,"byte_end":150216,"line_start":210,"line_end":210,"column_start":5,"column_end":64}},{"value":"/         hop_limit: 4,","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150221,"byte_end":150246,"line_start":211,"line_end":211,"column_start":5,"column_end":30}},{"value":"/         source: [0;16],","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150251,"byte_end":150278,"line_start":212,"line_end":212,"column_start":5,"column_end":32}},{"value":"/         destination: [0;16]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150283,"byte_end":150314,"line_start":213,"line_end":213,"column_start":5,"column_end":36}},{"value":"/     }))","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150319,"byte_end":150330,"line_start":214,"line_end":214,"column_start":5,"column_end":16}},{"value":"/    .udp(21,    //source port ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150335,"byte_end":150368,"line_start":215,"line_end":215,"column_start":5,"column_end":38}},{"value":"/         1234); //desitnation port","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150373,"byte_end":150410,"line_start":216,"line_end":216,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150415,"byte_end":150418,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ //payload of the udp packet","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150423,"byte_end":150454,"line_start":218,"line_end":218,"column_start":5,"column_end":36}},{"value":"/ let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150459,"byte_end":150495,"line_start":219,"line_end":219,"column_start":5,"column_end":41}},{"value":"/     ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150500,"byte_end":150508,"line_start":220,"line_end":220,"column_start":5,"column_end":13}},{"value":"/ //get some memory to store the result","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150513,"byte_end":150554,"line_start":221,"line_end":221,"column_start":5,"column_end":46}},{"value":"/ let mut result = Vec::<u8>::with_capacity(","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150559,"byte_end":150605,"line_start":222,"line_end":222,"column_start":5,"column_end":51}},{"value":"/                     builder.size(payload.len()));","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150610,"byte_end":150663,"line_start":223,"line_end":223,"column_start":5,"column_end":58}},{"value":"/     ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150668,"byte_end":150676,"line_start":224,"line_end":224,"column_start":5,"column_end":13}},{"value":"/ //serialize","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150681,"byte_end":150696,"line_start":225,"line_end":225,"column_start":5,"column_end":20}},{"value":"/ builder.write(&mut result, &payload).unwrap();","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150701,"byte_end":150751,"line_start":226,"line_end":226,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":150756,"byte_end":150763,"line_start":227,"line_end":227,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":520},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":151408,"byte_end":151425,"line_start":249,"line_end":249,"column_start":12,"column_end":29},"name":"PacketBuilderStep","qualname":"::packet_builder::PacketBuilderStep","value":"PacketBuilderStep {  }","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523}],"decl_id":null,"docs":"An unfinished packet that is build with the packet builder\n","sig":null,"attributes":[{"value":"/An unfinished packet that is build with the packet builder","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":151335,"byte_end":151396,"line_start":248,"line_end":248,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":151587,"byte_end":151591,"line_start":256,"line_end":256,"column_start":12,"column_end":16},"name":"ipv4","qualname":"<PacketBuilderStep<Ethernet2Header>>::ipv4","value":"pub fn ipv4(Self, [u8; ], [u8; ], u8) -> PacketBuilderStep<IpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Add an ip v4 header\n","sig":null,"attributes":[{"value":"/Add an ip v4 header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":151553,"byte_end":151575,"line_start":255,"line_end":255,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":153500,"byte_end":153502,"line_start":312,"line_end":312,"column_start":12,"column_end":14},"name":"ip","qualname":"<PacketBuilderStep<Ethernet2Header>>::ip","value":"pub fn ip(Self, IpHeader) -> PacketBuilderStep<IpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Add an ip header (length, protocol/next_header & checksum fields will be overwritten based on the rest of the packet).","sig":null,"attributes":[{"value":"/Add an ip header (length, protocol/next_header & checksum fields will be overwritten based on the rest of the packet).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152155,"byte_end":152276,"line_start":272,"line_end":272,"column_start":5,"column_end":126}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152281,"byte_end":152284,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152289,"byte_end":152303,"line_start":274,"line_end":274,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152308,"byte_end":152311,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ With an IPv4 header:","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152316,"byte_end":152340,"line_start":276,"line_end":276,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152345,"byte_end":152348,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152353,"byte_end":152360,"line_start":278,"line_end":278,"column_start":5,"column_end":12}},{"value":"/ # use etherparse::*;","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152365,"byte_end":152389,"line_start":279,"line_end":279,"column_start":5,"column_end":29}},{"value":"/ #","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152394,"byte_end":152399,"line_start":280,"line_end":280,"column_start":5,"column_end":10}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152404,"byte_end":152437,"line_start":281,"line_end":281,"column_start":5,"column_end":38}},{"value":"/     ethernet2([1,2,3,4,5,6],","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152442,"byte_end":152474,"line_start":282,"line_end":282,"column_start":5,"column_end":37}},{"value":"/               [7,8,9,10,11,12])","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152479,"byte_end":152514,"line_start":283,"line_end":283,"column_start":5,"column_end":40}},{"value":"/    //payload_len, protocol & checksum will be replaced during write","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152519,"byte_end":152590,"line_start":284,"line_end":284,"column_start":5,"column_end":76}},{"value":"/    .ip(IpHeader::Version4(Ipv4Header::new(","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152595,"byte_end":152641,"line_start":285,"line_end":285,"column_start":5,"column_end":51}},{"value":"/        0, //payload_len will be replaced during write","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152646,"byte_end":152703,"line_start":286,"line_end":286,"column_start":5,"column_end":62}},{"value":"/        12, //time_to_live","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152708,"byte_end":152737,"line_start":287,"line_end":287,"column_start":5,"column_end":34}},{"value":"/        IpTrafficClass::Udp, //will be replaced during write","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152742,"byte_end":152805,"line_start":288,"line_end":288,"column_start":5,"column_end":68}},{"value":"/        [0,1,2,3], //source","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152810,"byte_end":152840,"line_start":289,"line_end":289,"column_start":5,"column_end":35}},{"value":"/        [4,5,6,7] //destination","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152845,"byte_end":152879,"line_start":290,"line_end":290,"column_start":5,"column_end":39}},{"value":"/     )));","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152884,"byte_end":152896,"line_start":291,"line_end":291,"column_start":5,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152901,"byte_end":152908,"line_start":292,"line_end":292,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152913,"byte_end":152916,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ With an IPv6 header:","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152921,"byte_end":152945,"line_start":294,"line_end":294,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152950,"byte_end":152953,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152958,"byte_end":152965,"line_start":296,"line_end":296,"column_start":5,"column_end":12}},{"value":"/ # use etherparse::*;","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152970,"byte_end":152994,"line_start":297,"line_end":297,"column_start":5,"column_end":29}},{"value":"/ #","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":152999,"byte_end":153004,"line_start":298,"line_end":298,"column_start":5,"column_end":10}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":153009,"byte_end":153042,"line_start":299,"line_end":299,"column_start":5,"column_end":38}},{"value":"/     ethernet2([1,2,3,4,5,6],","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":153047,"byte_end":153079,"line_start":300,"line_end":300,"column_start":5,"column_end":37}},{"value":"/               [7,8,9,10,11,12])","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":153084,"byte_end":153119,"line_start":301,"line_end":301,"column_start":5,"column_end":40}},{"value":"/    .ip(IpHeader::Version6(Ipv6Header{","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":153124,"byte_end":153165,"line_start":302,"line_end":302,"column_start":5,"column_end":46}},{"value":"/         traffic_class: 0,","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":153170,"byte_end":153199,"line_start":303,"line_end":303,"column_start":5,"column_end":34}},{"value":"/         flow_label: 0,","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":153204,"byte_end":153230,"line_start":304,"line_end":304,"column_start":5,"column_end":31}},{"value":"/         payload_length: 0, //will be replaced during write","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":153235,"byte_end":153297,"line_start":305,"line_end":305,"column_start":5,"column_end":67}},{"value":"/         next_header: 0, //will be replaced during write","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":153302,"byte_end":153361,"line_start":306,"line_end":306,"column_start":5,"column_end":64}},{"value":"/         hop_limit: 4,","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":153366,"byte_end":153391,"line_start":307,"line_end":307,"column_start":5,"column_end":30}},{"value":"/         source: [0;16],","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":153396,"byte_end":153423,"line_start":308,"line_end":308,"column_start":5,"column_end":32}},{"value":"/         destination: [0;16]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":153428,"byte_end":153459,"line_start":309,"line_end":309,"column_start":5,"column_end":36}},{"value":"/     }));","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":153464,"byte_end":153476,"line_start":310,"line_end":310,"column_start":5,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":153481,"byte_end":153488,"line_start":311,"line_end":311,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":153839,"byte_end":153843,"line_start":323,"line_end":323,"column_start":12,"column_end":16},"name":"ipv6","qualname":"<PacketBuilderStep<Ethernet2Header>>::ipv6","value":"pub fn ipv6(Self, [u8; ], [u8; ], u8) -> PacketBuilderStep<IpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Add an ip v6 header\n","sig":null,"attributes":[{"value":"/Add an ip v6 header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":153805,"byte_end":153827,"line_start":322,"line_end":322,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":154493,"byte_end":154497,"line_start":342,"line_end":342,"column_start":12,"column_end":16},"name":"vlan","qualname":"<PacketBuilderStep<Ethernet2Header>>::vlan","value":"pub fn vlan(Self, VlanHeader) -> PacketBuilderStep<VlanHeader>","parent":null,"children":[],"decl_id":null,"docs":"Adds a vlan tagging header with the given vlan identifier\n","sig":null,"attributes":[{"value":"/Adds a vlan tagging header with the given vlan identifier","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":154421,"byte_end":154481,"line_start":341,"line_end":341,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":154846,"byte_end":154857,"line_start":352,"line_end":352,"column_start":12,"column_end":23},"name":"single_vlan","qualname":"<PacketBuilderStep<Ethernet2Header>>::single_vlan","value":"pub fn single_vlan(Self, u16) -> PacketBuilderStep<VlanHeader>","parent":null,"children":[],"decl_id":null,"docs":"Adds a vlan tagging header with the given vlan identifier\n","sig":null,"attributes":[{"value":"/Adds a vlan tagging header with the given vlan identifier","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":154774,"byte_end":154834,"line_start":351,"line_end":351,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":155471,"byte_end":155482,"line_start":367,"line_end":367,"column_start":12,"column_end":23},"name":"double_vlan","qualname":"<PacketBuilderStep<Ethernet2Header>>::double_vlan","value":"pub fn double_vlan(Self, u16, u16) -> PacketBuilderStep<VlanHeader>","parent":null,"children":[],"decl_id":null,"docs":"Adds two vlan tagging header with the given vlan identifiers (also known as double vlan tagging).\n","sig":null,"attributes":[{"value":"/Adds two vlan tagging header with the given vlan identifiers (also known as double vlan tagging).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":155359,"byte_end":155459,"line_start":366,"line_end":366,"column_start":5,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157708,"byte_end":157710,"line_start":428,"line_end":428,"column_start":12,"column_end":14},"name":"ip","qualname":"<PacketBuilderStep<VlanHeader>>::ip","value":"pub fn ip(Self, IpHeader) -> PacketBuilderStep<IpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Add an ip header (length, protocol/next_header & checksum fields will be overwritten based on the rest of the packet).","sig":null,"attributes":[{"value":"/Add an ip header (length, protocol/next_header & checksum fields will be overwritten based on the rest of the packet).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":156418,"byte_end":156539,"line_start":392,"line_end":392,"column_start":5,"column_end":126}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":156544,"byte_end":156547,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ # Example IPv4","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":156552,"byte_end":156570,"line_start":394,"line_end":394,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":156575,"byte_end":156582,"line_start":395,"line_end":395,"column_start":5,"column_end":12}},{"value":"/ # use etherparse::*;","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":156587,"byte_end":156611,"line_start":396,"line_end":396,"column_start":5,"column_end":29}},{"value":"/ #","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":156616,"byte_end":156621,"line_start":397,"line_end":397,"column_start":5,"column_end":10}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":156626,"byte_end":156659,"line_start":398,"line_end":398,"column_start":5,"column_end":38}},{"value":"/     ethernet2([1,2,3,4,5,6],","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":156664,"byte_end":156696,"line_start":399,"line_end":399,"column_start":5,"column_end":37}},{"value":"/               [7,8,9,10,11,12])","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":156701,"byte_end":156736,"line_start":400,"line_end":400,"column_start":5,"column_end":40}},{"value":"/    //payload_len, protocol & checksum will be replaced during write","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":156741,"byte_end":156812,"line_start":401,"line_end":401,"column_start":5,"column_end":76}},{"value":"/    .ip(IpHeader::Version4(Ipv4Header::new(","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":156817,"byte_end":156863,"line_start":402,"line_end":402,"column_start":5,"column_end":51}},{"value":"/        0, //payload_len will be replaced during write","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":156868,"byte_end":156925,"line_start":403,"line_end":403,"column_start":5,"column_end":62}},{"value":"/        12, //time_to_live","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":156930,"byte_end":156959,"line_start":404,"line_end":404,"column_start":5,"column_end":34}},{"value":"/        IpTrafficClass::Udp, //will be replaced during write","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":156964,"byte_end":157027,"line_start":405,"line_end":405,"column_start":5,"column_end":68}},{"value":"/        [0,1,2,3], //source","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157032,"byte_end":157062,"line_start":406,"line_end":406,"column_start":5,"column_end":35}},{"value":"/        [4,5,6,7] //destination","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157067,"byte_end":157101,"line_start":407,"line_end":407,"column_start":5,"column_end":39}},{"value":"/     )));","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157106,"byte_end":157118,"line_start":408,"line_end":408,"column_start":5,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157123,"byte_end":157130,"line_start":409,"line_end":409,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157135,"byte_end":157138,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ # Example IPv6","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157143,"byte_end":157161,"line_start":411,"line_end":411,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157166,"byte_end":157173,"line_start":412,"line_end":412,"column_start":5,"column_end":12}},{"value":"/ # use etherparse::*;","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157178,"byte_end":157202,"line_start":413,"line_end":413,"column_start":5,"column_end":29}},{"value":"/ #","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157207,"byte_end":157212,"line_start":414,"line_end":414,"column_start":5,"column_end":10}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157217,"byte_end":157250,"line_start":415,"line_end":415,"column_start":5,"column_end":38}},{"value":"/     ethernet2([1,2,3,4,5,6],","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157255,"byte_end":157287,"line_start":416,"line_end":416,"column_start":5,"column_end":37}},{"value":"/               [7,8,9,10,11,12])","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157292,"byte_end":157327,"line_start":417,"line_end":417,"column_start":5,"column_end":40}},{"value":"/    .ip(IpHeader::Version6(Ipv6Header{","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157332,"byte_end":157373,"line_start":418,"line_end":418,"column_start":5,"column_end":46}},{"value":"/         traffic_class: 0,","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157378,"byte_end":157407,"line_start":419,"line_end":419,"column_start":5,"column_end":34}},{"value":"/         flow_label: 0,","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157412,"byte_end":157438,"line_start":420,"line_end":420,"column_start":5,"column_end":31}},{"value":"/         payload_length: 0, //will be replaced during write","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157443,"byte_end":157505,"line_start":421,"line_end":421,"column_start":5,"column_end":67}},{"value":"/         next_header: 0, //will be replaced during write","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157510,"byte_end":157569,"line_start":422,"line_end":422,"column_start":5,"column_end":64}},{"value":"/         hop_limit: 4,","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157574,"byte_end":157599,"line_start":423,"line_end":423,"column_start":5,"column_end":30}},{"value":"/         source: [0;16],","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157604,"byte_end":157631,"line_start":424,"line_end":424,"column_start":5,"column_end":32}},{"value":"/         destination: [0;16]","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157636,"byte_end":157667,"line_start":425,"line_end":425,"column_start":5,"column_end":36}},{"value":"/     }));","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157672,"byte_end":157684,"line_start":426,"line_end":426,"column_start":5,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157689,"byte_end":157696,"line_start":427,"line_end":427,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":158025,"byte_end":158029,"line_start":437,"line_end":437,"column_start":12,"column_end":16},"name":"ipv6","qualname":"<PacketBuilderStep<VlanHeader>>::ipv6","value":"pub fn ipv6(Self, [u8; ], [u8; ], u8) -> PacketBuilderStep<IpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Add a ip v6 header\n","sig":null,"attributes":[{"value":"/Add a ip v6 header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":157992,"byte_end":158013,"line_start":436,"line_end":436,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":158400,"byte_end":158404,"line_start":446,"line_end":446,"column_start":12,"column_end":16},"name":"ipv4","qualname":"<PacketBuilderStep<VlanHeader>>::ipv4","value":"pub fn ipv4(Self, [u8; ], [u8; ], u8) -> PacketBuilderStep<IpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Add a ip v4 header\n","sig":null,"attributes":[{"value":"/Add a ip v4 header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":158367,"byte_end":158388,"line_start":445,"line_end":445,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":158790,"byte_end":158793,"line_start":456,"line_end":456,"column_start":12,"column_end":15},"name":"udp","qualname":"<PacketBuilderStep<IpHeader>>::udp","value":"pub fn udp(Self, u16, u16) -> PacketBuilderStep<UdpHeader>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":159281,"byte_end":159284,"line_start":470,"line_end":470,"column_start":12,"column_end":15},"name":"tcp","qualname":"<PacketBuilderStep<IpHeader>>::tcp","value":"pub fn tcp(Self, u16, u16, u32, u16) -> PacketBuilderStep<TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":159833,"byte_end":159838,"line_start":484,"line_end":484,"column_start":12,"column_end":17},"name":"write","qualname":"<PacketBuilderStep<UdpHeader>>::write","value":"pub fn write<T: io::Write + Sized>(Self, &mut T, &[u8])\n-> Result<(), WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Write all the headers and the payload.\n","sig":null,"attributes":[{"value":"/Write all the headers and the payload.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":159780,"byte_end":159821,"line_start":483,"line_end":483,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":160047,"byte_end":160051,"line_start":489,"line_end":489,"column_start":12,"column_end":16},"name":"size","qualname":"<PacketBuilderStep<UdpHeader>>::size","value":"pub fn size(&Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":"Returns the size of the packet when it is serialized\n","sig":null,"attributes":[{"value":"/Returns the size of the packet when it is serialized","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":159980,"byte_end":160035,"line_start":488,"line_end":488,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":160272,"byte_end":160274,"line_start":497,"line_end":497,"column_start":12,"column_end":14},"name":"ns","qualname":"<PacketBuilderStep<TcpHeader>>::ns","value":"pub fn ns(Self) -> PacketBuilderStep<TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Set ns flag (ECN-nonce - concealment protection; experimental: see RFC 3540)\n","sig":null,"attributes":[{"value":"/Set ns flag (ECN-nonce - concealment protection; experimental: see RFC 3540)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":160181,"byte_end":160260,"line_start":496,"line_end":496,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":160480,"byte_end":160483,"line_start":502,"line_end":502,"column_start":12,"column_end":15},"name":"fin","qualname":"<PacketBuilderStep<TcpHeader>>::fin","value":"pub fn fin(Self) -> PacketBuilderStep<TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Set fin flag (No more data from sender)\n","sig":null,"attributes":[{"value":"/Set fin flag (No more data from sender)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":160426,"byte_end":160468,"line_start":501,"line_end":501,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":160698,"byte_end":160701,"line_start":507,"line_end":507,"column_start":12,"column_end":15},"name":"syn","qualname":"<PacketBuilderStep<TcpHeader>>::syn","value":"pub fn syn(Self) -> PacketBuilderStep<TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Set the syn flag (synchronize sequence numbers)\n","sig":null,"attributes":[{"value":"/Set the syn flag (synchronize sequence numbers)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":160636,"byte_end":160686,"line_start":506,"line_end":506,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":160909,"byte_end":160912,"line_start":512,"line_end":512,"column_start":12,"column_end":15},"name":"rst","qualname":"<PacketBuilderStep<TcpHeader>>::rst","value":"pub fn rst(Self) -> PacketBuilderStep<TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Sets the rst flag (reset the connection)\n","sig":null,"attributes":[{"value":"/Sets the rst flag (reset the connection)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":160854,"byte_end":160897,"line_start":511,"line_end":511,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":161113,"byte_end":161116,"line_start":517,"line_end":517,"column_start":12,"column_end":15},"name":"psh","qualname":"<PacketBuilderStep<TcpHeader>>::psh","value":"pub fn psh(Self) -> PacketBuilderStep<TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Sets the psh flag (push function)\n","sig":null,"attributes":[{"value":"/Sets the psh flag (push function)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":161065,"byte_end":161101,"line_start":516,"line_end":516,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":161332,"byte_end":161335,"line_start":522,"line_end":522,"column_start":12,"column_end":15},"name":"ack","qualname":"<PacketBuilderStep<TcpHeader>>::ack","value":"pub fn ack(Self, u32) -> PacketBuilderStep<TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Sets the ack flag and the acknowledgment_number.\n","sig":null,"attributes":[{"value":"/Sets the ack flag and the acknowledgment_number.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":161269,"byte_end":161320,"line_start":521,"line_end":521,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":161809,"byte_end":161812,"line_start":534,"line_end":534,"column_start":12,"column_end":15},"name":"urg","qualname":"<PacketBuilderStep<TcpHeader>>::urg","value":"pub fn urg(Self, u16) -> PacketBuilderStep<TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Set the urg flag & the urgent pointer field.","sig":null,"attributes":[{"value":"/Set the urg flag & the urgent pointer field.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":161639,"byte_end":161686,"line_start":530,"line_end":530,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":161691,"byte_end":161694,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/The urgent pointer points to the sequence number of the octet following","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":161699,"byte_end":161773,"line_start":532,"line_end":532,"column_start":5,"column_end":79}},{"value":"/the urgent data.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":161778,"byte_end":161797,"line_start":533,"line_end":533,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":162144,"byte_end":162147,"line_start":543,"line_end":543,"column_start":12,"column_end":15},"name":"ece","qualname":"<PacketBuilderStep<TcpHeader>>::ece","value":"pub fn ece(Self) -> PacketBuilderStep<TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Sets ece flag (ECN-Echo, RFC 3168)\n","sig":null,"attributes":[{"value":"/Sets ece flag (ECN-Echo, RFC 3168)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":162095,"byte_end":162132,"line_start":542,"line_end":542,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":162554,"byte_end":162557,"line_start":551,"line_end":551,"column_start":12,"column_end":15},"name":"cwr","qualname":"<PacketBuilderStep<TcpHeader>>::cwr","value":"pub fn cwr(Self) -> PacketBuilderStep<TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Set cwr flag (Congestion Window Reduced)","sig":null,"attributes":[{"value":"/Set cwr flag (Congestion Window Reduced)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":162301,"byte_end":162344,"line_start":548,"line_end":548,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":162349,"byte_end":162352,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/This flag is set by the sending host to indicate that it received a TCP segment with the ECE flag set and had responded in congestion control mechanism (added to header by RFC 3168).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":162357,"byte_end":162542,"line_start":550,"line_end":550,"column_start":5,"column_end":190}}]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":162760,"byte_end":162767,"line_start":557,"line_end":557,"column_start":12,"column_end":19},"name":"options","qualname":"<PacketBuilderStep<TcpHeader>>::options","value":"pub fn options(Self, &[TcpOptionElement])\n-> Result<PacketBuilderStep<TcpHeader>, TcpOptionWriteError>","parent":null,"children":[],"decl_id":null,"docs":"Set the tcp options of the header.\n","sig":null,"attributes":[{"value":"/Set the tcp options of the header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":162711,"byte_end":162748,"line_start":556,"line_end":556,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":163073,"byte_end":163084,"line_start":563,"line_end":563,"column_start":12,"column_end":23},"name":"options_raw","qualname":"<PacketBuilderStep<TcpHeader>>::options_raw","value":"pub fn options_raw(Self, &[u8])\n-> Result<PacketBuilderStep<TcpHeader>, TcpOptionWriteError>","parent":null,"children":[],"decl_id":null,"docs":"Set the tcp options of the header (setting the bytes directly).\n","sig":null,"attributes":[{"value":"/Set the tcp options of the header (setting the bytes directly).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":162995,"byte_end":163061,"line_start":562,"line_end":562,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":163355,"byte_end":163360,"line_start":569,"line_end":569,"column_start":12,"column_end":17},"name":"write","qualname":"<PacketBuilderStep<TcpHeader>>::write","value":"pub fn write<T: io::Write + Sized>(Self, &mut T, &[u8])\n-> Result<(), WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Write all the headers and the payload.\n","sig":null,"attributes":[{"value":"/Write all the headers and the payload.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":163302,"byte_end":163343,"line_start":568,"line_end":568,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":163569,"byte_end":163573,"line_start":574,"line_end":574,"column_start":12,"column_end":16},"name":"size","qualname":"<PacketBuilderStep<TcpHeader>>::size","value":"pub fn size(&Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":"Returns the size of the packet when it is serialized\n","sig":null,"attributes":[{"value":"/Returns the size of the packet when it is serialized","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":163502,"byte_end":163557,"line_start":573,"line_end":573,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1625},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":168852,"byte_end":168865,"line_start":7,"line_end":7,"column_start":12,"column_end":25},"name":"PacketHeaders","qualname":"::packet_decoder::PacketHeaders","value":"PacketHeaders { link, vlan, ip, transport, payload }","parent":null,"children":[{"krate":0,"index":1627},{"krate":0,"index":1628},{"krate":0,"index":1629},{"krate":0,"index":1630},{"krate":0,"index":1631}],"decl_id":null,"docs":" Decoded packet headers (data link layer and higher).\n You can use PacketHeaders::from_ethernet_slice or PacketHeader::from_ip_slice\n to decode and get this struct as a result.\n","sig":null,"attributes":[{"value":"/ Decoded packet headers (data link layer and higher).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":168616,"byte_end":168672,"line_start":3,"line_end":3,"column_start":1,"column_end":57}},{"value":"/ You can use PacketHeaders::from_ethernet_slice or PacketHeader::from_ip_slice","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":168673,"byte_end":168754,"line_start":4,"line_end":4,"column_start":1,"column_end":82}},{"value":"/ to decode and get this struct as a result.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":168755,"byte_end":168801,"line_start":5,"line_end":5,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":1627},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":168880,"byte_end":168884,"line_start":8,"line_end":8,"column_start":9,"column_end":13},"name":"link","qualname":"::packet_decoder::PacketHeaders::link","value":"std::option::Option<link::ethernet::Ethernet2Header>","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1628},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":168919,"byte_end":168923,"line_start":9,"line_end":9,"column_start":9,"column_end":13},"name":"vlan","qualname":"::packet_decoder::PacketHeaders::vlan","value":"std::option::Option<link::vlan_tagging::VlanHeader>","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1629},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":168953,"byte_end":168955,"line_start":10,"line_end":10,"column_start":9,"column_end":11},"name":"ip","qualname":"::packet_decoder::PacketHeaders::ip","value":"std::option::Option<internet::ip::IpHeader>","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1630},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":168983,"byte_end":168992,"line_start":11,"line_end":11,"column_start":9,"column_end":18},"name":"transport","qualname":"::packet_decoder::PacketHeaders::transport","value":"std::option::Option<transport::TransportHeader>","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1631},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":169114,"byte_end":169121,"line_start":13,"line_end":13,"column_start":9,"column_end":16},"name":"payload","qualname":"::packet_decoder::PacketHeaders::payload","value":"&'a [u8]","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":"Rest of the packet that could not be decoded as a header (usually the payload).\n","sig":null,"attributes":[{"value":"/Rest of the packet that could not be decoded as a header (usually the payload).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":169023,"byte_end":169105,"line_start":12,"line_end":12,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":169231,"byte_end":169250,"line_start":18,"line_end":18,"column_start":12,"column_end":31},"name":"from_ethernet_slice","qualname":"<PacketHeaders>::from_ethernet_slice","value":"pub fn from_ethernet_slice(&[u8]) -> Result<PacketHeaders, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Tries to decode as much as possible of a packet.\n","sig":null,"attributes":[{"value":"/Tries to decode as much as possible of a packet.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":169168,"byte_end":169219,"line_start":17,"line_end":17,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":174161,"byte_end":174174,"line_start":156,"line_end":156,"column_start":12,"column_end":25},"name":"from_ip_slice","qualname":"<PacketHeaders>::from_ip_slice","value":"pub fn from_ip_slice(&[u8]) -> Result<PacketHeaders, ReadError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to decode an ip packet and its transport headers.  \n Assumes the given slice starts with the first byte of the IP header\n # Example\n ```\n # use etherparse::*;\n // build a UDP packet\n let payload = [0u8;18];\n let builder = PacketBuilder::\n    ipv4([192,168,1,1], //source ip\n          [192,168,1,2], //desitionation ip\n          20)            //time to life\n    .udp(21,    //source port \n         1234); //desitnation port","sig":null,"attributes":[{"value":"/ Tries to decode an ip packet and its transport headers.  ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":172956,"byte_end":173017,"line_start":126,"line_end":126,"column_start":5,"column_end":66}},{"value":"/ Assumes the given slice starts with the first byte of the IP header","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173022,"byte_end":173093,"line_start":127,"line_end":127,"column_start":5,"column_end":76}},{"value":"/ # Example","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173098,"byte_end":173111,"line_start":128,"line_end":128,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173116,"byte_end":173123,"line_start":129,"line_end":129,"column_start":5,"column_end":12}},{"value":"/ # use etherparse::*;","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173128,"byte_end":173152,"line_start":130,"line_end":130,"column_start":5,"column_end":29}},{"value":"/ // build a UDP packet","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173157,"byte_end":173182,"line_start":131,"line_end":131,"column_start":5,"column_end":30}},{"value":"/ let payload = [0u8;18];","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173187,"byte_end":173214,"line_start":132,"line_end":132,"column_start":5,"column_end":32}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173219,"byte_end":173252,"line_start":133,"line_end":133,"column_start":5,"column_end":38}},{"value":"/    ipv4([192,168,1,1], //source ip","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173257,"byte_end":173295,"line_start":134,"line_end":134,"column_start":5,"column_end":43}},{"value":"/          [192,168,1,2], //desitionation ip","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173300,"byte_end":173346,"line_start":135,"line_end":135,"column_start":5,"column_end":51}},{"value":"/          20)            //time to life","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173351,"byte_end":173393,"line_start":136,"line_end":136,"column_start":5,"column_end":47}},{"value":"/    .udp(21,    //source port ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173398,"byte_end":173431,"line_start":137,"line_end":137,"column_start":5,"column_end":38}},{"value":"/         1234); //desitnation port","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173436,"byte_end":173473,"line_start":138,"line_end":138,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173478,"byte_end":173481,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ // serialize the packet","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173486,"byte_end":173513,"line_start":140,"line_end":140,"column_start":5,"column_end":32}},{"value":"/ let packet = {","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173518,"byte_end":173536,"line_start":141,"line_end":141,"column_start":5,"column_end":23}},{"value":"/     let mut packet = Vec::<u8>::with_capacity(","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173541,"byte_end":173591,"line_start":142,"line_end":142,"column_start":5,"column_end":55}},{"value":"/                     builder.size(payload.len()));","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173596,"byte_end":173649,"line_start":143,"line_end":143,"column_start":5,"column_end":58}},{"value":"/     builder.write(&mut packet, &payload).unwrap();","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173654,"byte_end":173708,"line_start":144,"line_end":144,"column_start":5,"column_end":59}},{"value":"/     packet","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173713,"byte_end":173727,"line_start":145,"line_end":145,"column_start":5,"column_end":19}},{"value":"/ };","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173732,"byte_end":173738,"line_start":146,"line_end":146,"column_start":5,"column_end":11}},{"value":"/ # // should be 64 bytes long (including the ethernet FCS/CRC32) but since ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173743,"byte_end":173821,"line_start":147,"line_end":147,"column_start":5,"column_end":83}},{"value":"/ # // this is not provided at the moment we're gonna be fine with 46","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173826,"byte_end":173897,"line_start":148,"line_end":148,"column_start":5,"column_end":76}},{"value":"/ # assert_eq!(packet.len(), 46);","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173902,"byte_end":173937,"line_start":149,"line_end":149,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173942,"byte_end":173945,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ // parse the ip packet from a slice","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173950,"byte_end":173989,"line_start":151,"line_end":151,"column_start":5,"column_end":44}},{"value":"/ let p = PacketHeaders::from_ip_slice(&packet)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":173994,"byte_end":174043,"line_start":152,"line_end":152,"column_start":5,"column_end":54}},{"value":"/     .expect(\"Failed to decode the packet\");","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":174048,"byte_end":174095,"line_start":153,"line_end":153,"column_start":5,"column_end":52}},{"value":"/ # assert_eq!(p.payload, payload);","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":174100,"byte_end":174137,"line_start":154,"line_end":154,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":174142,"byte_end":174149,"line_start":155,"line_end":155,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1651},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":175978,"byte_end":175987,"line_start":7,"line_end":7,"column_start":5,"column_end":14},"name":"Ethernet2","qualname":"::packet_slicing::LinkSlice::Ethernet2","value":"LinkSlice::Ethernet2(Ethernet2HeaderSlice)","parent":{"krate":0,"index":1649},"children":[],"decl_id":null,"docs":"A slice containing an Ethernet II header.\n","sig":null,"attributes":[{"value":"/A slice containing an Ethernet II header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":175929,"byte_end":175973,"line_start":6,"line_end":6,"column_start":5,"column_end":49}}]},{"kind":"Enum","id":{"krate":0,"index":1649},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":175909,"byte_end":175918,"line_start":5,"line_end":5,"column_start":10,"column_end":19},"name":"LinkSlice","qualname":"::packet_slicing::LinkSlice","value":"pub enum LinkSlice<'a> {\n\n    ///A slice containing an Ethernet II header.\n    Ethernet2(Ethernet2HeaderSlice),\n}","parent":null,"children":[{"krate":0,"index":1651}],"decl_id":null,"docs":"A slice containing the link layer header (currently only Ethernet II is supported).\n","sig":null,"attributes":[{"value":"/A slice containing the link layer header (currently only Ethernet II is supported).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":175774,"byte_end":175860,"line_start":3,"line_end":3,"column_start":1,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1673},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":176139,"byte_end":176149,"line_start":13,"line_end":13,"column_start":5,"column_end":15},"name":"SingleVlan","qualname":"::packet_slicing::VlanSlice::SingleVlan","value":"VlanSlice::SingleVlan(SingleVlanHeaderSlice)","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1676},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":176182,"byte_end":176192,"line_start":14,"line_end":14,"column_start":5,"column_end":15},"name":"DoubleVlan","qualname":"::packet_slicing::VlanSlice::DoubleVlan","value":"VlanSlice::DoubleVlan(DoubleVlanHeaderSlice)","parent":{"krate":0,"index":1671},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1671},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":176119,"byte_end":176128,"line_start":12,"line_end":12,"column_start":10,"column_end":19},"name":"VlanSlice","qualname":"::packet_slicing::VlanSlice","value":"pub enum VlanSlice<'a> {\n    SingleVlan(SingleVlanHeaderSlice),\n    DoubleVlan(DoubleVlanHeaderSlice),\n}","parent":null,"children":[{"krate":0,"index":1673},{"krate":0,"index":1676}],"decl_id":null,"docs":"A slice containing a single or double vlan header.\n","sig":null,"attributes":[{"value":"/A slice containing a single or double vlan header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":176017,"byte_end":176070,"line_start":10,"line_end":10,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":176333,"byte_end":176342,"line_start":19,"line_end":19,"column_start":12,"column_end":21},"name":"to_header","qualname":"<VlanSlice>::to_header","value":"pub fn to_header(&Self) -> VlanHeader","parent":null,"children":[],"decl_id":null,"docs":"Decode all the fields and copy the results to a VlanHeader struct\n","sig":null,"attributes":[{"value":"/Decode all the fields and copy the results to a VlanHeader struct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":176253,"byte_end":176321,"line_start":18,"line_end":18,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1698},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":176664,"byte_end":176668,"line_start":31,"line_end":31,"column_start":5,"column_end":9},"name":"Ipv4","qualname":"::packet_slicing::InternetSlice::Ipv4","value":"InternetSlice::Ipv4(Ipv4HeaderSlice)","parent":{"krate":0,"index":1696},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1701},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":176839,"byte_end":176843,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"Ipv6","qualname":"::packet_slicing::InternetSlice::Ipv6","value":"InternetSlice::Ipv6(Ipv6HeaderSlice, [Option<(u8, Ipv6ExtensionHeaderSlice)>; ])","parent":{"krate":0,"index":1696},"children":[],"decl_id":null,"docs":"First element is the Ipv6 header slice and second one are the Ipv6 extensions headers filled in order from 0 to the length of the array.\n","sig":null,"attributes":[{"value":"/First element is the Ipv6 header slice and second one are the Ipv6 extensions headers filled in order from 0 to the length of the array.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":176695,"byte_end":176834,"line_start":32,"line_end":32,"column_start":5,"column_end":144}}]},{"kind":"Enum","id":{"krate":0,"index":1696},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":176640,"byte_end":176653,"line_start":30,"line_end":30,"column_start":10,"column_end":23},"name":"InternetSlice","qualname":"::packet_slicing::InternetSlice","value":"pub enum InternetSlice<'a> {\n    Ipv4(Ipv4HeaderSlice),\n\n    ///First element is the Ipv6 header slice and second one are the Ipv6 extensions headers filled in order from 0 to the length of the array.\n    Ipv6(Ipv6HeaderSlice, [Option<(u8, Ipv6ExtensionHeaderSlice)>; ]),\n}","parent":null,"children":[{"krate":0,"index":1698},{"krate":0,"index":1701}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1726},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":177061,"byte_end":177064,"line_start":39,"line_end":39,"column_start":5,"column_end":8},"name":"Udp","qualname":"::packet_slicing::TransportSlice::Udp","value":"TransportSlice::Udp(UdpHeaderSlice)","parent":{"krate":0,"index":1724},"children":[],"decl_id":null,"docs":"A slice containing an UDP header.\n","sig":null,"attributes":[{"value":"/A slice containing an UDP header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":177020,"byte_end":177056,"line_start":38,"line_end":38,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1729},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":177130,"byte_end":177133,"line_start":41,"line_end":41,"column_start":5,"column_end":8},"name":"Tcp","qualname":"::packet_slicing::TransportSlice::Tcp","value":"TransportSlice::Tcp(TcpHeaderSlice)","parent":{"krate":0,"index":1724},"children":[],"decl_id":null,"docs":"A slice containing a TCP header.\n","sig":null,"attributes":[{"value":"/A slice containing a TCP header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":177090,"byte_end":177125,"line_start":40,"line_end":40,"column_start":5,"column_end":40}}]},{"kind":"Enum","id":{"krate":0,"index":1724},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":176995,"byte_end":177009,"line_start":37,"line_end":37,"column_start":10,"column_end":24},"name":"TransportSlice","qualname":"::packet_slicing::TransportSlice","value":"pub enum TransportSlice<'a> {\n\n    ///A slice containing an UDP header.\n    Udp(UdpHeaderSlice),\n\n    ///A slice containing a TCP header.\n    Tcp(TcpHeaderSlice),\n}","parent":null,"children":[{"krate":0,"index":1726},{"krate":0,"index":1729}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1749},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":177328,"byte_end":177340,"line_start":46,"line_end":46,"column_start":12,"column_end":24},"name":"SlicedPacket","qualname":"::packet_slicing::SlicedPacket","value":"SlicedPacket { link, vlan, ip, transport, payload }","parent":null,"children":[{"krate":0,"index":1751},{"krate":0,"index":1752},{"krate":0,"index":1753},{"krate":0,"index":1754},{"krate":0,"index":1755}],"decl_id":null,"docs":"A sliced into its component headers. Everything that could not be parsed is stored in a slice in the field \"payload\".\n","sig":null,"attributes":[{"value":"/A sliced into its component headers. Everything that could not be parsed is stored in a slice in the field \"payload\".","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":177157,"byte_end":177277,"line_start":44,"line_end":44,"column_start":1,"column_end":121}}]},{"kind":"Field","id":{"krate":0,"index":1751},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":177355,"byte_end":177359,"line_start":47,"line_end":47,"column_start":9,"column_end":13},"name":"link","qualname":"::packet_slicing::SlicedPacket::link","value":"std::option::Option<packet_slicing::LinkSlice<'a>>","parent":{"krate":0,"index":1749},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1752},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":177392,"byte_end":177396,"line_start":48,"line_end":48,"column_start":9,"column_end":13},"name":"vlan","qualname":"::packet_slicing::SlicedPacket::vlan","value":"std::option::Option<packet_slicing::VlanSlice<'a>>","parent":{"krate":0,"index":1749},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1753},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":177429,"byte_end":177431,"line_start":49,"line_end":49,"column_start":9,"column_end":11},"name":"ip","qualname":"::packet_slicing::SlicedPacket::ip","value":"std::option::Option<packet_slicing::InternetSlice<'a>>","parent":{"krate":0,"index":1749},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1754},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":177468,"byte_end":177477,"line_start":50,"line_end":50,"column_start":9,"column_end":18},"name":"transport","qualname":"::packet_slicing::SlicedPacket::transport","value":"std::option::Option<packet_slicing::TransportSlice<'a>>","parent":{"krate":0,"index":1749},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1755},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":178049,"byte_end":178056,"line_start":59,"line_end":59,"column_start":9,"column_end":16},"name":"payload","qualname":"::packet_slicing::SlicedPacket::payload","value":"&'a [u8]","parent":{"krate":0,"index":1749},"children":[],"decl_id":null,"docs":" The payload field points to the rest of the packet that could not be parsed by etherparse.","sig":null,"attributes":[{"value":"/ The payload field points to the rest of the packet that could not be parsed by etherparse.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":177511,"byte_end":177605,"line_start":51,"line_end":51,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":177610,"byte_end":177613,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Depending on what other fields contain a \"Some\" values the payload contains the corresponding ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":177618,"byte_end":177716,"line_start":53,"line_end":53,"column_start":5,"column_end":103}},{"value":"/ payload.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":177721,"byte_end":177733,"line_start":54,"line_end":54,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":177738,"byte_end":177741,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ For example if transport field contains Some(Udp(_)) then the payload field points to the udp payload.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":177746,"byte_end":177852,"line_start":56,"line_end":56,"column_start":5,"column_end":111}},{"value":"/ On the other hand if the transport field contains None then the payload contains the payload of","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":177857,"byte_end":177956,"line_start":57,"line_end":57,"column_start":5,"column_end":104}},{"value":"/ next field containing a Some value (in order of transport, ip, vlan, link).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":177961,"byte_end":178040,"line_start":58,"line_end":58,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179986,"byte_end":179999,"line_start":107,"line_end":107,"column_start":12,"column_end":25},"name":"from_ethernet","qualname":"<SlicedPacket>::from_ethernet","value":"pub fn from_ethernet(&'a [u8]) -> Result<SlicedPacket, ReadError>","parent":null,"children":[],"decl_id":null,"docs":" Seperates a network packet slice into different slices containing the headers from the ethernet header downwards. ","sig":null,"attributes":[{"value":"/ Seperates a network packet slice into different slices containing the headers from the ethernet header downwards. ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":178475,"byte_end":178593,"line_start":72,"line_end":72,"column_start":5,"column_end":123}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":178598,"byte_end":178601,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ The result is returned as a SlicerPacket struct. This function assumes the given data starts ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":178606,"byte_end":178703,"line_start":74,"line_end":74,"column_start":5,"column_end":102}},{"value":"/ with an ethernet II header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":178708,"byte_end":178739,"line_start":75,"line_end":75,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":178744,"byte_end":178747,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":178752,"byte_end":178766,"line_start":77,"line_end":77,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":178771,"byte_end":178774,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":178779,"byte_end":178795,"line_start":79,"line_end":79,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":178800,"byte_end":178803,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":178808,"byte_end":178814,"line_start":81,"line_end":81,"column_start":5,"column_end":11}},{"value":"/ # use etherparse::{SlicedPacket, PacketBuilder};","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":178819,"byte_end":178871,"line_start":82,"line_end":82,"column_start":5,"column_end":57}},{"value":"/ # let builder = PacketBuilder::","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":178876,"byte_end":178911,"line_start":83,"line_end":83,"column_start":5,"column_end":40}},{"value":"/ #    ethernet2([1,2,3,4,5,6],     //source mac","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":178916,"byte_end":178966,"line_start":84,"line_end":84,"column_start":5,"column_end":55}},{"value":"/ #               [7,8,9,10,11,12]) //destionation mac","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":178971,"byte_end":179027,"line_start":85,"line_end":85,"column_start":5,"column_end":61}},{"value":"/ #    .ipv4([192,168,1,1], //source ip","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179032,"byte_end":179073,"line_start":86,"line_end":86,"column_start":5,"column_end":46}},{"value":"/ #          [192,168,1,2], //desitionation ip","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179078,"byte_end":179126,"line_start":87,"line_end":87,"column_start":5,"column_end":53}},{"value":"/ #          20)            //time to life","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179131,"byte_end":179175,"line_start":88,"line_end":88,"column_start":5,"column_end":49}},{"value":"/ #    .udp(21,    //source port ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179180,"byte_end":179215,"line_start":89,"line_end":89,"column_start":5,"column_end":40}},{"value":"/ #         1234); //desitnation port","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179220,"byte_end":179259,"line_start":90,"line_end":90,"column_start":5,"column_end":44}},{"value":"/ #    //payload of the udp packet","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179264,"byte_end":179300,"line_start":91,"line_end":91,"column_start":5,"column_end":41}},{"value":"/ #    let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179305,"byte_end":179346,"line_start":92,"line_end":92,"column_start":5,"column_end":46}},{"value":"/ #    //get some memory to store the serialized data","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179351,"byte_end":179406,"line_start":93,"line_end":93,"column_start":5,"column_end":60}},{"value":"/ #    let mut packet = Vec::<u8>::with_capacity(","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179411,"byte_end":179462,"line_start":94,"line_end":94,"column_start":5,"column_end":56}},{"value":"/ #                            builder.size(payload.len()));","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179467,"byte_end":179529,"line_start":95,"line_end":95,"column_start":5,"column_end":67}},{"value":"/ #    builder.write(&mut packet, &payload).unwrap();","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179534,"byte_end":179589,"line_start":96,"line_end":96,"column_start":5,"column_end":60}},{"value":"/ match SlicedPacket::from_ethernet(&packet) {","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179594,"byte_end":179642,"line_start":97,"line_end":97,"column_start":5,"column_end":53}},{"value":"/     Err(value) => println!(\"Err {:?}\", value),","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179647,"byte_end":179697,"line_start":98,"line_end":98,"column_start":5,"column_end":55}},{"value":"/     Ok(value) => {","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179702,"byte_end":179724,"line_start":99,"line_end":99,"column_start":5,"column_end":27}},{"value":"/         println!(\"link: {:?}\", value.link);","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179729,"byte_end":179776,"line_start":100,"line_end":100,"column_start":5,"column_end":52}},{"value":"/         println!(\"vlan: {:?}\", value.vlan);","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179781,"byte_end":179828,"line_start":101,"line_end":101,"column_start":5,"column_end":52}},{"value":"/         println!(\"ip: {:?}\", value.ip);","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179833,"byte_end":179876,"line_start":102,"line_end":102,"column_start":5,"column_end":48}},{"value":"/         println!(\"transport: {:?}\", value.transport);","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179881,"byte_end":179938,"line_start":103,"line_end":103,"column_start":5,"column_end":62}},{"value":"/     }","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179943,"byte_end":179952,"line_start":104,"line_end":104,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179957,"byte_end":179962,"line_start":105,"line_end":105,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":179967,"byte_end":179974,"line_start":106,"line_end":106,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":181614,"byte_end":181621,"line_start":147,"line_end":147,"column_start":12,"column_end":19},"name":"from_ip","qualname":"<SlicedPacket>::from_ip","value":"pub fn from_ip(&'a [u8]) -> Result<SlicedPacket, ReadError>","parent":null,"children":[],"decl_id":null,"docs":" Seperates a network packet slice into different slices containing the headers from the ip header downwards. ","sig":null,"attributes":[{"value":"/ Seperates a network packet slice into different slices containing the headers from the ip header downwards. ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180113,"byte_end":180225,"line_start":111,"line_end":111,"column_start":5,"column_end":117}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180230,"byte_end":180233,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ The result is returned as a SlicerPacket struct. This function assumes the given data starts ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180238,"byte_end":180335,"line_start":113,"line_end":113,"column_start":5,"column_end":102}},{"value":"/ with an IPv4 or IPv6 header.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180340,"byte_end":180372,"line_start":114,"line_end":114,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180377,"byte_end":180380,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180385,"byte_end":180399,"line_start":116,"line_end":116,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180404,"byte_end":180407,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180412,"byte_end":180428,"line_start":118,"line_end":118,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180433,"byte_end":180436,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180441,"byte_end":180447,"line_start":120,"line_end":120,"column_start":5,"column_end":11}},{"value":"/ # use etherparse::{SlicedPacket, PacketBuilder};","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180452,"byte_end":180504,"line_start":121,"line_end":121,"column_start":5,"column_end":57}},{"value":"/ # let builder = PacketBuilder::","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180509,"byte_end":180544,"line_start":122,"line_end":122,"column_start":5,"column_end":40}},{"value":"/ #    ipv4([192,168,1,1], //source ip","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180549,"byte_end":180589,"line_start":123,"line_end":123,"column_start":5,"column_end":45}},{"value":"/ #         [192,168,1,2], //desitionation ip","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180594,"byte_end":180641,"line_start":124,"line_end":124,"column_start":5,"column_end":52}},{"value":"/ #         20)            //time to life","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180646,"byte_end":180689,"line_start":125,"line_end":125,"column_start":5,"column_end":48}},{"value":"/ #    .udp(21,    //source port ","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180694,"byte_end":180729,"line_start":126,"line_end":126,"column_start":5,"column_end":40}},{"value":"/ #         1234); //desitnation port","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180734,"byte_end":180773,"line_start":127,"line_end":127,"column_start":5,"column_end":44}},{"value":"/ #    //payload of the udp packet","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180778,"byte_end":180814,"line_start":128,"line_end":128,"column_start":5,"column_end":41}},{"value":"/ #    let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180819,"byte_end":180860,"line_start":129,"line_end":129,"column_start":5,"column_end":46}},{"value":"/ #    //get some memory to store the serialized data","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180865,"byte_end":180920,"line_start":130,"line_end":130,"column_start":5,"column_end":60}},{"value":"/ #    let mut packet = Vec::<u8>::with_capacity(","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180925,"byte_end":180976,"line_start":131,"line_end":131,"column_start":5,"column_end":56}},{"value":"/ #                            builder.size(payload.len()));","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":180981,"byte_end":181043,"line_start":132,"line_end":132,"column_start":5,"column_end":67}},{"value":"/ #    builder.write(&mut packet, &payload).unwrap();","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":181048,"byte_end":181103,"line_start":133,"line_end":133,"column_start":5,"column_end":60}},{"value":"/ match SlicedPacket::from_ip(&packet) {","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":181108,"byte_end":181150,"line_start":134,"line_end":134,"column_start":5,"column_end":47}},{"value":"/     Err(value) => println!(\"Err {:?}\", value),","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":181155,"byte_end":181205,"line_start":135,"line_end":135,"column_start":5,"column_end":55}},{"value":"/     Ok(value) => {","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":181210,"byte_end":181232,"line_start":136,"line_end":136,"column_start":5,"column_end":27}},{"value":"/         //link & vlan fields are empty when parsing from ip downwards","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":181237,"byte_end":181310,"line_start":137,"line_end":137,"column_start":5,"column_end":78}},{"value":"/         assert_eq!(None, value.link);","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":181315,"byte_end":181356,"line_start":138,"line_end":138,"column_start":5,"column_end":46}},{"value":"/         assert_eq!(None, value.vlan);","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":181361,"byte_end":181402,"line_start":139,"line_end":139,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":181407,"byte_end":181410,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/         //ip & transport (udp or tcp)","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":181415,"byte_end":181456,"line_start":141,"line_end":141,"column_start":5,"column_end":46}},{"value":"/         println!(\"ip: {:?}\", value.ip);","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":181461,"byte_end":181504,"line_start":142,"line_end":142,"column_start":5,"column_end":48}},{"value":"/         println!(\"transport: {:?}\", value.transport);","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":181509,"byte_end":181566,"line_start":143,"line_end":143,"column_start":5,"column_end":62}},{"value":"/     }","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":181571,"byte_end":181580,"line_start":144,"line_end":144,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":181585,"byte_end":181590,"line_start":145,"line_end":145,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":181595,"byte_end":181602,"line_start":146,"line_end":146,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":653},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"packet_filter","qualname":"::packet_filter","value":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","parent":null,"children":[{"krate":0,"index":654},{"krate":0,"index":1773},{"krate":0,"index":1796},{"krate":0,"index":1793},{"krate":0,"index":1788},{"krate":0,"index":1790},{"krate":0,"index":1782},{"krate":0,"index":1784},{"krate":0,"index":1799},{"krate":0,"index":1816},{"krate":0,"index":1814},{"krate":0,"index":1809},{"krate":0,"index":1810},{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1818},{"krate":0,"index":1834},{"krate":0,"index":1832},{"krate":0,"index":1829},{"krate":0,"index":1830},{"krate":0,"index":1825},{"krate":0,"index":1826},{"krate":0,"index":1836},{"krate":0,"index":1860},{"krate":0,"index":1858},{"krate":0,"index":1851},{"krate":0,"index":1852},{"krate":0,"index":1847},{"krate":0,"index":1848},{"krate":0,"index":1862},{"krate":0,"index":1878},{"krate":0,"index":1876},{"krate":0,"index":1873},{"krate":0,"index":1874},{"krate":0,"index":1869},{"krate":0,"index":1870},{"krate":0,"index":1880},{"krate":0,"index":1896},{"krate":0,"index":1894},{"krate":0,"index":1892},{"krate":0,"index":1889},{"krate":0,"index":1890},{"krate":0,"index":1885},{"krate":0,"index":1886},{"krate":0,"index":655},{"krate":0,"index":658},{"krate":0,"index":661},{"krate":0,"index":664},{"krate":0,"index":667},{"krate":0,"index":670}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1775},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":188978,"byte_end":188981,"line_start":5,"line_end":5,"column_start":5,"column_end":8},"name":"Any","qualname":"::packet_filter::ElementFilter::Any","value":"ElementFilter::Any","parent":{"krate":0,"index":1773},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1777},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":188987,"byte_end":188989,"line_start":6,"line_end":6,"column_start":5,"column_end":7},"name":"No","qualname":"::packet_filter::ElementFilter::No","value":"ElementFilter::No","parent":{"krate":0,"index":1773},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1779},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":188995,"byte_end":188999,"line_start":7,"line_end":7,"column_start":5,"column_end":9},"name":"Some","qualname":"::packet_filter::ElementFilter::Some","value":"ElementFilter::Some(T)","parent":{"krate":0,"index":1773},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1773},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":188955,"byte_end":188968,"line_start":4,"line_end":4,"column_start":10,"column_end":23},"name":"ElementFilter","qualname":"::packet_filter::ElementFilter","value":"pub enum ElementFilter<T> { Any, No, Some(T), }","parent":null,"children":[{"krate":0,"index":1775},{"krate":0,"index":1777},{"krate":0,"index":1779}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1800},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":189071,"byte_end":189080,"line_start":12,"line_end":12,"column_start":5,"column_end":14},"name":"Ethernet2","qualname":"::packet_filter::LinkFilter::Ethernet2","value":"LinkFilter::Ethernet2 { source, destination }","parent":{"krate":0,"index":1799},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1799},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":189054,"byte_end":189064,"line_start":11,"line_end":11,"column_start":10,"column_end":20},"name":"LinkFilter","qualname":"::packet_filter::LinkFilter","value":"pub enum LinkFilter {\n    Ethernet2 {\n        source: Option<[u8; ]>,\n        destination: Option<[u8; ]>,\n    },\n}","parent":null,"children":[{"krate":0,"index":1800}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1819},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":189225,"byte_end":189231,"line_start":20,"line_end":20,"column_start":5,"column_end":11},"name":"Single","qualname":"::packet_filter::VlanFilter::Single","value":"VlanFilter::Single(Option<u16>)","parent":{"krate":0,"index":1818},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1822},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":189250,"byte_end":189256,"line_start":21,"line_end":21,"column_start":5,"column_end":11},"name":"Double","qualname":"::packet_filter::VlanFilter::Double","value":"VlanFilter::Double { outer_identifier, inner_identifier }","parent":{"krate":0,"index":1818},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1818},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":189208,"byte_end":189218,"line_start":19,"line_end":19,"column_start":10,"column_end":20},"name":"VlanFilter","qualname":"::packet_filter::VlanFilter","value":"pub enum VlanFilter {\n    Single(Option<u16>),\n    Double {\n        outer_identifier: Option<u16>,\n        inner_identifier: Option<u16>,\n    },\n}","parent":null,"children":[{"krate":0,"index":1819},{"krate":0,"index":1822}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1837},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":189408,"byte_end":189412,"line_start":29,"line_end":29,"column_start":5,"column_end":9},"name":"Ipv4","qualname":"::packet_filter::IpFilter::Ipv4","value":"IpFilter::Ipv4 { source, destination }","parent":{"krate":0,"index":1836},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1842},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":189494,"byte_end":189498,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"Ipv6","qualname":"::packet_filter::IpFilter::Ipv6","value":"IpFilter::Ipv6 { source, destination }","parent":{"krate":0,"index":1836},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1836},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":189393,"byte_end":189401,"line_start":28,"line_end":28,"column_start":10,"column_end":18},"name":"IpFilter","qualname":"::packet_filter::IpFilter","value":"pub enum IpFilter {\n    Ipv4 {\n        source: Option<[u8; ]>,\n        destination: Option<[u8; ]>,\n    },\n    Ipv6 {\n        source: Option<[u8; ]>,\n        destination: Option<[u8; ]>,\n    },\n}","parent":null,"children":[{"krate":0,"index":1837},{"krate":0,"index":1842}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1863},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":189650,"byte_end":189653,"line_start":41,"line_end":41,"column_start":5,"column_end":8},"name":"Udp","qualname":"::packet_filter::TransportFilter::Udp","value":"TransportFilter::Udp { source_port, destination_port }","parent":{"krate":0,"index":1862},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1866},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":189739,"byte_end":189742,"line_start":45,"line_end":45,"column_start":5,"column_end":8},"name":"Tcp","qualname":"::packet_filter::TransportFilter::Tcp","value":"TransportFilter::Tcp { source_port, destination_port }","parent":{"krate":0,"index":1862},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1862},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":189628,"byte_end":189643,"line_start":40,"line_end":40,"column_start":10,"column_end":25},"name":"TransportFilter","qualname":"::packet_filter::TransportFilter","value":"pub enum TransportFilter {\n    Udp {\n        source_port: Option<u16>,\n        destination_port: Option<u16>,\n    },\n    Tcp {\n        source_port: Option<u16>,\n        destination_port: Option<u16>,\n    },\n}","parent":null,"children":[{"krate":0,"index":1863},{"krate":0,"index":1866}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1880},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":189885,"byte_end":189891,"line_start":52,"line_end":52,"column_start":12,"column_end":18},"name":"Filter","qualname":"::packet_filter::Filter","value":"Filter { link, vlan, ip, transport }","parent":null,"children":[{"krate":0,"index":1881},{"krate":0,"index":1882},{"krate":0,"index":1883},{"krate":0,"index":1884}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1881},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":189902,"byte_end":189906,"line_start":53,"line_end":53,"column_start":9,"column_end":13},"name":"link","qualname":"::packet_filter::Filter::link","value":"packet_filter::ElementFilter<packet_filter::LinkFilter>","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1882},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":189943,"byte_end":189947,"line_start":54,"line_end":54,"column_start":9,"column_end":13},"name":"vlan","qualname":"::packet_filter::Filter::vlan","value":"packet_filter::ElementFilter<packet_filter::VlanFilter>","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1883},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":189984,"byte_end":189986,"line_start":55,"line_end":55,"column_start":9,"column_end":11},"name":"ip","qualname":"::packet_filter::Filter::ip","value":"packet_filter::ElementFilter<packet_filter::IpFilter>","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1884},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":190021,"byte_end":190030,"line_start":56,"line_end":56,"column_start":9,"column_end":18},"name":"transport","qualname":"::packet_filter::Filter::transport","value":"packet_filter::ElementFilter<packet_filter::TransportFilter>","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":190210,"byte_end":190226,"line_start":66,"line_end":66,"column_start":12,"column_end":28},"name":"applies_to_slice","qualname":"<LinkFilter>::applies_to_slice","value":"pub fn applies_to_slice(&Self, &LinkSlice) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":190849,"byte_end":190865,"line_start":86,"line_end":86,"column_start":12,"column_end":28},"name":"applies_to_slice","qualname":"<VlanFilter>::applies_to_slice","value":"pub fn applies_to_slice(&Self, &VlanSlice) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":192069,"byte_end":192085,"line_start":119,"line_end":119,"column_start":12,"column_end":28},"name":"applies_to_slice","qualname":"<IpFilter>::applies_to_slice","value":"pub fn applies_to_slice(&Self, &InternetSlice) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":193449,"byte_end":193465,"line_start":155,"line_end":155,"column_start":12,"column_end":28},"name":"applies_to_slice","qualname":"<TransportFilter>::applies_to_slice","value":"pub fn applies_to_slice(&Self, &TransportSlice) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":195078,"byte_end":195094,"line_start":198,"line_end":198,"column_start":12,"column_end":28},"name":"applies_to_slice","qualname":"<Filter>::applies_to_slice","value":"pub fn applies_to_slice(&Self, &SlicedPacket) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns true if a given sliced network package fullfills all conditions of this filter.\n","sig":null,"attributes":[{"value":"/Returns true if a given sliced network package fullfills all conditions of this filter.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":194976,"byte_end":195066,"line_start":197,"line_end":197,"column_start":5,"column_end":95}}]},{"kind":"Trait","id":{"krate":0,"index":672},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":11906,"byte_end":11920,"line_start":231,"line_end":231,"column_start":11,"column_end":25},"name":"SerializedSize","qualname":"::SerializedSize","value":"SerializedSize","parent":null,"children":[{"krate":0,"index":673}],"decl_id":null,"docs":"Contains the size when serialized.\n","sig":null,"attributes":[{"value":"/Contains the size when serialized.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":11858,"byte_end":11895,"line_start":230,"line_end":230,"column_start":1,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":673},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":11933,"byte_end":11948,"line_start":232,"line_end":232,"column_start":11,"column_end":26},"name":"SERIALIZED_SIZE","qualname":"::SerializedSize::SERIALIZED_SIZE","value":"usize","parent":{"krate":0,"index":672},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1899},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":12041,"byte_end":12048,"line_start":238,"line_end":238,"column_start":5,"column_end":12},"name":"IoError","qualname":"::ReadError::IoError","value":"ReadError::IoError(std::io::Error)","parent":{"krate":0,"index":1898},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1902},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":12215,"byte_end":12235,"line_start":240,"line_end":240,"column_start":5,"column_end":25},"name":"UnexpectedEndOfSlice","qualname":"::ReadError::UnexpectedEndOfSlice","value":"ReadError::UnexpectedEndOfSlice(usize)","parent":{"krate":0,"index":1898},"children":[],"decl_id":null,"docs":"Error when an unexpected end of a slice was reached even though more data was expected to be present (expected minimum size as argument).\n","sig":null,"attributes":[{"value":"/Error when an unexpected end of a slice was reached even though more data was expected to be present (expected minimum size as argument).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":12070,"byte_end":12210,"line_start":239,"line_end":239,"column_start":5,"column_end":145}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1905},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":12372,"byte_end":12408,"line_start":242,"line_end":242,"column_start":5,"column_end":41},"name":"VlanDoubleTaggingUnexpectedOuterTpid","qualname":"::ReadError::VlanDoubleTaggingUnexpectedOuterTpid","value":"ReadError::VlanDoubleTaggingUnexpectedOuterTpid(u16)","parent":{"krate":0,"index":1898},"children":[],"decl_id":null,"docs":"Error when a double vlan tag was expected but the tpid of the outer vlan does not contain the expected id of 0x8100.\n","sig":null,"attributes":[{"value":"/Error when a double vlan tag was expected but the tpid of the outer vlan does not contain the expected id of 0x8100.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":12248,"byte_end":12367,"line_start":241,"line_end":241,"column_start":5,"column_end":124}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1908},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":12548,"byte_end":12568,"line_start":244,"line_end":244,"column_start":5,"column_end":25},"name":"IpUnsupportedVersion","qualname":"::ReadError::IpUnsupportedVersion","value":"ReadError::IpUnsupportedVersion(u8)","parent":{"krate":0,"index":1898},"children":[],"decl_id":null,"docs":"Error when the ip header version is not supported (only 4 & 6 are supported). The value is the version that was received.\n","sig":null,"attributes":[{"value":"/Error when the ip header version is not supported (only 4 & 6 are supported). The value is the version that was received.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":12419,"byte_end":12543,"line_start":243,"line_end":243,"column_start":5,"column_end":129}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1911},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":12684,"byte_end":12705,"line_start":246,"line_end":246,"column_start":5,"column_end":26},"name":"Ipv4UnexpectedVersion","qualname":"::ReadError::Ipv4UnexpectedVersion","value":"ReadError::Ipv4UnexpectedVersion(u8)","parent":{"krate":0,"index":1898},"children":[],"decl_id":null,"docs":"Error when the ip header version field is not equal 4. The value is the version that was received.\n","sig":null,"attributes":[{"value":"/Error when the ip header version field is not equal 4. The value is the version that was received.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":12578,"byte_end":12679,"line_start":245,"line_end":245,"column_start":5,"column_end":106}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1914},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":12795,"byte_end":12814,"line_start":248,"line_end":248,"column_start":5,"column_end":24},"name":"Ipv4HeaderLengthBad","qualname":"::ReadError::Ipv4HeaderLengthBad","value":"ReadError::Ipv4HeaderLengthBad(u8)","parent":{"krate":0,"index":1898},"children":[],"decl_id":null,"docs":"Error when the ipv4 header length is smaller then the header itself (5).\n","sig":null,"attributes":[{"value":"/Error when the ipv4 header length is smaller then the header itself (5).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":12715,"byte_end":12790,"line_start":247,"line_end":247,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1917},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":12908,"byte_end":12931,"line_start":250,"line_end":250,"column_start":5,"column_end":28},"name":"Ipv4TotalLengthTooSmall","qualname":"::ReadError::Ipv4TotalLengthTooSmall","value":"ReadError::Ipv4TotalLengthTooSmall(u16)","parent":{"krate":0,"index":1898},"children":[],"decl_id":null,"docs":"Error when the total length field is too small to contain the header itself.\n","sig":null,"attributes":[{"value":"/Error when the total length field is too small to contain the header itself.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":12824,"byte_end":12903,"line_start":249,"line_end":249,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1920},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":13049,"byte_end":13070,"line_start":252,"line_end":252,"column_start":5,"column_end":26},"name":"Ipv6UnexpectedVersion","qualname":"::ReadError::Ipv6UnexpectedVersion","value":"ReadError::Ipv6UnexpectedVersion(u8)","parent":{"krate":0,"index":1898},"children":[],"decl_id":null,"docs":"Error when then ip header version field is not equal 6. The value is the version that was received.\n","sig":null,"attributes":[{"value":"/Error when then ip header version field is not equal 6. The value is the version that was received.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":12942,"byte_end":13044,"line_start":251,"line_end":251,"column_start":5,"column_end":107}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1923},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":13190,"byte_end":13217,"line_start":254,"line_end":254,"column_start":5,"column_end":32},"name":"Ipv6TooManyHeaderExtensions","qualname":"::ReadError::Ipv6TooManyHeaderExtensions","value":"ReadError::Ipv6TooManyHeaderExtensions","parent":{"krate":0,"index":1898},"children":[],"decl_id":null,"docs":"Error when more then 7 header extensions are present (according to RFC82000 this should never happen).\n","sig":null,"attributes":[{"value":"/Error when more then 7 header extensions are present (according to RFC82000 this should never happen).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":13080,"byte_end":13185,"line_start":253,"line_end":253,"column_start":5,"column_end":110}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1925},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":13342,"byte_end":13363,"line_start":256,"line_end":256,"column_start":5,"column_end":26},"name":"TcpDataOffsetTooSmall","qualname":"::ReadError::TcpDataOffsetTooSmall","value":"ReadError::TcpDataOffsetTooSmall(u8)","parent":{"krate":0,"index":1898},"children":[],"decl_id":null,"docs":"Error given if the data_offset field in a TCP header is smaller then the minimum size of the tcp header itself.\n","sig":null,"attributes":[{"value":"/Error given if the data_offset field in a TCP header is smaller then the minimum size of the tcp header itself.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":13223,"byte_end":13337,"line_start":255,"line_end":255,"column_start":5,"column_end":119}}]},{"kind":"Enum","id":{"krate":0,"index":1898},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":12025,"byte_end":12034,"line_start":237,"line_end":237,"column_start":10,"column_end":19},"name":"ReadError","qualname":"::ReadError","value":"pub enum ReadError {\n    IoError(std::io::Error),\n\n    ///Error when an unexpected end of a slice was reached even though more data was expected to be present (expected minimum size as argument).\n    UnexpectedEndOfSlice(usize),\n\n    ///Error when a double vlan tag was expected but the tpid of the outer vlan does not contain the expected id of 0x8100.\n    VlanDoubleTaggingUnexpectedOuterTpid(u16),\n\n    ///Error when the ip header version is not supported (only 4 & 6 are supported). The value is the version that was received.\n    IpUnsupportedVersion(u8),\n\n    ///Error when the ip header version field is not equal 4. The value is the version that was received.\n    Ipv4UnexpectedVersion(u8),\n\n    ///Error when the ipv4 header length is smaller then the header itself (5).\n    Ipv4HeaderLengthBad(u8),\n\n    ///Error when the total length field is too small to contain the header itself.\n    Ipv4TotalLengthTooSmall(u16),\n\n    ///Error when then ip header version field is not equal 6. The value is the version that was received.\n    Ipv6UnexpectedVersion(u8),\n\n    ///Error when more then 7 header extensions are present (according to RFC82000 this should never happen).\n    Ipv6TooManyHeaderExtensions,\n\n    ///Error given if the data_offset field in a TCP header is smaller then the minimum size of the tcp header itself.\n    TcpDataOffsetTooSmall(u8),\n}","parent":null,"children":[{"krate":0,"index":1899},{"krate":0,"index":1902},{"krate":0,"index":1905},{"krate":0,"index":1908},{"krate":0,"index":1911},{"krate":0,"index":1914},{"krate":0,"index":1917},{"krate":0,"index":1920},{"krate":0,"index":1923},{"krate":0,"index":1925}],"decl_id":null,"docs":"Errors that can occur when reading.\n","sig":null,"attributes":[{"value":"/Errors that can occur when reading.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":11960,"byte_end":11998,"line_start":235,"line_end":235,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":13463,"byte_end":13479,"line_start":261,"line_end":261,"column_start":12,"column_end":28},"name":"add_slice_offset","qualname":"<ReadError>::add_slice_offset","value":"pub fn add_slice_offset(Self, usize) -> ReadError","parent":null,"children":[],"decl_id":null,"docs":"Adds an offset value to the UnexpectedEndOfSlice error.\n","sig":null,"attributes":[{"value":"/Adds an offset value to the UnexpectedEndOfSlice error.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":13393,"byte_end":13451,"line_start":260,"line_end":260,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1931},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":16361,"byte_end":16368,"line_start":326,"line_end":326,"column_start":5,"column_end":12},"name":"IoError","qualname":"::WriteError::IoError","value":"WriteError::IoError(std::io::Error)","parent":{"krate":0,"index":1930},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1934},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":16439,"byte_end":16449,"line_start":328,"line_end":328,"column_start":5,"column_end":15},"name":"ValueError","qualname":"::WriteError::ValueError","value":"WriteError::ValueError(ValueError)","parent":{"krate":0,"index":1930},"children":[],"decl_id":null,"docs":"Error in the data that was given to write\n","sig":null,"attributes":[{"value":"/Error in the data that was given to write","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":16390,"byte_end":16434,"line_start":327,"line_end":327,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1937},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":16540,"byte_end":16553,"line_start":330,"line_end":330,"column_start":5,"column_end":18},"name":"SliceTooSmall","qualname":"::WriteError::SliceTooSmall","value":"WriteError::SliceTooSmall(usize)","parent":{"krate":0,"index":1930},"children":[],"decl_id":null,"docs":"Error when a given slice is not big enough to serialize the data.\n","sig":null,"attributes":[{"value":"/Error when a given slice is not big enough to serialize the data.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":16467,"byte_end":16535,"line_start":329,"line_end":329,"column_start":5,"column_end":73}}]},{"kind":"Enum","id":{"krate":0,"index":1930},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":16344,"byte_end":16354,"line_start":325,"line_end":325,"column_start":10,"column_end":20},"name":"WriteError","qualname":"::WriteError","value":"pub enum WriteError {\n    IoError(std::io::Error),\n\n    ///Error in the data that was given to write\n    ValueError(ValueError),\n\n    ///Error when a given slice is not big enough to serialize the data.\n    SliceTooSmall(usize),\n}","parent":null,"children":[{"krate":0,"index":1931},{"krate":0,"index":1934},{"krate":0,"index":1937}],"decl_id":null,"docs":"Errors that can occur when writing.\n","sig":null,"attributes":[{"value":"/Errors that can occur when writing.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":16279,"byte_end":16317,"line_start":323,"line_end":323,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":16594,"byte_end":16605,"line_start":334,"line_end":334,"column_start":12,"column_end":23},"name":"value_error","qualname":"<WriteError>::value_error","value":"pub fn value_error(Self) -> Option<ValueError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1943},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":18012,"byte_end":18032,"line_start":385,"line_end":385,"column_start":5,"column_end":25},"name":"Ipv4OptionsLengthBad","qualname":"::ValueError::Ipv4OptionsLengthBad","value":"ValueError::Ipv4OptionsLengthBad(usize)","parent":{"krate":0,"index":1942},"children":[],"decl_id":null,"docs":"Error when the ipv4 options length is too big or not aligned (cannot be bigger then 40 bytes and must be a multiple of 4 bytes).\n","sig":null,"attributes":[{"value":"/Error when the ipv4 options length is too big or not aligned (cannot be bigger then 40 bytes and must be a multiple of 4 bytes).","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":17876,"byte_end":18007,"line_start":384,"line_end":384,"column_start":5,"column_end":136}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1946},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":18153,"byte_end":18178,"line_start":387,"line_end":387,"column_start":5,"column_end":30},"name":"Ipv4PayloadLengthTooLarge","qualname":"::ValueError::Ipv4PayloadLengthTooLarge","value":"ValueError::Ipv4PayloadLengthTooLarge(usize)","parent":{"krate":0,"index":1942},"children":[],"decl_id":null,"docs":"Error when a given payload & ipv4 header is bigger then what fits inside an ipv4 total_length field.\n","sig":null,"attributes":[{"value":"/Error when a given payload & ipv4 header is bigger then what fits inside an ipv4 total_length field.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":18045,"byte_end":18148,"line_start":386,"line_end":386,"column_start":5,"column_end":108}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1949},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":18307,"byte_end":18332,"line_start":389,"line_end":389,"column_start":5,"column_end":30},"name":"Ipv6PayloadLengthTooLarge","qualname":"::ValueError::Ipv6PayloadLengthTooLarge","value":"ValueError::Ipv6PayloadLengthTooLarge(usize)","parent":{"krate":0,"index":1942},"children":[],"decl_id":null,"docs":"Error when a given payload & ipv6 header block is bigger then what fits inside an ipv6 payload_length field.\n","sig":null,"attributes":[{"value":"/Error when a given payload & ipv6 header block is bigger then what fits inside an ipv6 payload_length field.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":18191,"byte_end":18302,"line_start":388,"line_end":388,"column_start":5,"column_end":116}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1952},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":18570,"byte_end":18594,"line_start":392,"line_end":392,"column_start":5,"column_end":29},"name":"UdpPayloadLengthTooLarge","qualname":"::ValueError::UdpPayloadLengthTooLarge","value":"ValueError::UdpPayloadLengthTooLarge(usize)","parent":{"krate":0,"index":1942},"children":[],"decl_id":null,"docs":"Error when a given payload is bigger then what fits inside an udp packet\nNote that a the maximum payload size, as far as udp is conceirned, is max_value(u16) - 8. The 8 is for the size of the udp header itself.\n","sig":null,"attributes":[{"value":"/Error when a given payload is bigger then what fits inside an udp packet","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":18345,"byte_end":18420,"line_start":390,"line_end":390,"column_start":5,"column_end":80}},{"value":"/Note that a the maximum payload size, as far as udp is conceirned, is max_value(u16) - 8. The 8 is for the size of the udp header itself.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":18425,"byte_end":18565,"line_start":391,"line_end":391,"column_start":5,"column_end":145}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1955},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":18880,"byte_end":18897,"line_start":395,"line_end":395,"column_start":5,"column_end":22},"name":"TcpLengthTooLarge","qualname":"::ValueError::TcpLengthTooLarge","value":"ValueError::TcpLengthTooLarge(usize)","parent":{"krate":0,"index":1942},"children":[],"decl_id":null,"docs":"Error when a given payload + tcp header options is bigger then what fits inside an tcp packet\nNote that a the maximum size, as far as tcp is conceirned, is max_value(u16) - tcp_header.data_offset()*4. The data_offset is for the size of the udp header itself.\n","sig":null,"attributes":[{"value":"/Error when a given payload + tcp header options is bigger then what fits inside an tcp packet","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":18607,"byte_end":18703,"line_start":393,"line_end":393,"column_start":5,"column_end":101}},{"value":"/Note that a the maximum size, as far as tcp is conceirned, is max_value(u16) - tcp_header.data_offset()*4. The data_offset is for the size of the udp header itself.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":18708,"byte_end":18875,"line_start":394,"line_end":394,"column_start":5,"column_end":172}}]},{"kind":"StructVariant","id":{"krate":0,"index":1958},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":18986,"byte_end":18996,"line_start":397,"line_end":397,"column_start":5,"column_end":15},"name":"U8TooLarge","qualname":"::ValueError::U8TooLarge","value":"ValueError::U8TooLarge { value, max, field }","parent":{"krate":0,"index":1942},"children":[],"decl_id":null,"docs":"Error when a u8 field in a header has a larger value then supported.\n","sig":null,"attributes":[{"value":"/Error when a u8 field in a header has a larger value then supported.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":18910,"byte_end":18981,"line_start":396,"line_end":396,"column_start":5,"column_end":76}}]},{"kind":"StructVariant","id":{"krate":0,"index":1962},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":19118,"byte_end":19129,"line_start":399,"line_end":399,"column_start":5,"column_end":16},"name":"U16TooLarge","qualname":"::ValueError::U16TooLarge","value":"ValueError::U16TooLarge { value, max, field }","parent":{"krate":0,"index":1942},"children":[],"decl_id":null,"docs":"Error when a u16 field in a header has a larger value then supported.\n","sig":null,"attributes":[{"value":"/Error when a u16 field in a header has a larger value then supported.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":19041,"byte_end":19113,"line_start":398,"line_end":398,"column_start":5,"column_end":77}}]},{"kind":"StructVariant","id":{"krate":0,"index":1966},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":19253,"byte_end":19264,"line_start":401,"line_end":401,"column_start":5,"column_end":16},"name":"U32TooLarge","qualname":"::ValueError::U32TooLarge","value":"ValueError::U32TooLarge { value, max, field }","parent":{"krate":0,"index":1942},"children":[],"decl_id":null,"docs":"Error when a u32 field in a header has a larger value then supported.\n","sig":null,"attributes":[{"value":"/Error when a u32 field in a header has a larger value then supported.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":19176,"byte_end":19248,"line_start":400,"line_end":400,"column_start":5,"column_end":77}}]},{"kind":"Enum","id":{"krate":0,"index":1942},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":17859,"byte_end":17869,"line_start":383,"line_end":383,"column_start":10,"column_end":20},"name":"ValueError","qualname":"::ValueError","value":"pub enum ValueError {\n\n    ///Error when the ipv4 options length is too big or not aligned (cannot be bigger then 40 bytes and must be a multiple of 4 bytes).\n    Ipv4OptionsLengthBad(usize),\n\n    ///Error when a given payload & ipv4 header is bigger then what fits inside an ipv4 total_length field.\n    Ipv4PayloadLengthTooLarge(usize),\n\n    ///Error when a given payload & ipv6 header block is bigger then what fits inside an ipv6 payload_length field.\n    Ipv6PayloadLengthTooLarge(usize),\n\n    ///Error when a given payload is bigger then what fits inside an udp packet\n    ///Note that a the maximum payload size, as far as udp is conceirned, is max_value(u16) - 8. The 8 is for the size of the udp header itself.\n    UdpPayloadLengthTooLarge(usize),\n\n    ///Error when a given payload + tcp header options is bigger then what fits inside an tcp packet\n    ///Note that a the maximum size, as far as tcp is conceirned, is max_value(u16) - tcp_header.data_offset()*4. The data_offset is for the size of the udp header itself.\n    TcpLengthTooLarge(usize),\n\n    ///Error when a u8 field in a header has a larger value then supported.\n    U8TooLarge {\n        value: u8,\n        max: u8,\n        field: ErrorField,\n    },\n\n    ///Error when a u16 field in a header has a larger value then supported.\n    U16TooLarge {\n        value: u16,\n        max: u16,\n        field: ErrorField,\n    },\n\n    ///Error when a u32 field in a header has a larger value then supported.\n    U32TooLarge {\n        value: u32,\n        max: u32,\n        field: ErrorField,\n    },\n}","parent":null,"children":[{"krate":0,"index":1943},{"krate":0,"index":1946},{"krate":0,"index":1949},{"krate":0,"index":1952},{"krate":0,"index":1955},{"krate":0,"index":1958},{"krate":0,"index":1962},{"krate":0,"index":1966}],"decl_id":null,"docs":"Errors in the given data\n","sig":null,"attributes":[{"value":"/Errors in the given data","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":17783,"byte_end":17810,"line_start":381,"line_end":381,"column_start":1,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1982},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":21427,"byte_end":21444,"line_start":443,"line_end":443,"column_start":5,"column_end":22},"name":"Ipv4PayloadLength","qualname":"::ErrorField::Ipv4PayloadLength","value":"ErrorField::Ipv4PayloadLength","parent":{"krate":0,"index":1981},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1984},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":21450,"byte_end":21458,"line_start":444,"line_end":444,"column_start":5,"column_end":13},"name":"Ipv4Dscp","qualname":"::ErrorField::Ipv4Dscp","value":"ErrorField::Ipv4Dscp","parent":{"krate":0,"index":1981},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1986},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":21464,"byte_end":21471,"line_start":445,"line_end":445,"column_start":5,"column_end":12},"name":"Ipv4Ecn","qualname":"::ErrorField::Ipv4Ecn","value":"ErrorField::Ipv4Ecn","parent":{"krate":0,"index":1981},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1988},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":21477,"byte_end":21496,"line_start":446,"line_end":446,"column_start":5,"column_end":24},"name":"Ipv4FragmentsOffset","qualname":"::ErrorField::Ipv4FragmentsOffset","value":"ErrorField::Ipv4FragmentsOffset","parent":{"krate":0,"index":1981},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1990},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":21502,"byte_end":21515,"line_start":447,"line_end":447,"column_start":5,"column_end":18},"name":"Ipv6FlowLabel","qualname":"::ErrorField::Ipv6FlowLabel","value":"ErrorField::Ipv6FlowLabel","parent":{"krate":0,"index":1981},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1992},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":21566,"byte_end":21590,"line_start":449,"line_end":449,"column_start":5,"column_end":29},"name":"VlanTagPriorityCodePoint","qualname":"::ErrorField::VlanTagPriorityCodePoint","value":"ErrorField::VlanTagPriorityCodePoint","parent":{"krate":0,"index":1981},"children":[],"decl_id":null,"docs":"VlanTaggingHeader.priority_code_point\n","sig":null,"attributes":[{"value":"/VlanTaggingHeader.priority_code_point","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":21521,"byte_end":21561,"line_start":448,"line_end":448,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1994},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":21637,"byte_end":21650,"line_start":451,"line_end":451,"column_start":5,"column_end":18},"name":"VlanTagVlanId","qualname":"::ErrorField::VlanTagVlanId","value":"ErrorField::VlanTagVlanId","parent":{"krate":0,"index":1981},"children":[],"decl_id":null,"docs":"VlanTaggingHeader.vlan_identifier\n","sig":null,"attributes":[{"value":"/VlanTaggingHeader.vlan_identifier","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":21596,"byte_end":21632,"line_start":450,"line_end":450,"column_start":5,"column_end":41}}]},{"kind":"Enum","id":{"krate":0,"index":1981},"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":21410,"byte_end":21420,"line_start":442,"line_end":442,"column_start":10,"column_end":20},"name":"ErrorField","qualname":"::ErrorField","value":"pub enum ErrorField {\n    Ipv4PayloadLength,\n    Ipv4Dscp,\n    Ipv4Ecn,\n    Ipv4FragmentsOffset,\n    Ipv6FlowLabel,\n\n    ///VlanTaggingHeader.priority_code_point\n    VlanTagPriorityCodePoint,\n\n    ///VlanTaggingHeader.vlan_identifier\n    VlanTagVlanId,\n}","parent":null,"children":[{"krate":0,"index":1982},{"krate":0,"index":1984},{"krate":0,"index":1986},{"krate":0,"index":1988},{"krate":0,"index":1990},{"krate":0,"index":1992},{"krate":0,"index":1994}],"decl_id":null,"docs":"Fields that can produce errors when serialized.\n","sig":null,"attributes":[{"value":"/Fields that can produce errors when serialized.","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":21311,"byte_end":21361,"line_start":440,"line_end":440,"column_start":1,"column_end":51}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":24049,"byte_end":24058,"line_start":20,"line_end":20,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":24811,"byte_end":24826,"line_start":45,"line_end":45,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":24923,"byte_end":24938,"line_start":50,"line_end":50,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":27222,"byte_end":27242,"line_start":108,"line_end":108,"column_start":10,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":29839,"byte_end":29855,"line_start":30,"line_end":30,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":29951,"byte_end":29967,"line_start":35,"line_end":35,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":32161,"byte_end":32177,"line_start":94,"line_end":94,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":32273,"byte_end":32289,"line_start":99,"line_end":99,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":33970,"byte_end":33991,"line_start":146,"line_end":146,"column_start":10,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":36114,"byte_end":36135,"line_start":205,"line_end":205,"column_start":10,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":38407,"byte_end":38415,"line_start":13,"line_end":13,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":116},{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":50113,"byte_end":50127,"line_start":346,"line_end":346,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":52269,"byte_end":52279,"line_start":34,"line_end":34,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":52435,"byte_end":52445,"line_start":41,"line_end":41,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":167},{"krate":0,"index":179},{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":189},{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":64365,"byte_end":64375,"line_start":349,"line_end":349,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":64934,"byte_end":64944,"line_start":370,"line_end":370,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":65861,"byte_end":65871,"line_start":390,"line_end":390,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":66739,"byte_end":66749,"line_start":409,"line_end":409,"column_start":23,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":66917,"byte_end":66932,"line_start":417,"line_end":417,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":229},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":73588,"byte_end":73598,"line_start":26,"line_end":26,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":73690,"byte_end":73700,"line_start":31,"line_end":31,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":82167,"byte_end":82182,"line_start":243,"line_end":243,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":86187,"byte_end":86211,"line_start":366,"line_end":366,"column_start":10,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":300},{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":91377,"byte_end":91386,"line_start":19,"line_end":19,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":317},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":324},{"krate":0,"index":327},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":334},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":99418,"byte_end":99427,"line_start":188,"line_end":188,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":99723,"byte_end":99737,"line_start":199,"line_end":199,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":349},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":104354,"byte_end":104363,"line_start":79,"line_end":79,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":392},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":405}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":122052,"byte_end":122061,"line_start":527,"line_end":527,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":123086,"byte_end":123095,"line_start":552,"line_end":552,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":123999,"byte_end":124008,"line_start":576,"line_end":576,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":124878,"byte_end":124887,"line_start":599,"line_end":599,"column_start":23,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":125053,"byte_end":125067,"line_start":607,"line_end":607,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":419},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":137266,"byte_end":137284,"line_start":925,"line_end":925,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":137634,"byte_end":137652,"line_start":937,"line_end":937,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":467},{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":87551,"byte_end":87566,"line_start":15,"line_end":15,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":477},{"krate":0,"index":479},{"krate":0,"index":481},{"krate":0,"index":483},{"krate":0,"index":485},{"krate":0,"index":487},{"krate":0,"index":489},{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144676,"byte_end":144689,"line_start":43,"line_end":43,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":505},{"krate":0,"index":508},{"krate":0,"index":511},{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":151512,"byte_end":151529,"line_start":254,"line_end":254,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":525},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":156381,"byte_end":156398,"line_start":390,"line_end":390,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":158749,"byte_end":158766,"line_start":455,"line_end":455,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":159745,"byte_end":159762,"line_start":482,"line_end":482,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":547},{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":160145,"byte_end":160162,"line_start":494,"line_end":494,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":169144,"byte_end":169157,"line_start":16,"line_end":16,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":584},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":176233,"byte_end":176242,"line_start":17,"line_end":17,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":178452,"byte_end":178464,"line_start":71,"line_end":71,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":617}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":181880,"byte_end":181891,"line_start":159,"line_end":159,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":630},{"krate":0,"index":633},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":641},{"krate":0,"index":645},{"krate":0,"index":648},{"krate":0,"index":651}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":190087,"byte_end":190100,"line_start":59,"line_end":59,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":190186,"byte_end":190196,"line_start":65,"line_end":65,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":190825,"byte_end":190835,"line_start":85,"line_end":85,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":192047,"byte_end":192055,"line_start":118,"line_end":118,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":665}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":193420,"byte_end":193435,"line_start":154,"line_end":154,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":668}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":194963,"byte_end":194969,"line_start":196,"line_end":196,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":671}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":13377,"byte_end":13386,"line_start":259,"line_end":259,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":675}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":13720,"byte_end":13729,"line_start":271,"line_end":271,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":15963,"byte_end":15972,"line_start":308,"line_end":308,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":16178,"byte_end":16187,"line_start":317,"line_end":317,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":683}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":16570,"byte_end":16580,"line_start":333,"line_end":333,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":685}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":16783,"byte_end":16793,"line_start":343,"line_end":343,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":687}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":16916,"byte_end":16926,"line_start":349,"line_end":349,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":17042,"byte_end":17052,"line_start":355,"line_end":355,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":17520,"byte_end":17530,"line_start":370,"line_end":370,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":19324,"byte_end":19334,"line_start":404,"line_end":404,"column_start":16,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":19363,"byte_end":19373,"line_start":408,"line_end":408,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":21677,"byte_end":21687,"line_start":454,"line_end":454,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":23121,"byte_end":23130,"line_start":502,"line_end":502,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":712}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":23309,"byte_end":23318,"line_start":512,"line_end":512,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":714},{"krate":0,"index":715}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":11842,"byte_end":11855,"line_start":228,"line_end":228,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":653}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":24049,"byte_end":24058,"line_start":20,"line_end":20,"column_start":6,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":716},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":24811,"byte_end":24826,"line_start":45,"line_end":45,"column_start":25,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":748},"to":{"krate":0,"index":672}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":24923,"byte_end":24938,"line_start":50,"line_end":50,"column_start":6,"column_end":21},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":748},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/ethernet.rs","byte_start":27222,"byte_end":27242,"line_start":108,"line_end":108,"column_start":10,"column_end":30},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":769},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":29839,"byte_end":29855,"line_start":30,"line_end":30,"column_start":25,"column_end":41},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":807},"to":{"krate":0,"index":672}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":29951,"byte_end":29967,"line_start":35,"line_end":35,"column_start":6,"column_end":22},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":807},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":32161,"byte_end":32177,"line_start":94,"line_end":94,"column_start":25,"column_end":41},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":825},"to":{"krate":0,"index":672}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":32273,"byte_end":32289,"line_start":99,"line_end":99,"column_start":6,"column_end":22},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":825},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":33970,"byte_end":33991,"line_start":146,"line_end":146,"column_start":10,"column_end":31},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":839},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/link/vlan_tagging.rs","byte_start":36114,"byte_end":36135,"line_start":205,"line_end":205,"column_start":10,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":859},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":38407,"byte_end":38415,"line_start":13,"line_end":13,"column_start":6,"column_end":14},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":879},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ip.rs","byte_start":50113,"byte_end":50127,"line_start":346,"line_end":346,"column_start":6,"column_end":20},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":897},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":52269,"byte_end":52279,"line_start":34,"line_end":34,"column_start":25,"column_end":35},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1340},"to":{"krate":0,"index":672}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":52435,"byte_end":52445,"line_start":41,"line_end":41,"column_start":6,"column_end":16},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":64365,"byte_end":64375,"line_start":349,"line_end":349,"column_start":18,"column_end":28},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1340},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":64934,"byte_end":64944,"line_start":370,"line_end":370,"column_start":16,"column_end":26},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1340},"to":{"krate":2,"index":6831}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":65861,"byte_end":65871,"line_start":390,"line_end":390,"column_start":30,"column_end":40},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1340},"to":{"krate":2,"index":1790}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":66739,"byte_end":66749,"line_start":409,"line_end":409,"column_start":23,"column_end":33},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1340},"to":{"krate":2,"index":1795}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv4.rs","byte_start":66917,"byte_end":66932,"line_start":417,"line_end":417,"column_start":10,"column_end":25},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":73588,"byte_end":73598,"line_start":26,"line_end":26,"column_start":25,"column_end":35},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1380},"to":{"krate":0,"index":672}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":73690,"byte_end":73700,"line_start":31,"line_end":31,"column_start":6,"column_end":16},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1380},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":82167,"byte_end":82182,"line_start":243,"line_end":243,"column_start":10,"column_end":25},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/internet/ipv6.rs","byte_start":86187,"byte_end":86211,"line_start":366,"line_end":366,"column_start":10,"column_end":34},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1439},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":91377,"byte_end":91386,"line_start":19,"line_end":19,"column_start":6,"column_end":15},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1459},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":99418,"byte_end":99427,"line_start":188,"line_end":188,"column_start":25,"column_end":34},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1459},"to":{"krate":0,"index":672}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/udp.rs","byte_start":99723,"byte_end":99737,"line_start":199,"line_end":199,"column_start":10,"column_end":24},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":104354,"byte_end":104363,"line_start":79,"line_end":79,"column_start":6,"column_end":15},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1497},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":122052,"byte_end":122061,"line_start":527,"line_end":527,"column_start":18,"column_end":27},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1497},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":123086,"byte_end":123095,"line_start":552,"line_end":552,"column_start":16,"column_end":25},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1497},"to":{"krate":2,"index":6831}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":123999,"byte_end":124008,"line_start":576,"line_end":576,"column_start":30,"column_end":39},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1497},"to":{"krate":2,"index":1790}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":124878,"byte_end":124887,"line_start":599,"line_end":599,"column_start":23,"column_end":32},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1497},"to":{"krate":2,"index":1795}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":125053,"byte_end":125067,"line_start":607,"line_end":607,"column_start":10,"column_end":24},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1519},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":137266,"byte_end":137284,"line_start":925,"line_end":925,"column_start":10,"column_end":28},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/tcp.rs","byte_start":137634,"byte_end":137652,"line_start":937,"line_end":937,"column_start":23,"column_end":41},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":451},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/transport/mod.rs","byte_start":87551,"byte_end":87566,"line_start":15,"line_end":15,"column_start":6,"column_end":21},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":144676,"byte_end":144689,"line_start":43,"line_end":43,"column_start":6,"column_end":19},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":503},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":151512,"byte_end":151529,"line_start":254,"line_end":254,"column_start":6,"column_end":23},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":156381,"byte_end":156398,"line_start":390,"line_end":390,"column_start":6,"column_end":23},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":158749,"byte_end":158766,"line_start":455,"line_end":455,"column_start":6,"column_end":23},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":159745,"byte_end":159762,"line_start":482,"line_end":482,"column_start":6,"column_end":23},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_builder.rs","byte_start":160145,"byte_end":160162,"line_start":494,"line_end":494,"column_start":6,"column_end":23},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_decoder.rs","byte_start":169144,"byte_end":169157,"line_start":16,"line_end":16,"column_start":10,"column_end":23},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1625},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":176233,"byte_end":176242,"line_start":17,"line_end":17,"column_start":10,"column_end":19},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1671},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":178452,"byte_end":178464,"line_start":71,"line_end":71,"column_start":10,"column_end":22},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1749},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_slicing.rs","byte_start":181880,"byte_end":181891,"line_start":159,"line_end":159,"column_start":10,"column_end":21},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":618},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":190087,"byte_end":190100,"line_start":59,"line_end":59,"column_start":21,"column_end":34},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1773},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":190186,"byte_end":190196,"line_start":65,"line_end":65,"column_start":6,"column_end":16},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1799},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":190825,"byte_end":190835,"line_start":85,"line_end":85,"column_start":6,"column_end":16},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1818},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":192047,"byte_end":192055,"line_start":118,"line_end":118,"column_start":6,"column_end":14},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1836},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":193420,"byte_end":193435,"line_start":154,"line_end":154,"column_start":6,"column_end":21},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1862},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/packet_filter.rs","byte_start":194963,"byte_end":194969,"line_start":196,"line_end":196,"column_start":6,"column_end":12},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1880},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":13377,"byte_end":13386,"line_start":259,"line_end":259,"column_start":6,"column_end":15},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1898},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":13720,"byte_end":13729,"line_start":271,"line_end":271,"column_start":23,"column_end":32},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1898},"to":{"krate":2,"index":6836}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":15963,"byte_end":15972,"line_start":308,"line_end":308,"column_start":16,"column_end":25},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1898},"to":{"krate":1,"index":1724}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":16178,"byte_end":16187,"line_start":317,"line_end":317,"column_start":31,"column_end":40},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1898},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":16570,"byte_end":16580,"line_start":333,"line_end":333,"column_start":6,"column_end":16},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1930},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":16783,"byte_end":16793,"line_start":343,"line_end":343,"column_start":27,"column_end":37},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1930},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":16916,"byte_end":16926,"line_start":349,"line_end":349,"column_start":31,"column_end":41},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1930},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":17042,"byte_end":17052,"line_start":355,"line_end":355,"column_start":23,"column_end":33},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1930},"to":{"krate":2,"index":6836}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":17520,"byte_end":17530,"line_start":370,"line_end":370,"column_start":16,"column_end":26},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1930},"to":{"krate":1,"index":1724}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":19324,"byte_end":19334,"line_start":404,"line_end":404,"column_start":16,"column_end":26},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1942},"to":{"krate":1,"index":1724}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":19363,"byte_end":19373,"line_start":408,"line_end":408,"column_start":23,"column_end":33},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1942},"to":{"krate":2,"index":6836}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":21677,"byte_end":21687,"line_start":454,"line_end":454,"column_start":23,"column_end":33},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1981},"to":{"krate":2,"index":6836}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":23121,"byte_end":23130,"line_start":502,"line_end":502,"column_start":6,"column_end":15},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":707},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackkilrain/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.9.0/src/lib.rs","byte_start":23309,"byte_end":23318,"line_start":512,"line_end":512,"column_start":19,"column_end":28},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":707},"to":{"krate":2,"index":5536}}]}